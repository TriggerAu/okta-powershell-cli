#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AlternateId
No description available.
.PARAMETER DetailEntry
No description available.
.PARAMETER DisplayName
No description available.
.PARAMETER Id
No description available.
.PARAMETER Type
No description available.
.OUTPUTS

LogTarget<PSCustomObject>
#>

function Initialize-OktaLogTarget {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AlternateId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${DetailEntry},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaLogTarget' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "alternateId" = ${AlternateId}
            "detailEntry" = ${DetailEntry}
            "displayName" = ${DisplayName}
            "id" = ${Id}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to LogTarget<PSCustomObject>

.DESCRIPTION

Convert from JSON to LogTarget<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

LogTarget<PSCustomObject>
#>
function ConvertFrom-OktaJsonToLogTarget {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaLogTarget' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaLogTarget
        $AllProperties = ("alternateId", "detailEntry", "displayName", "id", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alternateId"))) { #optional property not found
            $AlternateId = $null
        } else {
            $AlternateId = $JsonParameters.PSobject.Properties["alternateId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "detailEntry"))) { #optional property not found
            $DetailEntry = $null
        } else {
            $DetailEntry = $JsonParameters.PSobject.Properties["detailEntry"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "alternateId" = ${AlternateId}
            "detailEntry" = ${DetailEntry}
            "displayName" = ${DisplayName}
            "id" = ${Id}
            "type" = ${Type}
        }

        return $PSO
    }

}


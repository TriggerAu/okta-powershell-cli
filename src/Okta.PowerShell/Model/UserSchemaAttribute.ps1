#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Description
No description available.
.PARAMETER Enum
No description available.
.PARAMETER ExternalName
No description available.
.PARAMETER ExternalNamespace
No description available.
.PARAMETER Items
No description available.
.PARAMETER Master
No description available.
.PARAMETER MaxLength
No description available.
.PARAMETER MinLength
No description available.
.PARAMETER Mutability
No description available.
.PARAMETER OneOf
No description available.
.PARAMETER Pattern
No description available.
.PARAMETER Permissions
No description available.
.PARAMETER Required
No description available.
.PARAMETER Scope
No description available.
.PARAMETER Title
No description available.
.PARAMETER Type
No description available.
.PARAMETER Union
No description available.
.PARAMETER Unique
No description available.
.OUTPUTS

UserSchemaAttribute<PSCustomObject>
#>

function Initialize-OktaUserSchemaAttribute {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Enum},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExternalNamespace},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Items},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Master},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxLength},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinLength},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mutability},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${OneOf},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pattern},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Permissions},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Required},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("NONE", "SELF")]
        [PSCustomObject]
        ${Scope},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("array", "boolean", "integer", "number", "string")]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DISABLE", "ENABLE")]
        [PSCustomObject]
        ${Union},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Unique}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaUserSchemaAttribute' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "enum" = ${Enum}
            "externalName" = ${ExternalName}
            "externalNamespace" = ${ExternalNamespace}
            "items" = ${Items}
            "master" = ${Master}
            "maxLength" = ${MaxLength}
            "minLength" = ${MinLength}
            "mutability" = ${Mutability}
            "oneOf" = ${OneOf}
            "pattern" = ${Pattern}
            "permissions" = ${Permissions}
            "required" = ${Required}
            "scope" = ${Scope}
            "title" = ${Title}
            "type" = ${Type}
            "union" = ${Union}
            "unique" = ${Unique}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UserSchemaAttribute<PSCustomObject>

.DESCRIPTION

Convert from JSON to UserSchemaAttribute<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UserSchemaAttribute<PSCustomObject>
#>
function ConvertFrom-OktaJsonToUserSchemaAttribute {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaUserSchemaAttribute' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaUserSchemaAttribute
        $AllProperties = ("description", "enum", "externalName", "externalNamespace", "items", "master", "maxLength", "minLength", "mutability", "oneOf", "pattern", "permissions", "required", "scope", "title", "type", "union", "unique")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enum"))) { #optional property not found
            $Enum = $null
        } else {
            $Enum = $JsonParameters.PSobject.Properties["enum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalName"))) { #optional property not found
            $ExternalName = $null
        } else {
            $ExternalName = $JsonParameters.PSobject.Properties["externalName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "externalNamespace"))) { #optional property not found
            $ExternalNamespace = $null
        } else {
            $ExternalNamespace = $JsonParameters.PSobject.Properties["externalNamespace"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "items"))) { #optional property not found
            $Items = $null
        } else {
            $Items = $JsonParameters.PSobject.Properties["items"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "master"))) { #optional property not found
            $Master = $null
        } else {
            $Master = $JsonParameters.PSobject.Properties["master"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxLength"))) { #optional property not found
            $MaxLength = $null
        } else {
            $MaxLength = $JsonParameters.PSobject.Properties["maxLength"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minLength"))) { #optional property not found
            $MinLength = $null
        } else {
            $MinLength = $JsonParameters.PSobject.Properties["minLength"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mutability"))) { #optional property not found
            $Mutability = $null
        } else {
            $Mutability = $JsonParameters.PSobject.Properties["mutability"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "oneOf"))) { #optional property not found
            $OneOf = $null
        } else {
            $OneOf = $JsonParameters.PSobject.Properties["oneOf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pattern"))) { #optional property not found
            $Pattern = $null
        } else {
            $Pattern = $JsonParameters.PSobject.Properties["pattern"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "permissions"))) { #optional property not found
            $Permissions = $null
        } else {
            $Permissions = $JsonParameters.PSobject.Properties["permissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "required"))) { #optional property not found
            $Required = $null
        } else {
            $Required = $JsonParameters.PSobject.Properties["required"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "union"))) { #optional property not found
            $Union = $null
        } else {
            $Union = $JsonParameters.PSobject.Properties["union"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unique"))) { #optional property not found
            $Unique = $null
        } else {
            $Unique = $JsonParameters.PSobject.Properties["unique"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "enum" = ${Enum}
            "externalName" = ${ExternalName}
            "externalNamespace" = ${ExternalNamespace}
            "items" = ${Items}
            "master" = ${Master}
            "maxLength" = ${MaxLength}
            "minLength" = ${MinLength}
            "mutability" = ${Mutability}
            "oneOf" = ${OneOf}
            "pattern" = ${Pattern}
            "permissions" = ${Permissions}
            "required" = ${Required}
            "scope" = ${Scope}
            "title" = ${Title}
            "type" = ${Type}
            "union" = ${Union}
            "unique" = ${Unique}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Setting for auto-update

.PARAMETER AgentType
No description available.
.PARAMETER ContinueOnError
No description available.
.PARAMETER LatestVersion
No description available.
.PARAMETER MinimalSupportedVersion
No description available.
.PARAMETER PoolId
No description available.
.PARAMETER PoolName
No description available.
.PARAMETER ReleaseChannel
No description available.
.OUTPUTS

AgentPoolUpdateSetting<PSCustomObject>
#>

function Initialize-OktaAgentPoolUpdateSetting {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("AD", "IWA", "LDAP", "MFA", "OPP", "RUM", "Radius")]
        [PSCustomObject]
        ${AgentType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ContinueOnError},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LatestVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinimalSupportedVersion},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("BETA", "EA", "GA", "TEST")]
        [PSCustomObject]
        ${ReleaseChannel}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaAgentPoolUpdateSetting' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "agentType" = ${AgentType}
            "continueOnError" = ${ContinueOnError}
            "latestVersion" = ${LatestVersion}
            "minimalSupportedVersion" = ${MinimalSupportedVersion}
            "poolId" = ${PoolId}
            "poolName" = ${PoolName}
            "releaseChannel" = ${ReleaseChannel}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AgentPoolUpdateSetting<PSCustomObject>

.DESCRIPTION

Convert from JSON to AgentPoolUpdateSetting<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AgentPoolUpdateSetting<PSCustomObject>
#>
function ConvertFrom-OktaJsonToAgentPoolUpdateSetting {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaAgentPoolUpdateSetting' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaAgentPoolUpdateSetting
        $AllProperties = ("agentType", "continueOnError", "latestVersion", "minimalSupportedVersion", "poolId", "poolName", "releaseChannel")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agentType"))) { #optional property not found
            $AgentType = $null
        } else {
            $AgentType = $JsonParameters.PSobject.Properties["agentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "continueOnError"))) { #optional property not found
            $ContinueOnError = $null
        } else {
            $ContinueOnError = $JsonParameters.PSobject.Properties["continueOnError"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "latestVersion"))) { #optional property not found
            $LatestVersion = $null
        } else {
            $LatestVersion = $JsonParameters.PSobject.Properties["latestVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minimalSupportedVersion"))) { #optional property not found
            $MinimalSupportedVersion = $null
        } else {
            $MinimalSupportedVersion = $JsonParameters.PSobject.Properties["minimalSupportedVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "poolId"))) { #optional property not found
            $PoolId = $null
        } else {
            $PoolId = $JsonParameters.PSobject.Properties["poolId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "poolName"))) { #optional property not found
            $PoolName = $null
        } else {
            $PoolName = $JsonParameters.PSobject.Properties["poolName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "releaseChannel"))) { #optional property not found
            $ReleaseChannel = $null
        } else {
            $ReleaseChannel = $JsonParameters.PSobject.Properties["releaseChannel"].value
        }

        $PSO = [PSCustomObject]@{
            "agentType" = ${AgentType}
            "continueOnError" = ${ContinueOnError}
            "latestVersion" = ${LatestVersion}
            "minimalSupportedVersion" = ${MinimalSupportedVersion}
            "poolId" = ${PoolId}
            "poolName" = ${PoolName}
            "releaseChannel" = ${ReleaseChannel}
        }

        return $PSO
    }

}


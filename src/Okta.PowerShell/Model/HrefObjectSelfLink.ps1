#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Hints
No description available.
.PARAMETER Href
No description available.
.PARAMETER Name
No description available.
.PARAMETER Type
The media type of the link. If omitted, it is implicitly `application/json`.
.OUTPUTS

HrefObjectSelfLink<PSCustomObject>
#>

function Initialize-OktaHrefObjectSelfLink {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Hints},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Href},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaHrefObjectSelfLink' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Href) {
            throw "invalid value for 'Href', 'Href' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "hints" = ${Hints}
            "href" = ${Href}
            "name" = ${Name}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HrefObjectSelfLink<PSCustomObject>

.DESCRIPTION

Convert from JSON to HrefObjectSelfLink<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HrefObjectSelfLink<PSCustomObject>
#>
function ConvertFrom-OktaJsonToHrefObjectSelfLink {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaHrefObjectSelfLink' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaHrefObjectSelfLink
        $AllProperties = ("hints", "href", "name", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'href' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "href"))) {
            throw "Error! JSON cannot be serialized due to the required property 'href' missing."
        } else {
            $Href = $JsonParameters.PSobject.Properties["href"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hints"))) { #optional property not found
            $Hints = $null
        } else {
            $Hints = $JsonParameters.PSobject.Properties["hints"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "hints" = ${Hints}
            "href" = ${Href}
            "name" = ${Name}
            "type" = ${Type}
        }

        return $PSO
    }

}


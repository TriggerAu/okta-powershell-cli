#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER HookKeyId
No description available.
.PARAMETER AuthScheme
No description available.
.PARAMETER Headers
No description available.
.PARAMETER Method
No description available.
.PARAMETER Uri
No description available.
.OUTPUTS

InlineHookOAuthPrivateKeyJwtConfig<PSCustomObject>
#>

function Initialize-OktaInlineHookOAuthPrivateKeyJwtConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HookKeyId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AuthScheme},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Headers},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Method},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uri}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaInlineHookOAuthPrivateKeyJwtConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "hookKeyId" = ${HookKeyId}
            "authScheme" = ${AuthScheme}
            "headers" = ${Headers}
            "method" = ${Method}
            "uri" = ${Uri}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to InlineHookOAuthPrivateKeyJwtConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to InlineHookOAuthPrivateKeyJwtConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

InlineHookOAuthPrivateKeyJwtConfig<PSCustomObject>
#>
function ConvertFrom-OktaJsonToInlineHookOAuthPrivateKeyJwtConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaInlineHookOAuthPrivateKeyJwtConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaInlineHookOAuthPrivateKeyJwtConfig
        $AllProperties = ("hookKeyId", "authScheme", "headers", "method", "uri")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hookKeyId"))) { #optional property not found
            $HookKeyId = $null
        } else {
            $HookKeyId = $JsonParameters.PSobject.Properties["hookKeyId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authScheme"))) { #optional property not found
            $AuthScheme = $null
        } else {
            $AuthScheme = $JsonParameters.PSobject.Properties["authScheme"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "headers"))) { #optional property not found
            $Headers = $null
        } else {
            $Headers = $JsonParameters.PSobject.Properties["headers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "method"))) { #optional property not found
            $Method = $null
        } else {
            $Method = $JsonParameters.PSobject.Properties["method"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uri"))) { #optional property not found
            $Uri = $null
        } else {
            $Uri = $JsonParameters.PSobject.Properties["uri"].value
        }

        $PSO = [PSCustomObject]@{
            "hookKeyId" = ${HookKeyId}
            "authScheme" = ${AuthScheme}
            "headers" = ${Headers}
            "method" = ${Method}
            "uri" = ${Uri}
        }

        return $PSO
    }

}


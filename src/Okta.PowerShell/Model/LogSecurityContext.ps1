#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AsNumber
No description available.
.PARAMETER AsOrg
No description available.
.PARAMETER Domain
No description available.
.PARAMETER Isp
No description available.
.PARAMETER IsProxy
No description available.
.OUTPUTS

LogSecurityContext<PSCustomObject>
#>

function Initialize-OktaLogSecurityContext {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AsNumber},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AsOrg},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Isp},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsProxy}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaLogSecurityContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "asNumber" = ${AsNumber}
            "asOrg" = ${AsOrg}
            "domain" = ${Domain}
            "isp" = ${Isp}
            "isProxy" = ${IsProxy}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to LogSecurityContext<PSCustomObject>

.DESCRIPTION

Convert from JSON to LogSecurityContext<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

LogSecurityContext<PSCustomObject>
#>
function ConvertFrom-OktaJsonToLogSecurityContext {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaLogSecurityContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaLogSecurityContext
        $AllProperties = ("asNumber", "asOrg", "domain", "isp", "isProxy")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asNumber"))) { #optional property not found
            $AsNumber = $null
        } else {
            $AsNumber = $JsonParameters.PSobject.Properties["asNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asOrg"))) { #optional property not found
            $AsOrg = $null
        } else {
            $AsOrg = $JsonParameters.PSobject.Properties["asOrg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isp"))) { #optional property not found
            $Isp = $null
        } else {
            $Isp = $JsonParameters.PSobject.Properties["isp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isProxy"))) { #optional property not found
            $IsProxy = $null
        } else {
            $IsProxy = $JsonParameters.PSobject.Properties["isProxy"].value
        }

        $PSO = [PSCustomObject]@{
            "asNumber" = ${AsNumber}
            "asOrg" = ${AsOrg}
            "domain" = ${Domain}
            "isp" = ${Isp}
            "isProxy" = ${IsProxy}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Address1
No description available.
.PARAMETER Address2
No description available.
.PARAMETER City
No description available.
.PARAMETER CompanyName
No description available.
.PARAMETER Country
No description available.
.PARAMETER Created
No description available.
.PARAMETER EndUserSupportHelpURL
No description available.
.PARAMETER ExpiresAt
No description available.
.PARAMETER Id
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER PhoneNumber
No description available.
.PARAMETER PostalCode
No description available.
.PARAMETER State
No description available.
.PARAMETER Status
No description available.
.PARAMETER Subdomain
No description available.
.PARAMETER SupportPhoneNumber
No description available.
.PARAMETER Website
No description available.
.PARAMETER Links
No description available.
.OUTPUTS

OrgSetting<PSCustomObject>
#>

function Initialize-OktaOrgSetting {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address1},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address2},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${City},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CompanyName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Country},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EndUserSupportHelpURL},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ExpiresAt},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PhoneNumber},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PostalCode},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Status},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subdomain},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SupportPhoneNumber},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Website},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Links}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaOrgSetting' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "address1" = ${Address1}
            "address2" = ${Address2}
            "city" = ${City}
            "companyName" = ${CompanyName}
            "country" = ${Country}
            "created" = ${Created}
            "endUserSupportHelpURL" = ${EndUserSupportHelpURL}
            "expiresAt" = ${ExpiresAt}
            "id" = ${Id}
            "lastUpdated" = ${LastUpdated}
            "phoneNumber" = ${PhoneNumber}
            "postalCode" = ${PostalCode}
            "state" = ${State}
            "status" = ${Status}
            "subdomain" = ${Subdomain}
            "supportPhoneNumber" = ${SupportPhoneNumber}
            "website" = ${Website}
            "_links" = ${Links}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrgSetting<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrgSetting<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrgSetting<PSCustomObject>
#>
function ConvertFrom-OktaJsonToOrgSetting {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaOrgSetting' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaOrgSetting
        $AllProperties = ("address1", "address2", "city", "companyName", "country", "created", "endUserSupportHelpURL", "expiresAt", "id", "lastUpdated", "phoneNumber", "postalCode", "state", "status", "subdomain", "supportPhoneNumber", "website", "_links")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address1"))) { #optional property not found
            $Address1 = $null
        } else {
            $Address1 = $JsonParameters.PSobject.Properties["address1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address2"))) { #optional property not found
            $Address2 = $null
        } else {
            $Address2 = $JsonParameters.PSobject.Properties["address2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "city"))) { #optional property not found
            $City = $null
        } else {
            $City = $JsonParameters.PSobject.Properties["city"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "companyName"))) { #optional property not found
            $CompanyName = $null
        } else {
            $CompanyName = $JsonParameters.PSobject.Properties["companyName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "country"))) { #optional property not found
            $Country = $null
        } else {
            $Country = $JsonParameters.PSobject.Properties["country"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endUserSupportHelpURL"))) { #optional property not found
            $EndUserSupportHelpURL = $null
        } else {
            $EndUserSupportHelpURL = $JsonParameters.PSobject.Properties["endUserSupportHelpURL"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expiresAt"))) { #optional property not found
            $ExpiresAt = $null
        } else {
            $ExpiresAt = $JsonParameters.PSobject.Properties["expiresAt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phoneNumber"))) { #optional property not found
            $PhoneNumber = $null
        } else {
            $PhoneNumber = $JsonParameters.PSobject.Properties["phoneNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postalCode"))) { #optional property not found
            $PostalCode = $null
        } else {
            $PostalCode = $JsonParameters.PSobject.Properties["postalCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subdomain"))) { #optional property not found
            $Subdomain = $null
        } else {
            $Subdomain = $JsonParameters.PSobject.Properties["subdomain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "supportPhoneNumber"))) { #optional property not found
            $SupportPhoneNumber = $null
        } else {
            $SupportPhoneNumber = $JsonParameters.PSobject.Properties["supportPhoneNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "website"))) { #optional property not found
            $Website = $null
        } else {
            $Website = $JsonParameters.PSobject.Properties["website"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_links"))) { #optional property not found
            $Links = $null
        } else {
            $Links = $JsonParameters.PSobject.Properties["_links"].value
        }

        $PSO = [PSCustomObject]@{
            "address1" = ${Address1}
            "address2" = ${Address2}
            "city" = ${City}
            "companyName" = ${CompanyName}
            "country" = ${Country}
            "created" = ${Created}
            "endUserSupportHelpURL" = ${EndUserSupportHelpURL}
            "expiresAt" = ${ExpiresAt}
            "id" = ${Id}
            "lastUpdated" = ${LastUpdated}
            "phoneNumber" = ${PhoneNumber}
            "postalCode" = ${PostalCode}
            "state" = ${State}
            "status" = ${Status}
            "subdomain" = ${Subdomain}
            "supportPhoneNumber" = ${SupportPhoneNumber}
            "website" = ${Website}
            "_links" = ${Links}
        }

        return $PSO
    }

}


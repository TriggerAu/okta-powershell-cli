#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode. Overrides the `defaultMode` property for the specified use cases.

.PARAMETER LOGINPAGE
No description available.
.PARAMETER OAUTH2AUTHORIZE
No description available.
.PARAMETER OIEAPPINTENT
No description available.
.OUTPUTS

PerClientRateLimitSettingsUseCaseModeOverrides<PSCustomObject>
#>

function Initialize-OktaPerClientRateLimitSettingsUseCaseModeOverrides {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DISABLE", "ENFORCE", "PREVIEW")]
        [PSCustomObject]
        ${LOGINPAGE},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DISABLE", "ENFORCE", "PREVIEW")]
        [PSCustomObject]
        ${OAUTH2AUTHORIZE},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DISABLE", "ENFORCE", "PREVIEW")]
        [PSCustomObject]
        ${OIEAPPINTENT}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaPerClientRateLimitSettingsUseCaseModeOverrides' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "LOGIN_PAGE" = ${LOGINPAGE}
            "OAUTH2_AUTHORIZE" = ${OAUTH2AUTHORIZE}
            "OIE_APP_INTENT" = ${OIEAPPINTENT}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PerClientRateLimitSettingsUseCaseModeOverrides<PSCustomObject>

.DESCRIPTION

Convert from JSON to PerClientRateLimitSettingsUseCaseModeOverrides<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PerClientRateLimitSettingsUseCaseModeOverrides<PSCustomObject>
#>
function ConvertFrom-OktaJsonToPerClientRateLimitSettingsUseCaseModeOverrides {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaPerClientRateLimitSettingsUseCaseModeOverrides' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaPerClientRateLimitSettingsUseCaseModeOverrides
        $AllProperties = ("LOGIN_PAGE", "OAUTH2_AUTHORIZE", "OIE_APP_INTENT")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "LOGIN_PAGE"))) { #optional property not found
            $LOGINPAGE = $null
        } else {
            $LOGINPAGE = $JsonParameters.PSobject.Properties["LOGIN_PAGE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OAUTH2_AUTHORIZE"))) { #optional property not found
            $OAUTH2AUTHORIZE = $null
        } else {
            $OAUTH2AUTHORIZE = $JsonParameters.PSobject.Properties["OAUTH2_AUTHORIZE"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "OIE_APP_INTENT"))) { #optional property not found
            $OIEAPPINTENT = $null
        } else {
            $OIEAPPINTENT = $JsonParameters.PSobject.Properties["OIE_APP_INTENT"].value
        }

        $PSO = [PSCustomObject]@{
            "LOGIN_PAGE" = ${LOGINPAGE}
            "OAUTH2_AUTHORIZE" = ${OAUTH2AUTHORIZE}
            "OIE_APP_INTENT" = ${OIEAPPINTENT}
        }

        return $PSO
    }

}


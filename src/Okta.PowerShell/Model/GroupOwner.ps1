#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DisplayName
No description available.
.PARAMETER Id
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER OriginId
No description available.
.PARAMETER OriginType
No description available.
.PARAMETER Resolved
No description available.
.PARAMETER Type
No description available.
.OUTPUTS

GroupOwner<PSCustomObject>
#>

function Initialize-OktaGroupOwner {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OriginId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("APPLICATION", "OKTA_DIRECTORY")]
        [PSCustomObject]
        ${OriginType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Resolved},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("GROUP", "UNKNOWN", "USER")]
        [PSCustomObject]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaGroupOwner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "displayName" = ${DisplayName}
            "id" = ${Id}
            "lastUpdated" = ${LastUpdated}
            "originId" = ${OriginId}
            "originType" = ${OriginType}
            "resolved" = ${Resolved}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GroupOwner<PSCustomObject>

.DESCRIPTION

Convert from JSON to GroupOwner<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GroupOwner<PSCustomObject>
#>
function ConvertFrom-OktaJsonToGroupOwner {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaGroupOwner' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaGroupOwner
        $AllProperties = ("displayName", "id", "lastUpdated", "originId", "originType", "resolved", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "originId"))) { #optional property not found
            $OriginId = $null
        } else {
            $OriginId = $JsonParameters.PSobject.Properties["originId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "originType"))) { #optional property not found
            $OriginType = $null
        } else {
            $OriginType = $JsonParameters.PSobject.Properties["originType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resolved"))) { #optional property not found
            $Resolved = $null
        } else {
            $Resolved = $JsonParameters.PSobject.Properties["resolved"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "displayName" = ${DisplayName}
            "id" = ${Id}
            "lastUpdated" = ${LastUpdated}
            "originId" = ${OriginId}
            "originType" = ${OriginType}
            "resolved" = ${Resolved}
            "type" = ${Type}
        }

        return $PSO
    }

}


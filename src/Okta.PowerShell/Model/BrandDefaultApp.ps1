#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AppInstanceId
No description available.
.PARAMETER AppLinkName
No description available.
.OUTPUTS

BrandDefaultApp<PSCustomObject>
#>

function Initialize-OktaBrandDefaultApp {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppInstanceId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppLinkName}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaBrandDefaultApp' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "appInstanceId" = ${AppInstanceId}
            "appLinkName" = ${AppLinkName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BrandDefaultApp<PSCustomObject>

.DESCRIPTION

Convert from JSON to BrandDefaultApp<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BrandDefaultApp<PSCustomObject>
#>
function ConvertFrom-OktaJsonToBrandDefaultApp {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaBrandDefaultApp' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaBrandDefaultApp
        $AllProperties = ("appInstanceId", "appLinkName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appInstanceId"))) { #optional property not found
            $AppInstanceId = $null
        } else {
            $AppInstanceId = $JsonParameters.PSobject.Properties["appInstanceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appLinkName"))) { #optional property not found
            $AppLinkName = $null
        } else {
            $AppLinkName = $JsonParameters.PSobject.Properties["appLinkName"].value
        }

        $PSO = [PSCustomObject]@{
            "appInstanceId" = ${AppInstanceId}
            "appLinkName" = ${AppLinkName}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Migrated
No description available.
.PARAMETER Platform
No description available.
.PARAMETER Rooted
No description available.
.PARAMETER TrustLevel
No description available.
.PARAMETER Managed
No description available.
.PARAMETER Registered
No description available.
.OUTPUTS

DeviceAccessPolicyRuleCondition<PSCustomObject>
#>

function Initialize-OktaDeviceAccessPolicyRuleCondition {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Migrated},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Platform},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Rooted},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ANY", "TRUSTED")]
        [PSCustomObject]
        ${TrustLevel},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Managed},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Registered}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaDeviceAccessPolicyRuleCondition' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "migrated" = ${Migrated}
            "platform" = ${Platform}
            "rooted" = ${Rooted}
            "trustLevel" = ${TrustLevel}
            "managed" = ${Managed}
            "registered" = ${Registered}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DeviceAccessPolicyRuleCondition<PSCustomObject>

.DESCRIPTION

Convert from JSON to DeviceAccessPolicyRuleCondition<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DeviceAccessPolicyRuleCondition<PSCustomObject>
#>
function ConvertFrom-OktaJsonToDeviceAccessPolicyRuleCondition {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaDeviceAccessPolicyRuleCondition' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaDeviceAccessPolicyRuleCondition
        $AllProperties = ("migrated", "platform", "rooted", "trustLevel", "managed", "registered")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "migrated"))) { #optional property not found
            $Migrated = $null
        } else {
            $Migrated = $JsonParameters.PSobject.Properties["migrated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "platform"))) { #optional property not found
            $Platform = $null
        } else {
            $Platform = $JsonParameters.PSobject.Properties["platform"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rooted"))) { #optional property not found
            $Rooted = $null
        } else {
            $Rooted = $JsonParameters.PSobject.Properties["rooted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "trustLevel"))) { #optional property not found
            $TrustLevel = $null
        } else {
            $TrustLevel = $JsonParameters.PSobject.Properties["trustLevel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "managed"))) { #optional property not found
            $Managed = $null
        } else {
            $Managed = $JsonParameters.PSobject.Properties["managed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "registered"))) { #optional property not found
            $Registered = $null
        } else {
            $Registered = $JsonParameters.PSobject.Properties["registered"].value
        }

        $PSO = [PSCustomObject]@{
            "migrated" = ${Migrated}
            "platform" = ${Platform}
            "rooted" = ${Rooted}
            "trustLevel" = ${TrustLevel}
            "managed" = ${Managed}
            "registered" = ${Registered}
        }

        return $PSO
    }

}


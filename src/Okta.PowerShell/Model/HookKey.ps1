#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.
.PARAMETER Id
No description available.
.PARAMETER IsUsed
No description available.
.PARAMETER KeyId
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER Name
No description available.
.PARAMETER Embedded
No description available.
.OUTPUTS

HookKey<PSCustomObject>
#>

function Initialize-OktaHookKey {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${IsUsed},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${KeyId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Embedded}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaHookKey' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "created" = ${Created}
            "id" = ${Id}
            "isUsed" = ${IsUsed}
            "keyId" = ${KeyId}
            "lastUpdated" = ${LastUpdated}
            "name" = ${Name}
            "_embedded" = ${Embedded}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HookKey<PSCustomObject>

.DESCRIPTION

Convert from JSON to HookKey<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HookKey<PSCustomObject>
#>
function ConvertFrom-OktaJsonToHookKey {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaHookKey' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaHookKey
        $AllProperties = ("created", "id", "isUsed", "keyId", "lastUpdated", "name", "_embedded")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isUsed"))) { #optional property not found
            $IsUsed = $null
        } else {
            $IsUsed = $JsonParameters.PSobject.Properties["isUsed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keyId"))) { #optional property not found
            $KeyId = $null
        } else {
            $KeyId = $JsonParameters.PSobject.Properties["keyId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_embedded"))) { #optional property not found
            $Embedded = $null
        } else {
            $Embedded = $JsonParameters.PSobject.Properties["_embedded"].value
        }

        $PSO = [PSCustomObject]@{
            "created" = ${Created}
            "id" = ${Id}
            "isUsed" = ${IsUsed}
            "keyId" = ${KeyId}
            "lastUpdated" = ${LastUpdated}
            "name" = ${Name}
            "_embedded" = ${Embedded}
        }

        return $PSO
    }

}


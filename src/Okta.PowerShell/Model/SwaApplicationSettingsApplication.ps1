#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ButtonField
No description available.
.PARAMETER ButtonSelector
No description available.
.PARAMETER Checkbox
No description available.
.PARAMETER ExtraFieldSelector
No description available.
.PARAMETER ExtraFieldValue
No description available.
.PARAMETER LoginUrlRegex
No description available.
.PARAMETER PasswordField
No description available.
.PARAMETER PasswordSelector
No description available.
.PARAMETER RedirectUrl
No description available.
.PARAMETER TargetURL
No description available.
.PARAMETER Url
No description available.
.PARAMETER UsernameField
No description available.
.PARAMETER UserNameSelector
No description available.
.OUTPUTS

SwaApplicationSettingsApplication<PSCustomObject>
#>

function Initialize-OktaSwaApplicationSettingsApplication {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ButtonField},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ButtonSelector},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Checkbox},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExtraFieldSelector},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExtraFieldValue},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LoginUrlRegex},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PasswordField},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PasswordSelector},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RedirectUrl},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetURL},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UsernameField},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserNameSelector}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaSwaApplicationSettingsApplication' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "buttonField" = ${ButtonField}
            "buttonSelector" = ${ButtonSelector}
            "checkbox" = ${Checkbox}
            "extraFieldSelector" = ${ExtraFieldSelector}
            "extraFieldValue" = ${ExtraFieldValue}
            "loginUrlRegex" = ${LoginUrlRegex}
            "passwordField" = ${PasswordField}
            "passwordSelector" = ${PasswordSelector}
            "redirectUrl" = ${RedirectUrl}
            "targetURL" = ${TargetURL}
            "url" = ${Url}
            "usernameField" = ${UsernameField}
            "userNameSelector" = ${UserNameSelector}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SwaApplicationSettingsApplication<PSCustomObject>

.DESCRIPTION

Convert from JSON to SwaApplicationSettingsApplication<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SwaApplicationSettingsApplication<PSCustomObject>
#>
function ConvertFrom-OktaJsonToSwaApplicationSettingsApplication {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaSwaApplicationSettingsApplication' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaSwaApplicationSettingsApplication
        $AllProperties = ("buttonField", "buttonSelector", "checkbox", "extraFieldSelector", "extraFieldValue", "loginUrlRegex", "passwordField", "passwordSelector", "redirectUrl", "targetURL", "url", "usernameField", "userNameSelector")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buttonField"))) { #optional property not found
            $ButtonField = $null
        } else {
            $ButtonField = $JsonParameters.PSobject.Properties["buttonField"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "buttonSelector"))) { #optional property not found
            $ButtonSelector = $null
        } else {
            $ButtonSelector = $JsonParameters.PSobject.Properties["buttonSelector"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "checkbox"))) { #optional property not found
            $Checkbox = $null
        } else {
            $Checkbox = $JsonParameters.PSobject.Properties["checkbox"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "extraFieldSelector"))) { #optional property not found
            $ExtraFieldSelector = $null
        } else {
            $ExtraFieldSelector = $JsonParameters.PSobject.Properties["extraFieldSelector"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "extraFieldValue"))) { #optional property not found
            $ExtraFieldValue = $null
        } else {
            $ExtraFieldValue = $JsonParameters.PSobject.Properties["extraFieldValue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loginUrlRegex"))) { #optional property not found
            $LoginUrlRegex = $null
        } else {
            $LoginUrlRegex = $JsonParameters.PSobject.Properties["loginUrlRegex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordField"))) { #optional property not found
            $PasswordField = $null
        } else {
            $PasswordField = $JsonParameters.PSobject.Properties["passwordField"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordSelector"))) { #optional property not found
            $PasswordSelector = $null
        } else {
            $PasswordSelector = $JsonParameters.PSobject.Properties["passwordSelector"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "redirectUrl"))) { #optional property not found
            $RedirectUrl = $null
        } else {
            $RedirectUrl = $JsonParameters.PSobject.Properties["redirectUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetURL"))) { #optional property not found
            $TargetURL = $null
        } else {
            $TargetURL = $JsonParameters.PSobject.Properties["targetURL"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usernameField"))) { #optional property not found
            $UsernameField = $null
        } else {
            $UsernameField = $JsonParameters.PSobject.Properties["usernameField"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userNameSelector"))) { #optional property not found
            $UserNameSelector = $null
        } else {
            $UserNameSelector = $JsonParameters.PSobject.Properties["userNameSelector"].value
        }

        $PSO = [PSCustomObject]@{
            "buttonField" = ${ButtonField}
            "buttonSelector" = ${ButtonSelector}
            "checkbox" = ${Checkbox}
            "extraFieldSelector" = ${ExtraFieldSelector}
            "extraFieldValue" = ${ExtraFieldValue}
            "loginUrlRegex" = ${LoginUrlRegex}
            "passwordField" = ${PasswordField}
            "passwordSelector" = ${PasswordSelector}
            "redirectUrl" = ${RedirectUrl}
            "targetURL" = ${TargetURL}
            "url" = ${Url}
            "usernameField" = ${UsernameField}
            "userNameSelector" = ${UserNameSelector}
        }

        return $PSO
    }

}


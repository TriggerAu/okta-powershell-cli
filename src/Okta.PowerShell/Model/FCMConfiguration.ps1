#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER FileName
(Optional) File name for Admin Console display
.PARAMETER ProjectId
Project ID of FCM configuration
.PARAMETER ServiceAccountJson
JSON containing the private service account key and service account details. See [Creating and managing service account keys](https://cloud.google.com/iam/docs/creating-managing-service-account-keys) for more information on creating service account keys in JSON.
.OUTPUTS

FCMConfiguration<PSCustomObject>
#>

function Initialize-OktaFCMConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ServiceAccountJson}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaFCMConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "fileName" = ${FileName}
            "projectId" = ${ProjectId}
            "serviceAccountJson" = ${ServiceAccountJson}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FCMConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to FCMConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FCMConfiguration<PSCustomObject>
#>
function ConvertFrom-OktaJsonToFCMConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaFCMConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaFCMConfiguration
        $AllProperties = ("fileName", "projectId", "serviceAccountJson")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileName"))) { #optional property not found
            $FileName = $null
        } else {
            $FileName = $JsonParameters.PSobject.Properties["fileName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectId"))) { #optional property not found
            $ProjectId = $null
        } else {
            $ProjectId = $JsonParameters.PSobject.Properties["projectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serviceAccountJson"))) { #optional property not found
            $ServiceAccountJson = $null
        } else {
            $ServiceAccountJson = $JsonParameters.PSobject.Properties["serviceAccountJson"].value
        }

        $PSO = [PSCustomObject]@{
            "fileName" = ${FileName}
            "projectId" = ${ProjectId}
            "serviceAccountJson" = ${ServiceAccountJson}
        }

        return $PSO
    }

}


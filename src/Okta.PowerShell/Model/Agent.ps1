#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Agent details

.PARAMETER Id
No description available.
.PARAMETER IsHidden
No description available.
.PARAMETER IsLatestGAedVersion
No description available.
.PARAMETER LastConnection
No description available.
.PARAMETER Name
No description available.
.PARAMETER OperationalStatus
No description available.
.PARAMETER PoolId
No description available.
.PARAMETER Type
No description available.
.PARAMETER UpdateMessage
No description available.
.PARAMETER UpdateStatus
No description available.
.PARAMETER Version
No description available.
.PARAMETER Links
No description available.
.OUTPUTS

Agent<PSCustomObject>
#>

function Initialize-OktaAgent {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsHidden},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsLatestGAedVersion},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastConnection},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DEGRADED", "DISRUPTED", "INACTIVE", "OPERATIONAL")]
        [PSCustomObject]
        ${OperationalStatus},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("AD", "IWA", "LDAP", "MFA", "OPP", "RUM", "Radius")]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UpdateMessage},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Cancelled", "Failed", "InProgress", "PendingCompletion", "Scheduled", "Success")]
        [PSCustomObject]
        ${UpdateStatus},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Links}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaAgent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "isHidden" = ${IsHidden}
            "isLatestGAedVersion" = ${IsLatestGAedVersion}
            "lastConnection" = ${LastConnection}
            "name" = ${Name}
            "operationalStatus" = ${OperationalStatus}
            "poolId" = ${PoolId}
            "type" = ${Type}
            "updateMessage" = ${UpdateMessage}
            "updateStatus" = ${UpdateStatus}
            "version" = ${Version}
            "_links" = ${Links}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Agent<PSCustomObject>

.DESCRIPTION

Convert from JSON to Agent<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Agent<PSCustomObject>
#>
function ConvertFrom-OktaJsonToAgent {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaAgent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaAgent
        $AllProperties = ("id", "isHidden", "isLatestGAedVersion", "lastConnection", "name", "operationalStatus", "poolId", "type", "updateMessage", "updateStatus", "version", "_links")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isHidden"))) { #optional property not found
            $IsHidden = $null
        } else {
            $IsHidden = $JsonParameters.PSobject.Properties["isHidden"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isLatestGAedVersion"))) { #optional property not found
            $IsLatestGAedVersion = $null
        } else {
            $IsLatestGAedVersion = $JsonParameters.PSobject.Properties["isLatestGAedVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastConnection"))) { #optional property not found
            $LastConnection = $null
        } else {
            $LastConnection = $JsonParameters.PSobject.Properties["lastConnection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operationalStatus"))) { #optional property not found
            $OperationalStatus = $null
        } else {
            $OperationalStatus = $JsonParameters.PSobject.Properties["operationalStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "poolId"))) { #optional property not found
            $PoolId = $null
        } else {
            $PoolId = $JsonParameters.PSobject.Properties["poolId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updateMessage"))) { #optional property not found
            $UpdateMessage = $null
        } else {
            $UpdateMessage = $JsonParameters.PSobject.Properties["updateMessage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updateStatus"))) { #optional property not found
            $UpdateStatus = $null
        } else {
            $UpdateStatus = $JsonParameters.PSobject.Properties["updateStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_links"))) { #optional property not found
            $Links = $null
        } else {
            $Links = $JsonParameters.PSobject.Properties["_links"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "isHidden" = ${IsHidden}
            "isLatestGAedVersion" = ${IsLatestGAedVersion}
            "lastConnection" = ${LastConnection}
            "name" = ${Name}
            "operationalStatus" = ${OperationalStatus}
            "poolId" = ${PoolId}
            "type" = ${Type}
            "updateMessage" = ${UpdateMessage}
            "updateStatus" = ${UpdateStatus}
            "version" = ${Version}
            "_links" = ${Links}
        }

        return $PSO
    }

}


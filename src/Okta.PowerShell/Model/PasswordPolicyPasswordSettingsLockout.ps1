#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AutoUnlockMinutes
No description available.
.PARAMETER MaxAttempts
No description available.
.PARAMETER ShowLockoutFailures
No description available.
.PARAMETER UserLockoutNotificationChannels
No description available.
.OUTPUTS

PasswordPolicyPasswordSettingsLockout<PSCustomObject>
#>

function Initialize-OktaPasswordPolicyPasswordSettingsLockout {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AutoUnlockMinutes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxAttempts},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ShowLockoutFailures},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${UserLockoutNotificationChannels}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaPasswordPolicyPasswordSettingsLockout' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "autoUnlockMinutes" = ${AutoUnlockMinutes}
            "maxAttempts" = ${MaxAttempts}
            "showLockoutFailures" = ${ShowLockoutFailures}
            "userLockoutNotificationChannels" = ${UserLockoutNotificationChannels}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PasswordPolicyPasswordSettingsLockout<PSCustomObject>

.DESCRIPTION

Convert from JSON to PasswordPolicyPasswordSettingsLockout<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PasswordPolicyPasswordSettingsLockout<PSCustomObject>
#>
function ConvertFrom-OktaJsonToPasswordPolicyPasswordSettingsLockout {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaPasswordPolicyPasswordSettingsLockout' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaPasswordPolicyPasswordSettingsLockout
        $AllProperties = ("autoUnlockMinutes", "maxAttempts", "showLockoutFailures", "userLockoutNotificationChannels")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoUnlockMinutes"))) { #optional property not found
            $AutoUnlockMinutes = $null
        } else {
            $AutoUnlockMinutes = $JsonParameters.PSobject.Properties["autoUnlockMinutes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxAttempts"))) { #optional property not found
            $MaxAttempts = $null
        } else {
            $MaxAttempts = $JsonParameters.PSobject.Properties["maxAttempts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "showLockoutFailures"))) { #optional property not found
            $ShowLockoutFailures = $null
        } else {
            $ShowLockoutFailures = $JsonParameters.PSobject.Properties["showLockoutFailures"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userLockoutNotificationChannels"))) { #optional property not found
            $UserLockoutNotificationChannels = $null
        } else {
            $UserLockoutNotificationChannels = $JsonParameters.PSobject.Properties["userLockoutNotificationChannels"].value
        }

        $PSO = [PSCustomObject]@{
            "autoUnlockMinutes" = ${AutoUnlockMinutes}
            "maxAttempts" = ${MaxAttempts}
            "showLockoutFailures" = ${ShowLockoutFailures}
            "userLockoutNotificationChannels" = ${UserLockoutNotificationChannels}
        }

        return $PSO
    }

}


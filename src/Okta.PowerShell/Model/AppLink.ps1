#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AppAssignmentId
No description available.
.PARAMETER AppInstanceId
No description available.
.PARAMETER AppName
No description available.
.PARAMETER CredentialsSetup
No description available.
.PARAMETER Hidden
No description available.
.PARAMETER Id
No description available.
.PARAMETER Label
No description available.
.PARAMETER LinkUrl
No description available.
.PARAMETER LogoUrl
No description available.
.PARAMETER SortOrder
No description available.
.OUTPUTS

AppLink<PSCustomObject>
#>

function Initialize-OktaAppLink {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppAssignmentId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppInstanceId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CredentialsSetup},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Hidden},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LinkUrl},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LogoUrl},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SortOrder}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaAppLink' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "appAssignmentId" = ${AppAssignmentId}
            "appInstanceId" = ${AppInstanceId}
            "appName" = ${AppName}
            "credentialsSetup" = ${CredentialsSetup}
            "hidden" = ${Hidden}
            "id" = ${Id}
            "label" = ${Label}
            "linkUrl" = ${LinkUrl}
            "logoUrl" = ${LogoUrl}
            "sortOrder" = ${SortOrder}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AppLink<PSCustomObject>

.DESCRIPTION

Convert from JSON to AppLink<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AppLink<PSCustomObject>
#>
function ConvertFrom-OktaJsonToAppLink {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaAppLink' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaAppLink
        $AllProperties = ("appAssignmentId", "appInstanceId", "appName", "credentialsSetup", "hidden", "id", "label", "linkUrl", "logoUrl", "sortOrder")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appAssignmentId"))) { #optional property not found
            $AppAssignmentId = $null
        } else {
            $AppAssignmentId = $JsonParameters.PSobject.Properties["appAssignmentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appInstanceId"))) { #optional property not found
            $AppInstanceId = $null
        } else {
            $AppInstanceId = $JsonParameters.PSobject.Properties["appInstanceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appName"))) { #optional property not found
            $AppName = $null
        } else {
            $AppName = $JsonParameters.PSobject.Properties["appName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "credentialsSetup"))) { #optional property not found
            $CredentialsSetup = $null
        } else {
            $CredentialsSetup = $JsonParameters.PSobject.Properties["credentialsSetup"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hidden"))) { #optional property not found
            $Hidden = $null
        } else {
            $Hidden = $JsonParameters.PSobject.Properties["hidden"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "linkUrl"))) { #optional property not found
            $LinkUrl = $null
        } else {
            $LinkUrl = $JsonParameters.PSobject.Properties["linkUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logoUrl"))) { #optional property not found
            $LogoUrl = $null
        } else {
            $LogoUrl = $JsonParameters.PSobject.Properties["logoUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sortOrder"))) { #optional property not found
            $SortOrder = $null
        } else {
            $SortOrder = $JsonParameters.PSobject.Properties["sortOrder"].value
        }

        $PSO = [PSCustomObject]@{
            "appAssignmentId" = ${AppAssignmentId}
            "appInstanceId" = ${AppInstanceId}
            "appName" = ${AppName}
            "credentialsSetup" = ${CredentialsSetup}
            "hidden" = ${Hidden}
            "id" = ${Id}
            "label" = ${Label}
            "linkUrl" = ${LinkUrl}
            "logoUrl" = ${LogoUrl}
            "sortOrder" = ${SortOrder}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AuthType
No description available.
.PARAMETER ClientId
No description available.
.PARAMETER Scope
No description available.
.PARAMETER TokenUrl
No description available.
.PARAMETER AuthScheme
No description available.
.PARAMETER Headers
No description available.
.PARAMETER Method
No description available.
.PARAMETER Uri
No description available.
.OUTPUTS

InlineHookOAuthBasicConfig<PSCustomObject>
#>

function Initialize-OktaInlineHookOAuthBasicConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuthType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Scope},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TokenUrl},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AuthScheme},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Headers},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Method},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Uri}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaInlineHookOAuthBasicConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "authType" = ${AuthType}
            "clientId" = ${ClientId}
            "scope" = ${Scope}
            "tokenUrl" = ${TokenUrl}
            "authScheme" = ${AuthScheme}
            "headers" = ${Headers}
            "method" = ${Method}
            "uri" = ${Uri}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to InlineHookOAuthBasicConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to InlineHookOAuthBasicConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

InlineHookOAuthBasicConfig<PSCustomObject>
#>
function ConvertFrom-OktaJsonToInlineHookOAuthBasicConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaInlineHookOAuthBasicConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaInlineHookOAuthBasicConfig
        $AllProperties = ("authType", "clientId", "scope", "tokenUrl", "authScheme", "headers", "method", "uri")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authType"))) { #optional property not found
            $AuthType = $null
        } else {
            $AuthType = $JsonParameters.PSobject.Properties["authType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clientId"))) { #optional property not found
            $ClientId = $null
        } else {
            $ClientId = $JsonParameters.PSobject.Properties["clientId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tokenUrl"))) { #optional property not found
            $TokenUrl = $null
        } else {
            $TokenUrl = $JsonParameters.PSobject.Properties["tokenUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authScheme"))) { #optional property not found
            $AuthScheme = $null
        } else {
            $AuthScheme = $JsonParameters.PSobject.Properties["authScheme"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "headers"))) { #optional property not found
            $Headers = $null
        } else {
            $Headers = $JsonParameters.PSobject.Properties["headers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "method"))) { #optional property not found
            $Method = $null
        } else {
            $Method = $JsonParameters.PSobject.Properties["method"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uri"))) { #optional property not found
            $Uri = $null
        } else {
            $Uri = $JsonParameters.PSobject.Properties["uri"].value
        }

        $PSO = [PSCustomObject]@{
            "authType" = ${AuthType}
            "clientId" = ${ClientId}
            "scope" = ${Scope}
            "tokenUrl" = ${TokenUrl}
            "authScheme" = ${AuthScheme}
            "headers" = ${Headers}
            "method" = ${Method}
            "uri" = ${Uri}
        }

        return $PSO
    }

}


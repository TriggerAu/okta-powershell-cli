#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Algorithms
No description available.
.PARAMETER Credentials
No description available.
.PARAMETER Endpoints
No description available.
.PARAMETER Issuer
No description available.
.PARAMETER RelayState
No description available.
.PARAMETER Scopes
No description available.
.PARAMETER Settings
No description available.
.PARAMETER Type
No description available.
.OUTPUTS

Protocol<PSCustomObject>
#>

function Initialize-OktaProtocol {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Algorithms},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Credentials},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Endpoints},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Issuer},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RelayState},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Scopes},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Settings},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("MTLS", "OAUTH2", "OIDC", "SAML2")]
        [PSCustomObject]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaProtocol' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "algorithms" = ${Algorithms}
            "credentials" = ${Credentials}
            "endpoints" = ${Endpoints}
            "issuer" = ${Issuer}
            "relayState" = ${RelayState}
            "scopes" = ${Scopes}
            "settings" = ${Settings}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Protocol<PSCustomObject>

.DESCRIPTION

Convert from JSON to Protocol<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Protocol<PSCustomObject>
#>
function ConvertFrom-OktaJsonToProtocol {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaProtocol' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaProtocol
        $AllProperties = ("algorithms", "credentials", "endpoints", "issuer", "relayState", "scopes", "settings", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "algorithms"))) { #optional property not found
            $Algorithms = $null
        } else {
            $Algorithms = $JsonParameters.PSobject.Properties["algorithms"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "credentials"))) { #optional property not found
            $Credentials = $null
        } else {
            $Credentials = $JsonParameters.PSobject.Properties["credentials"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endpoints"))) { #optional property not found
            $Endpoints = $null
        } else {
            $Endpoints = $JsonParameters.PSobject.Properties["endpoints"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuer"))) { #optional property not found
            $Issuer = $null
        } else {
            $Issuer = $JsonParameters.PSobject.Properties["issuer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "relayState"))) { #optional property not found
            $RelayState = $null
        } else {
            $RelayState = $JsonParameters.PSobject.Properties["relayState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scopes"))) { #optional property not found
            $Scopes = $null
        } else {
            $Scopes = $JsonParameters.PSobject.Properties["scopes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "settings"))) { #optional property not found
            $Settings = $null
        } else {
            $Settings = $JsonParameters.PSobject.Properties["settings"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "algorithms" = ${Algorithms}
            "credentials" = ${Credentials}
            "endpoints" = ${Endpoints}
            "issuer" = ${Issuer}
            "relayState" = ${RelayState}
            "scopes" = ${Scopes}
            "settings" = ${Settings}
            "type" = ${Type}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BrandId
No description available.
.PARAMETER CertificateSourceType
No description available.
.PARAMETER DnsRecords
No description available.
.PARAMETER Domain
No description available.
.PARAMETER Id
No description available.
.PARAMETER PublicCertificate
No description available.
.PARAMETER ValidationStatus
No description available.
.OUTPUTS

Domain<PSCustomObject>
#>

function Initialize-OktaDomain {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BrandId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("MANUAL", "OKTA_MANAGED")]
        [PSCustomObject]
        ${CertificateSourceType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${DnsRecords},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PublicCertificate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("COMPLETED", "IN_PROGRESS", "NOT_STARTED", "VERIFIED")]
        [PSCustomObject]
        ${ValidationStatus}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaDomain' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "brandId" = ${BrandId}
            "certificateSourceType" = ${CertificateSourceType}
            "dnsRecords" = ${DnsRecords}
            "domain" = ${Domain}
            "id" = ${Id}
            "publicCertificate" = ${PublicCertificate}
            "validationStatus" = ${ValidationStatus}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Domain<PSCustomObject>

.DESCRIPTION

Convert from JSON to Domain<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Domain<PSCustomObject>
#>
function ConvertFrom-OktaJsonToDomain {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaDomain' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaDomain
        $AllProperties = ("brandId", "certificateSourceType", "dnsRecords", "domain", "id", "publicCertificate", "validationStatus")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "brandId"))) { #optional property not found
            $BrandId = $null
        } else {
            $BrandId = $JsonParameters.PSobject.Properties["brandId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "certificateSourceType"))) { #optional property not found
            $CertificateSourceType = $null
        } else {
            $CertificateSourceType = $JsonParameters.PSobject.Properties["certificateSourceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsRecords"))) { #optional property not found
            $DnsRecords = $null
        } else {
            $DnsRecords = $JsonParameters.PSobject.Properties["dnsRecords"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "publicCertificate"))) { #optional property not found
            $PublicCertificate = $null
        } else {
            $PublicCertificate = $JsonParameters.PSobject.Properties["publicCertificate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validationStatus"))) { #optional property not found
            $ValidationStatus = $null
        } else {
            $ValidationStatus = $JsonParameters.PSobject.Properties["validationStatus"].value
        }

        $PSO = [PSCustomObject]@{
            "brandId" = ${BrandId}
            "certificateSourceType" = ${CertificateSourceType}
            "dnsRecords" = ${DnsRecords}
            "domain" = ${Domain}
            "id" = ${Id}
            "publicCertificate" = ${PublicCertificate}
            "validationStatus" = ${ValidationStatus}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER OktaCall
No description available.
.PARAMETER OktaEmail
No description available.
.PARAMETER OktaSms
No description available.
.PARAMETER RecoveryQuestion
No description available.
.OUTPUTS

PasswordPolicyRecoveryFactors<PSCustomObject>
#>

function Initialize-OktaPasswordPolicyRecoveryFactors {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OktaCall},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OktaEmail},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OktaSms},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RecoveryQuestion}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaPasswordPolicyRecoveryFactors' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "okta_call" = ${OktaCall}
            "okta_email" = ${OktaEmail}
            "okta_sms" = ${OktaSms}
            "recovery_question" = ${RecoveryQuestion}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PasswordPolicyRecoveryFactors<PSCustomObject>

.DESCRIPTION

Convert from JSON to PasswordPolicyRecoveryFactors<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PasswordPolicyRecoveryFactors<PSCustomObject>
#>
function ConvertFrom-OktaJsonToPasswordPolicyRecoveryFactors {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaPasswordPolicyRecoveryFactors' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaPasswordPolicyRecoveryFactors
        $AllProperties = ("okta_call", "okta_email", "okta_sms", "recovery_question")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "okta_call"))) { #optional property not found
            $OktaCall = $null
        } else {
            $OktaCall = $JsonParameters.PSobject.Properties["okta_call"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "okta_email"))) { #optional property not found
            $OktaEmail = $null
        } else {
            $OktaEmail = $JsonParameters.PSobject.Properties["okta_email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "okta_sms"))) { #optional property not found
            $OktaSms = $null
        } else {
            $OktaSms = $JsonParameters.PSobject.Properties["okta_sms"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recovery_question"))) { #optional property not found
            $RecoveryQuestion = $null
        } else {
            $RecoveryQuestion = $JsonParameters.PSobject.Properties["recovery_question"].value
        }

        $PSO = [PSCustomObject]@{
            "okta_call" = ${OktaCall}
            "okta_email" = ${OktaEmail}
            "okta_sms" = ${OktaSms}
            "recovery_question" = ${RecoveryQuestion}
        }

        return $PSO
    }

}


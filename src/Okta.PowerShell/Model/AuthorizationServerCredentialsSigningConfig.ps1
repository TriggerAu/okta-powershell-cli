#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Kid
No description available.
.PARAMETER LastRotated
No description available.
.PARAMETER NextRotation
No description available.
.PARAMETER RotationMode
No description available.
.PARAMETER Use
No description available.
.OUTPUTS

AuthorizationServerCredentialsSigningConfig<PSCustomObject>
#>

function Initialize-OktaAuthorizationServerCredentialsSigningConfig {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Kid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastRotated},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${NextRotation},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("AUTO", "MANUAL")]
        [PSCustomObject]
        ${RotationMode},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("sig")]
        [PSCustomObject]
        ${Use}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaAuthorizationServerCredentialsSigningConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "kid" = ${Kid}
            "lastRotated" = ${LastRotated}
            "nextRotation" = ${NextRotation}
            "rotationMode" = ${RotationMode}
            "use" = ${Use}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AuthorizationServerCredentialsSigningConfig<PSCustomObject>

.DESCRIPTION

Convert from JSON to AuthorizationServerCredentialsSigningConfig<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AuthorizationServerCredentialsSigningConfig<PSCustomObject>
#>
function ConvertFrom-OktaJsonToAuthorizationServerCredentialsSigningConfig {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaAuthorizationServerCredentialsSigningConfig' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaAuthorizationServerCredentialsSigningConfig
        $AllProperties = ("kid", "lastRotated", "nextRotation", "rotationMode", "use")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "kid"))) { #optional property not found
            $Kid = $null
        } else {
            $Kid = $JsonParameters.PSobject.Properties["kid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastRotated"))) { #optional property not found
            $LastRotated = $null
        } else {
            $LastRotated = $JsonParameters.PSobject.Properties["lastRotated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nextRotation"))) { #optional property not found
            $NextRotation = $null
        } else {
            $NextRotation = $JsonParameters.PSobject.Properties["nextRotation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rotationMode"))) { #optional property not found
            $RotationMode = $null
        } else {
            $RotationMode = $JsonParameters.PSobject.Properties["rotationMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "use"))) { #optional property not found
            $Use = $null
        } else {
            $Use = $JsonParameters.PSobject.Properties["use"].value
        }

        $PSO = [PSCustomObject]@{
            "kid" = ${Kid}
            "lastRotated" = ${LastRotated}
            "nextRotation" = ${NextRotation}
            "rotationMode" = ${RotationMode}
            "use" = ${Use}
        }

        return $PSO
    }

}


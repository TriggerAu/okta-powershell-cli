#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Brand
No description available.
.PARAMETER Certificate
No description available.
.PARAMETER Self
No description available.
.PARAMETER Verify
No description available.
.OUTPUTS

DomainLinks<PSCustomObject>
#>

function Initialize-OktaDomainLinks {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Brand},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Certificate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Self},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Verify}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaDomainLinks' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "brand" = ${Brand}
            "certificate" = ${Certificate}
            "self" = ${Self}
            "verify" = ${Verify}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DomainLinks<PSCustomObject>

.DESCRIPTION

Convert from JSON to DomainLinks<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DomainLinks<PSCustomObject>
#>
function ConvertFrom-OktaJsonToDomainLinks {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaDomainLinks' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaDomainLinks
        $AllProperties = ("brand", "certificate", "self", "verify")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "brand"))) { #optional property not found
            $Brand = $null
        } else {
            $Brand = $JsonParameters.PSobject.Properties["brand"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "certificate"))) { #optional property not found
            $Certificate = $null
        } else {
            $Certificate = $JsonParameters.PSobject.Properties["certificate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "verify"))) { #optional property not found
            $Verify = $null
        } else {
            $Verify = $JsonParameters.PSobject.Properties["verify"].value
        }

        $PSO = [PSCustomObject]@{
            "brand" = ${Brand}
            "certificate" = ${Certificate}
            "self" = ${Self}
            "verify" = ${Verify}
        }

        return $PSO
    }

}


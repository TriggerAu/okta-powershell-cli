#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Acs
No description available.
.PARAMETER Authorization
No description available.
.PARAMETER Jwks
No description available.
.PARAMETER Metadata
No description available.
.PARAMETER Slo
No description available.
.PARAMETER Sso
No description available.
.PARAMETER Token
No description available.
.PARAMETER UserInfo
No description available.
.OUTPUTS

ProtocolEndpoints<PSCustomObject>
#>

function Initialize-OktaProtocolEndpoints {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Acs},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Authorization},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Jwks},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Metadata},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Slo},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Sso},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Token},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserInfo}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaProtocolEndpoints' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "acs" = ${Acs}
            "authorization" = ${Authorization}
            "jwks" = ${Jwks}
            "metadata" = ${Metadata}
            "slo" = ${Slo}
            "sso" = ${Sso}
            "token" = ${Token}
            "userInfo" = ${UserInfo}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProtocolEndpoints<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProtocolEndpoints<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProtocolEndpoints<PSCustomObject>
#>
function ConvertFrom-OktaJsonToProtocolEndpoints {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaProtocolEndpoints' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaProtocolEndpoints
        $AllProperties = ("acs", "authorization", "jwks", "metadata", "slo", "sso", "token", "userInfo")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "acs"))) { #optional property not found
            $Acs = $null
        } else {
            $Acs = $JsonParameters.PSobject.Properties["acs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authorization"))) { #optional property not found
            $Authorization = $null
        } else {
            $Authorization = $JsonParameters.PSobject.Properties["authorization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jwks"))) { #optional property not found
            $Jwks = $null
        } else {
            $Jwks = $JsonParameters.PSobject.Properties["jwks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slo"))) { #optional property not found
            $Slo = $null
        } else {
            $Slo = $JsonParameters.PSobject.Properties["slo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sso"))) { #optional property not found
            $Sso = $null
        } else {
            $Sso = $JsonParameters.PSobject.Properties["sso"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token"))) { #optional property not found
            $Token = $null
        } else {
            $Token = $JsonParameters.PSobject.Properties["token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userInfo"))) { #optional property not found
            $UserInfo = $null
        } else {
            $UserInfo = $JsonParameters.PSobject.Properties["userInfo"].value
        }

        $PSO = [PSCustomObject]@{
            "acs" = ${Acs}
            "authorization" = ${Authorization}
            "jwks" = ${Jwks}
            "metadata" = ${Metadata}
            "slo" = ${Slo}
            "sso" = ${Sso}
            "token" = ${Token}
            "userInfo" = ${UserInfo}
        }

        return $PSO
    }

}


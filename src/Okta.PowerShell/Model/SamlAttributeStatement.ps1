#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER FilterType
No description available.
.PARAMETER FilterValue
No description available.
.PARAMETER Name
No description available.
.PARAMETER Namespace
No description available.
.PARAMETER Type
No description available.
.PARAMETER Values
No description available.
.OUTPUTS

SamlAttributeStatement<PSCustomObject>
#>

function Initialize-OktaSamlAttributeStatement {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FilterType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FilterValue},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Namespace},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Values}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaSamlAttributeStatement' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "filterType" = ${FilterType}
            "filterValue" = ${FilterValue}
            "name" = ${Name}
            "namespace" = ${Namespace}
            "type" = ${Type}
            "values" = ${Values}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SamlAttributeStatement<PSCustomObject>

.DESCRIPTION

Convert from JSON to SamlAttributeStatement<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SamlAttributeStatement<PSCustomObject>
#>
function ConvertFrom-OktaJsonToSamlAttributeStatement {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaSamlAttributeStatement' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaSamlAttributeStatement
        $AllProperties = ("filterType", "filterValue", "name", "namespace", "type", "values")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filterType"))) { #optional property not found
            $FilterType = $null
        } else {
            $FilterType = $JsonParameters.PSobject.Properties["filterType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filterValue"))) { #optional property not found
            $FilterValue = $null
        } else {
            $FilterValue = $JsonParameters.PSobject.Properties["filterValue"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "namespace"))) { #optional property not found
            $Namespace = $null
        } else {
            $Namespace = $JsonParameters.PSobject.Properties["namespace"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "values"))) { #optional property not found
            $Values = $null
        } else {
            $Values = $JsonParameters.PSobject.Properties["values"].value
        }

        $PSO = [PSCustomObject]@{
            "filterType" = ${FilterType}
            "filterValue" = ${FilterValue}
            "name" = ${Name}
            "namespace" = ${Namespace}
            "type" = ${Type}
            "values" = ${Values}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Default
No description available.
.PARAMETER Customized
No description available.
.PARAMETER CustomizedUrl
No description available.
.PARAMETER Preview
No description available.
.PARAMETER PreviewUrl
No description available.
.OUTPUTS

PageRootEmbedded<PSCustomObject>
#>

function Initialize-OktaPageRootEmbedded {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Default},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Customized},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CustomizedUrl},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Preview},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PreviewUrl}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaPageRootEmbedded' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "default" = ${Default}
            "customized" = ${Customized}
            "customizedUrl" = ${CustomizedUrl}
            "preview" = ${Preview}
            "previewUrl" = ${PreviewUrl}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PageRootEmbedded<PSCustomObject>

.DESCRIPTION

Convert from JSON to PageRootEmbedded<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PageRootEmbedded<PSCustomObject>
#>
function ConvertFrom-OktaJsonToPageRootEmbedded {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaPageRootEmbedded' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaPageRootEmbedded
        $AllProperties = ("default", "customized", "customizedUrl", "preview", "previewUrl")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default"))) { #optional property not found
            $Default = $null
        } else {
            $Default = $JsonParameters.PSobject.Properties["default"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customized"))) { #optional property not found
            $Customized = $null
        } else {
            $Customized = $JsonParameters.PSobject.Properties["customized"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "customizedUrl"))) { #optional property not found
            $CustomizedUrl = $null
        } else {
            $CustomizedUrl = $JsonParameters.PSobject.Properties["customizedUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "preview"))) { #optional property not found
            $Preview = $null
        } else {
            $Preview = $JsonParameters.PSobject.Properties["preview"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "previewUrl"))) { #optional property not found
            $PreviewUrl = $null
        } else {
            $PreviewUrl = $JsonParameters.PSobject.Properties["previewUrl"].value
        }

        $PSO = [PSCustomObject]@{
            "default" = ${Default}
            "customized" = ${Customized}
            "customizedUrl" = ${CustomizedUrl}
            "preview" = ${Preview}
            "previewUrl" = ${PreviewUrl}
        }

        return $PSO
    }

}


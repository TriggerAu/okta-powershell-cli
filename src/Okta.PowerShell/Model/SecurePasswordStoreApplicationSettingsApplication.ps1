#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER OptionalField1
No description available.
.PARAMETER OptionalField1Value
No description available.
.PARAMETER OptionalField2
No description available.
.PARAMETER OptionalField2Value
No description available.
.PARAMETER OptionalField3
No description available.
.PARAMETER OptionalField3Value
No description available.
.PARAMETER PasswordField
No description available.
.PARAMETER Url
No description available.
.PARAMETER UsernameField
No description available.
.OUTPUTS

SecurePasswordStoreApplicationSettingsApplication<PSCustomObject>
#>

function Initialize-OktaSecurePasswordStoreApplicationSettingsApplication {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OptionalField1},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OptionalField1Value},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OptionalField2},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OptionalField2Value},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OptionalField3},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OptionalField3Value},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PasswordField},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UsernameField}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaSecurePasswordStoreApplicationSettingsApplication' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "optionalField1" = ${OptionalField1}
            "optionalField1Value" = ${OptionalField1Value}
            "optionalField2" = ${OptionalField2}
            "optionalField2Value" = ${OptionalField2Value}
            "optionalField3" = ${OptionalField3}
            "optionalField3Value" = ${OptionalField3Value}
            "passwordField" = ${PasswordField}
            "url" = ${Url}
            "usernameField" = ${UsernameField}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SecurePasswordStoreApplicationSettingsApplication<PSCustomObject>

.DESCRIPTION

Convert from JSON to SecurePasswordStoreApplicationSettingsApplication<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SecurePasswordStoreApplicationSettingsApplication<PSCustomObject>
#>
function ConvertFrom-OktaJsonToSecurePasswordStoreApplicationSettingsApplication {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaSecurePasswordStoreApplicationSettingsApplication' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaSecurePasswordStoreApplicationSettingsApplication
        $AllProperties = ("optionalField1", "optionalField1Value", "optionalField2", "optionalField2Value", "optionalField3", "optionalField3Value", "passwordField", "url", "usernameField")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optionalField1"))) { #optional property not found
            $OptionalField1 = $null
        } else {
            $OptionalField1 = $JsonParameters.PSobject.Properties["optionalField1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optionalField1Value"))) { #optional property not found
            $OptionalField1Value = $null
        } else {
            $OptionalField1Value = $JsonParameters.PSobject.Properties["optionalField1Value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optionalField2"))) { #optional property not found
            $OptionalField2 = $null
        } else {
            $OptionalField2 = $JsonParameters.PSobject.Properties["optionalField2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optionalField2Value"))) { #optional property not found
            $OptionalField2Value = $null
        } else {
            $OptionalField2Value = $JsonParameters.PSobject.Properties["optionalField2Value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optionalField3"))) { #optional property not found
            $OptionalField3 = $null
        } else {
            $OptionalField3 = $JsonParameters.PSobject.Properties["optionalField3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "optionalField3Value"))) { #optional property not found
            $OptionalField3Value = $null
        } else {
            $OptionalField3Value = $JsonParameters.PSobject.Properties["optionalField3Value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordField"))) { #optional property not found
            $PasswordField = $null
        } else {
            $PasswordField = $JsonParameters.PSobject.Properties["passwordField"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usernameField"))) { #optional property not found
            $UsernameField = $null
        } else {
            $UsernameField = $JsonParameters.PSobject.Properties["usernameField"].value
        }

        $PSO = [PSCustomObject]@{
            "optionalField1" = ${OptionalField1}
            "optionalField1Value" = ${OptionalField1Value}
            "optionalField2" = ${OptionalField2}
            "optionalField2Value" = ${OptionalField2Value}
            "optionalField3" = ${OptionalField3}
            "optionalField3Value" = ${OptionalField3Value}
            "passwordField" = ${PasswordField}
            "url" = ${Url}
            "usernameField" = ${UsernameField}
        }

        return $PSO
    }

}


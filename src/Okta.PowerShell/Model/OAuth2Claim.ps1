#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AlwaysIncludeInToken
No description available.
.PARAMETER ClaimType
No description available.
.PARAMETER Conditions
No description available.
.PARAMETER GroupFilterType
No description available.
.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Status
No description available.
.PARAMETER System
No description available.
.PARAMETER Value
No description available.
.PARAMETER ValueType
No description available.
.PARAMETER Links
No description available.
.OUTPUTS

OAuth2Claim<PSCustomObject>
#>

function Initialize-OktaOAuth2Claim {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AlwaysIncludeInToken},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("IDENTITY", "RESOURCE")]
        [PSCustomObject]
        ${ClaimType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Conditions},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("CONTAINS", "EQUALS", "REGEX", "STARTS_WITH")]
        [PSCustomObject]
        ${GroupFilterType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ACTIVE", "INACTIVE")]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${System},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("EXPRESSION", "GROUPS", "SYSTEM")]
        [PSCustomObject]
        ${ValueType},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Links}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaOAuth2Claim' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "alwaysIncludeInToken" = ${AlwaysIncludeInToken}
            "claimType" = ${ClaimType}
            "conditions" = ${Conditions}
            "group_filter_type" = ${GroupFilterType}
            "id" = ${Id}
            "name" = ${Name}
            "status" = ${Status}
            "system" = ${System}
            "value" = ${Value}
            "valueType" = ${ValueType}
            "_links" = ${Links}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OAuth2Claim<PSCustomObject>

.DESCRIPTION

Convert from JSON to OAuth2Claim<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OAuth2Claim<PSCustomObject>
#>
function ConvertFrom-OktaJsonToOAuth2Claim {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaOAuth2Claim' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaOAuth2Claim
        $AllProperties = ("alwaysIncludeInToken", "claimType", "conditions", "group_filter_type", "id", "name", "status", "system", "value", "valueType", "_links")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "alwaysIncludeInToken"))) { #optional property not found
            $AlwaysIncludeInToken = $null
        } else {
            $AlwaysIncludeInToken = $JsonParameters.PSobject.Properties["alwaysIncludeInToken"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "claimType"))) { #optional property not found
            $ClaimType = $null
        } else {
            $ClaimType = $JsonParameters.PSobject.Properties["claimType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "conditions"))) { #optional property not found
            $Conditions = $null
        } else {
            $Conditions = $JsonParameters.PSobject.Properties["conditions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group_filter_type"))) { #optional property not found
            $GroupFilterType = $null
        } else {
            $GroupFilterType = $JsonParameters.PSobject.Properties["group_filter_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "system"))) { #optional property not found
            $System = $null
        } else {
            $System = $JsonParameters.PSobject.Properties["system"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "valueType"))) { #optional property not found
            $ValueType = $null
        } else {
            $ValueType = $JsonParameters.PSobject.Properties["valueType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_links"))) { #optional property not found
            $Links = $null
        } else {
            $Links = $JsonParameters.PSobject.Properties["_links"].value
        }

        $PSO = [PSCustomObject]@{
            "alwaysIncludeInToken" = ${AlwaysIncludeInToken}
            "claimType" = ${ClaimType}
            "conditions" = ${Conditions}
            "group_filter_type" = ${GroupFilterType}
            "id" = ${Id}
            "name" = ${Name}
            "status" = ${Status}
            "system" = ${System}
            "value" = ${Value}
            "valueType" = ${ValueType}
            "_links" = ${Links}
        }

        return $PSO
    }

}


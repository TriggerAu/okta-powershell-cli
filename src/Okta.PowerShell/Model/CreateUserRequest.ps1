#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Credentials
No description available.
.PARAMETER GroupIds
No description available.
.PARAMETER VarProfile
No description available.
.PARAMETER Type
No description available.
.OUTPUTS

CreateUserRequest<PSCustomObject>
#>

function Initialize-OktaCreateUserRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Credentials},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${GroupIds},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarProfile},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaCreateUserRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $VarProfile) {
            throw "invalid value for 'VarProfile', 'VarProfile' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "credentials" = ${Credentials}
            "groupIds" = ${GroupIds}
            "profile" = ${VarProfile}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CreateUserRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CreateUserRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CreateUserRequest<PSCustomObject>
#>
function ConvertFrom-OktaJsonToCreateUserRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaCreateUserRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaCreateUserRequest
        $AllProperties = ("credentials", "groupIds", "profile", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'profile' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "profile"))) {
            throw "Error! JSON cannot be serialized due to the required property 'profile' missing."
        } else {
            $VarProfile = $JsonParameters.PSobject.Properties["profile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "credentials"))) { #optional property not found
            $Credentials = $null
        } else {
            $Credentials = $JsonParameters.PSobject.Properties["credentials"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupIds"))) { #optional property not found
            $GroupIds = $null
        } else {
            $GroupIds = $JsonParameters.PSobject.Properties["groupIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "credentials" = ${Credentials}
            "groupIds" = ${GroupIds}
            "profile" = ${VarProfile}
            "type" = ${Type}
        }

        return $PSO
    }

}


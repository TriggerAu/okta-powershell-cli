#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AuthScheme
No description available.
.PARAMETER Status
No description available.
.PARAMETER Links
No description available.
.OUTPUTS

ProvisioningConnection<PSCustomObject>
#>

function Initialize-OktaProvisioningConnection {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("TOKEN", "UNKNOWN")]
        [PSCustomObject]
        ${AuthScheme},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("DISABLED", "ENABLED", "UNKNOWN")]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Links}
    )

    Process {
        'Creating PSCustomObject: Okta.PowerShell => OktaProvisioningConnection' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "authScheme" = ${AuthScheme}
            "status" = ${Status}
            "_links" = ${Links}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProvisioningConnection<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProvisioningConnection<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProvisioningConnection<PSCustomObject>
#>
function ConvertFrom-OktaJsonToProvisioningConnection {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: Okta.PowerShell => OktaProvisioningConnection' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaProvisioningConnection
        $AllProperties = ("authScheme", "status", "_links")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authScheme"))) { #optional property not found
            $AuthScheme = $null
        } else {
            $AuthScheme = $JsonParameters.PSobject.Properties["authScheme"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_links"))) { #optional property not found
            $Links = $null
        } else {
            $Links = $JsonParameters.PSobject.Properties["_links"].value
        }

        $PSO = [PSCustomObject]@{
            "authScheme" = ${AuthScheme}
            "status" = ${Status}
            "_links" = ${Links}
        }

        return $PSO
    }

}


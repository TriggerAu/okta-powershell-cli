#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
Timestamp when the device was created
.PARAMETER Id
Unique key for the device
.PARAMETER LastUpdated
Timestamp when the device was last updated
.PARAMETER VarProfile
No description available.
.PARAMETER ResourceAlternateId
No description available.
.PARAMETER ResourceDisplayName
No description available.
.PARAMETER ResourceId
Alternate key for the `id`
.PARAMETER ResourceType
No description available.
.PARAMETER Status
No description available.
.PARAMETER Links
No description available.
.OUTPUTS

Device<PSCustomObject>
#>

function Initialize-Device {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarProfile},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceAlternateId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ResourceDisplayName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResourceType} = "UDDevice",
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Links}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Device' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "created" = ${Created}
            "id" = ${Id}
            "lastUpdated" = ${LastUpdated}
            "profile" = ${VarProfile}
            "resourceAlternateId" = ${ResourceAlternateId}
            "resourceDisplayName" = ${ResourceDisplayName}
            "resourceId" = ${ResourceId}
            "resourceType" = ${ResourceType}
            "status" = ${Status}
            "_links" = ${Links}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Device<PSCustomObject>

.DESCRIPTION

Convert from JSON to Device<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Device<PSCustomObject>
#>
function ConvertFrom-JsonToDevice {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Device' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Device
        $AllProperties = ("created", "id", "lastUpdated", "profile", "resourceAlternateId", "resourceDisplayName", "resourceId", "resourceType", "status", "_links")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "profile"))) { #optional property not found
            $VarProfile = $null
        } else {
            $VarProfile = $JsonParameters.PSobject.Properties["profile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceAlternateId"))) { #optional property not found
            $ResourceAlternateId = $null
        } else {
            $ResourceAlternateId = $JsonParameters.PSobject.Properties["resourceAlternateId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceDisplayName"))) { #optional property not found
            $ResourceDisplayName = $null
        } else {
            $ResourceDisplayName = $JsonParameters.PSobject.Properties["resourceDisplayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceId"))) { #optional property not found
            $ResourceId = $null
        } else {
            $ResourceId = $JsonParameters.PSobject.Properties["resourceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resourceType"))) { #optional property not found
            $ResourceType = $null
        } else {
            $ResourceType = $JsonParameters.PSobject.Properties["resourceType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_links"))) { #optional property not found
            $Links = $null
        } else {
            $Links = $JsonParameters.PSobject.Properties["_links"].value
        }

        $PSO = [PSCustomObject]@{
            "created" = ${Created}
            "id" = ${Id}
            "lastUpdated" = ${LastUpdated}
            "profile" = ${VarProfile}
            "resourceAlternateId" = ${ResourceAlternateId}
            "resourceDisplayName" = ${ResourceDisplayName}
            "resourceId" = ${ResourceId}
            "resourceType" = ${ResourceType}
            "status" = ${Status}
            "_links" = ${Links}
        }

        return $PSO
    }

}


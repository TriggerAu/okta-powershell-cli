#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER IdentityStoreId
No description available.
.PARAMETER ImplicitAssignment
No description available.
.PARAMETER InlineHookId
No description available.
.PARAMETER Notes
No description available.
.PARAMETER Notifications
No description available.
.PARAMETER App
No description available.
.PARAMETER SignOn
No description available.
.OUTPUTS

SamlApplicationSettings<PSCustomObject>
#>

function Initialize-SamlApplicationSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IdentityStoreId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ImplicitAssignment},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InlineHookId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Notes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Notifications},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${App},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SignOn}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SamlApplicationSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "identityStoreId" = ${IdentityStoreId}
            "implicitAssignment" = ${ImplicitAssignment}
            "inlineHookId" = ${InlineHookId}
            "notes" = ${Notes}
            "notifications" = ${Notifications}
            "app" = ${App}
            "signOn" = ${SignOn}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SamlApplicationSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to SamlApplicationSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SamlApplicationSettings<PSCustomObject>
#>
function ConvertFrom-JsonToSamlApplicationSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SamlApplicationSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SamlApplicationSettings
        $AllProperties = ("identityStoreId", "implicitAssignment", "inlineHookId", "notes", "notifications", "app", "signOn")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identityStoreId"))) { #optional property not found
            $IdentityStoreId = $null
        } else {
            $IdentityStoreId = $JsonParameters.PSobject.Properties["identityStoreId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "implicitAssignment"))) { #optional property not found
            $ImplicitAssignment = $null
        } else {
            $ImplicitAssignment = $JsonParameters.PSobject.Properties["implicitAssignment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inlineHookId"))) { #optional property not found
            $InlineHookId = $null
        } else {
            $InlineHookId = $JsonParameters.PSobject.Properties["inlineHookId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notes"))) { #optional property not found
            $Notes = $null
        } else {
            $Notes = $JsonParameters.PSobject.Properties["notes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notifications"))) { #optional property not found
            $Notifications = $null
        } else {
            $Notifications = $JsonParameters.PSobject.Properties["notifications"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app"))) { #optional property not found
            $App = $null
        } else {
            $App = $JsonParameters.PSobject.Properties["app"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "signOn"))) { #optional property not found
            $SignOn = $null
        } else {
            $SignOn = $JsonParameters.PSobject.Properties["signOn"].value
        }

        $PSO = [PSCustomObject]@{
            "identityStoreId" = ${IdentityStoreId}
            "implicitAssignment" = ${ImplicitAssignment}
            "inlineHookId" = ${InlineHookId}
            "notes" = ${Notes}
            "notifications" = ${Notifications}
            "app" = ${App}
            "signOn" = ${SignOn}
        }

        return $PSO
    }

}


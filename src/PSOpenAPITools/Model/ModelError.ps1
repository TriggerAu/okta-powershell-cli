#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ErrorCauses
No description available.
.PARAMETER ErrorCode
An Okta code for this type of error
.PARAMETER ErrorId
A unique identifier for this error. This can be used by Okta Support to help with troubleshooting.
.PARAMETER ErrorLink
An Okta code for this type of error
.PARAMETER ErrorSummary
A short description of what caused this error. Sometimes this contains dynamically-generated information about your specific error.
.OUTPUTS

ModelError<PSCustomObject>
#>

function Initialize-ModelError {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ErrorCauses},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ErrorCode},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ErrorId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ErrorLink},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ErrorSummary}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ModelError' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "errorCauses" = ${ErrorCauses}
            "errorCode" = ${ErrorCode}
            "errorId" = ${ErrorId}
            "errorLink" = ${ErrorLink}
            "errorSummary" = ${ErrorSummary}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ModelError<PSCustomObject>

.DESCRIPTION

Convert from JSON to ModelError<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ModelError<PSCustomObject>
#>
function ConvertFrom-JsonToModelError {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ModelError' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ModelError
        $AllProperties = ("errorCauses", "errorCode", "errorId", "errorLink", "errorSummary")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorCauses"))) { #optional property not found
            $ErrorCauses = $null
        } else {
            $ErrorCauses = $JsonParameters.PSobject.Properties["errorCauses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorCode"))) { #optional property not found
            $ErrorCode = $null
        } else {
            $ErrorCode = $JsonParameters.PSobject.Properties["errorCode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorId"))) { #optional property not found
            $ErrorId = $null
        } else {
            $ErrorId = $JsonParameters.PSobject.Properties["errorId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorLink"))) { #optional property not found
            $ErrorLink = $null
        } else {
            $ErrorLink = $JsonParameters.PSobject.Properties["errorLink"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorSummary"))) { #optional property not found
            $ErrorSummary = $null
        } else {
            $ErrorSummary = $JsonParameters.PSobject.Properties["errorSummary"].value
        }

        $PSO = [PSCustomObject]@{
            "errorCauses" = ${ErrorCauses}
            "errorCode" = ${ErrorCode}
            "errorId" = ${ErrorId}
            "errorLink" = ${ErrorLink}
            "errorSummary" = ${ErrorSummary}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION



.PARAMETER CreatedBy
No description available.
.PARAMETER CreatedDate
No description available.
.PARAMETER DefaultConcurrencyPercentage
No description available.
.PARAMETER DefaultPercentage
No description available.
.PARAMETER Id
No description available.
.PARAMETER LastUpdate
No description available.
.PARAMETER LastUpdatedBy
No description available.
.PARAMETER OrgId
No description available.
.PARAMETER PrincipalId
No description available.
.PARAMETER PrincipalType
No description available.
.OUTPUTS

PrincipalRateLimitEntity<PSCustomObject>
#>

function Initialize-PrincipalRateLimitEntity {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatedBy},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreatedDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DefaultConcurrencyPercentage},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DefaultPercentage},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastUpdatedBy},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OrgId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrincipalId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PrincipalType}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PrincipalRateLimitEntity' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $PrincipalId) {
            throw "invalid value for 'PrincipalId', 'PrincipalId' cannot be null."
        }

        if ($null -eq $PrincipalType) {
            throw "invalid value for 'PrincipalType', 'PrincipalType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "createdBy" = ${CreatedBy}
            "createdDate" = ${CreatedDate}
            "defaultConcurrencyPercentage" = ${DefaultConcurrencyPercentage}
            "defaultPercentage" = ${DefaultPercentage}
            "id" = ${Id}
            "lastUpdate" = ${LastUpdate}
            "lastUpdatedBy" = ${LastUpdatedBy}
            "orgId" = ${OrgId}
            "principalId" = ${PrincipalId}
            "principalType" = ${PrincipalType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PrincipalRateLimitEntity<PSCustomObject>

.DESCRIPTION

Convert from JSON to PrincipalRateLimitEntity<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PrincipalRateLimitEntity<PSCustomObject>
#>
function ConvertFrom-JsonToPrincipalRateLimitEntity {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PrincipalRateLimitEntity' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PrincipalRateLimitEntity
        $AllProperties = ("createdBy", "createdDate", "defaultConcurrencyPercentage", "defaultPercentage", "id", "lastUpdate", "lastUpdatedBy", "orgId", "principalId", "principalType")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'principalId' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "principalId"))) {
            throw "Error! JSON cannot be serialized due to the required property 'principalId' missing."
        } else {
            $PrincipalId = $JsonParameters.PSobject.Properties["principalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "principalType"))) {
            throw "Error! JSON cannot be serialized due to the required property 'principalType' missing."
        } else {
            $PrincipalType = $JsonParameters.PSobject.Properties["principalType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdBy"))) { #optional property not found
            $CreatedBy = $null
        } else {
            $CreatedBy = $JsonParameters.PSobject.Properties["createdBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdDate"))) { #optional property not found
            $CreatedDate = $null
        } else {
            $CreatedDate = $JsonParameters.PSobject.Properties["createdDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultConcurrencyPercentage"))) { #optional property not found
            $DefaultConcurrencyPercentage = $null
        } else {
            $DefaultConcurrencyPercentage = $JsonParameters.PSobject.Properties["defaultConcurrencyPercentage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultPercentage"))) { #optional property not found
            $DefaultPercentage = $null
        } else {
            $DefaultPercentage = $JsonParameters.PSobject.Properties["defaultPercentage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdate"))) { #optional property not found
            $LastUpdate = $null
        } else {
            $LastUpdate = $JsonParameters.PSobject.Properties["lastUpdate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdatedBy"))) { #optional property not found
            $LastUpdatedBy = $null
        } else {
            $LastUpdatedBy = $JsonParameters.PSobject.Properties["lastUpdatedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "orgId"))) { #optional property not found
            $OrgId = $null
        } else {
            $OrgId = $JsonParameters.PSobject.Properties["orgId"].value
        }

        $PSO = [PSCustomObject]@{
            "createdBy" = ${CreatedBy}
            "createdDate" = ${CreatedDate}
            "defaultConcurrencyPercentage" = ${DefaultConcurrencyPercentage}
            "defaultPercentage" = ${DefaultPercentage}
            "id" = ${Id}
            "lastUpdate" = ${LastUpdate}
            "lastUpdatedBy" = ${LastUpdatedBy}
            "orgId" = ${OrgId}
            "principalId" = ${PrincipalId}
            "principalType" = ${PrincipalType}
        }

        return $PSO
    }

}


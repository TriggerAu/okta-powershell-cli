#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AccountLink
No description available.
.PARAMETER Conditions
No description available.
.PARAMETER MaxClockSkew
No description available.
.PARAMETER Provisioning
No description available.
.PARAMETER Subject
No description available.
.OUTPUTS

IdentityProviderPolicyAllOf<PSCustomObject>
#>

function Initialize-IdentityProviderPolicyAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AccountLink},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Conditions},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxClockSkew},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Provisioning},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Subject}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => IdentityProviderPolicyAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "accountLink" = ${AccountLink}
            "conditions" = ${Conditions}
            "maxClockSkew" = ${MaxClockSkew}
            "provisioning" = ${Provisioning}
            "subject" = ${Subject}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IdentityProviderPolicyAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to IdentityProviderPolicyAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IdentityProviderPolicyAllOf<PSCustomObject>
#>
function ConvertFrom-JsonToIdentityProviderPolicyAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => IdentityProviderPolicyAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IdentityProviderPolicyAllOf
        $AllProperties = ("accountLink", "conditions", "maxClockSkew", "provisioning", "subject")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountLink"))) { #optional property not found
            $AccountLink = $null
        } else {
            $AccountLink = $JsonParameters.PSobject.Properties["accountLink"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "conditions"))) { #optional property not found
            $Conditions = $null
        } else {
            $Conditions = $JsonParameters.PSobject.Properties["conditions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maxClockSkew"))) { #optional property not found
            $MaxClockSkew = $null
        } else {
            $MaxClockSkew = $JsonParameters.PSobject.Properties["maxClockSkew"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provisioning"))) { #optional property not found
            $Provisioning = $null
        } else {
            $Provisioning = $JsonParameters.PSobject.Properties["provisioning"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) { #optional property not found
            $Subject = $null
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        $PSO = [PSCustomObject]@{
            "accountLink" = ${AccountLink}
            "conditions" = ${Conditions}
            "maxClockSkew" = ${MaxClockSkew}
            "provisioning" = ${Provisioning}
            "subject" = ${Subject}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ErrorRedirectUrl
No description available.
.PARAMETER LoginRedirectUrl
No description available.
.PARAMETER SelfService
No description available.
.OUTPUTS

ApplicationAccessibility<PSCustomObject>
#>

function Initialize-ApplicationAccessibility {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ErrorRedirectUrl},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LoginRedirectUrl},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SelfService}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApplicationAccessibility' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "errorRedirectUrl" = ${ErrorRedirectUrl}
            "loginRedirectUrl" = ${LoginRedirectUrl}
            "selfService" = ${SelfService}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApplicationAccessibility<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApplicationAccessibility<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApplicationAccessibility<PSCustomObject>
#>
function ConvertFrom-JsonToApplicationAccessibility {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApplicationAccessibility' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApplicationAccessibility
        $AllProperties = ("errorRedirectUrl", "loginRedirectUrl", "selfService")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorRedirectUrl"))) { #optional property not found
            $ErrorRedirectUrl = $null
        } else {
            $ErrorRedirectUrl = $JsonParameters.PSobject.Properties["errorRedirectUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loginRedirectUrl"))) { #optional property not found
            $LoginRedirectUrl = $null
        } else {
            $LoginRedirectUrl = $JsonParameters.PSobject.Properties["loginRedirectUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "selfService"))) { #optional property not found
            $SelfService = $null
        } else {
            $SelfService = $JsonParameters.PSobject.Properties["selfService"].value
        }

        $PSO = [PSCustomObject]@{
            "errorRedirectUrl" = ${ErrorRedirectUrl}
            "loginRedirectUrl" = ${LoginRedirectUrl}
            "selfService" = ${SelfService}
        }

        return $PSO
    }

}


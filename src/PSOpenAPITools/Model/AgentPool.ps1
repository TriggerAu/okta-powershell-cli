#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

An AgentPool is a collection of agents that serve a common purpose. An AgentPool has a unique ID within an org, and contains a collection of agents disjoint to every other AgentPool (i.e. no two AgentPools share an Agent).

.PARAMETER Agents
No description available.
.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER OperationalStatus
No description available.
.PARAMETER Type
No description available.
.OUTPUTS

AgentPool<PSCustomObject>
#>

function Initialize-AgentPool {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Agents},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OperationalStatus},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AgentPool' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "agents" = ${Agents}
            "id" = ${Id}
            "name" = ${Name}
            "operationalStatus" = ${OperationalStatus}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AgentPool<PSCustomObject>

.DESCRIPTION

Convert from JSON to AgentPool<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AgentPool<PSCustomObject>
#>
function ConvertFrom-JsonToAgentPool {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AgentPool' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AgentPool
        $AllProperties = ("agents", "id", "name", "operationalStatus", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agents"))) { #optional property not found
            $Agents = $null
        } else {
            $Agents = $JsonParameters.PSobject.Properties["agents"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "operationalStatus"))) { #optional property not found
            $OperationalStatus = $null
        } else {
            $OperationalStatus = $JsonParameters.PSobject.Properties["operationalStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "agents" = ${Agents}
            "id" = ${Id}
            "name" = ${Name}
            "operationalStatus" = ${OperationalStatus}
            "type" = ${Type}
        }

        return $PSO
    }

}


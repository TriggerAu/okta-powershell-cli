#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AcsEndpoints
No description available.
.PARAMETER AllowMultipleAcsEndpoints
No description available.
.PARAMETER AssertionSigned
No description available.
.PARAMETER AttributeStatements
No description available.
.PARAMETER Audience
No description available.
.PARAMETER AudienceOverride
No description available.
.PARAMETER AuthnContextClassRef
No description available.
.PARAMETER DefaultRelayState
No description available.
.PARAMETER Destination
No description available.
.PARAMETER DestinationOverride
No description available.
.PARAMETER DigestAlgorithm
No description available.
.PARAMETER HonorForceAuthn
No description available.
.PARAMETER IdpIssuer
No description available.
.PARAMETER InlineHooks
No description available.
.PARAMETER Recipient
No description available.
.PARAMETER RecipientOverride
No description available.
.PARAMETER RequestCompressed
No description available.
.PARAMETER ResponseSigned
No description available.
.PARAMETER SignatureAlgorithm
No description available.
.PARAMETER Slo
No description available.
.PARAMETER SpCertificate
No description available.
.PARAMETER SpIssuer
No description available.
.PARAMETER SsoAcsUrl
No description available.
.PARAMETER SsoAcsUrlOverride
No description available.
.PARAMETER SubjectNameIdFormat
No description available.
.PARAMETER SubjectNameIdTemplate
No description available.
.OUTPUTS

SamlApplicationSettingsSignOn<PSCustomObject>
#>

function Initialize-SamlApplicationSettingsSignOn {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AcsEndpoints},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowMultipleAcsEndpoints},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AssertionSigned},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AttributeStatements},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Audience},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AudienceOverride},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuthnContextClassRef},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultRelayState},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Destination},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DestinationOverride},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DigestAlgorithm},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HonorForceAuthn},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IdpIssuer},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${InlineHooks},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Recipient},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RecipientOverride},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RequestCompressed},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ResponseSigned},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SignatureAlgorithm},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Slo},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SpCertificate},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SpIssuer},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SsoAcsUrl},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SsoAcsUrlOverride},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectNameIdFormat},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectNameIdTemplate}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SamlApplicationSettingsSignOn' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "acsEndpoints" = ${AcsEndpoints}
            "allowMultipleAcsEndpoints" = ${AllowMultipleAcsEndpoints}
            "assertionSigned" = ${AssertionSigned}
            "attributeStatements" = ${AttributeStatements}
            "audience" = ${Audience}
            "audienceOverride" = ${AudienceOverride}
            "authnContextClassRef" = ${AuthnContextClassRef}
            "defaultRelayState" = ${DefaultRelayState}
            "destination" = ${Destination}
            "destinationOverride" = ${DestinationOverride}
            "digestAlgorithm" = ${DigestAlgorithm}
            "honorForceAuthn" = ${HonorForceAuthn}
            "idpIssuer" = ${IdpIssuer}
            "inlineHooks" = ${InlineHooks}
            "recipient" = ${Recipient}
            "recipientOverride" = ${RecipientOverride}
            "requestCompressed" = ${RequestCompressed}
            "responseSigned" = ${ResponseSigned}
            "signatureAlgorithm" = ${SignatureAlgorithm}
            "slo" = ${Slo}
            "spCertificate" = ${SpCertificate}
            "spIssuer" = ${SpIssuer}
            "ssoAcsUrl" = ${SsoAcsUrl}
            "ssoAcsUrlOverride" = ${SsoAcsUrlOverride}
            "subjectNameIdFormat" = ${SubjectNameIdFormat}
            "subjectNameIdTemplate" = ${SubjectNameIdTemplate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SamlApplicationSettingsSignOn<PSCustomObject>

.DESCRIPTION

Convert from JSON to SamlApplicationSettingsSignOn<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SamlApplicationSettingsSignOn<PSCustomObject>
#>
function ConvertFrom-JsonToSamlApplicationSettingsSignOn {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SamlApplicationSettingsSignOn' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SamlApplicationSettingsSignOn
        $AllProperties = ("acsEndpoints", "allowMultipleAcsEndpoints", "assertionSigned", "attributeStatements", "audience", "audienceOverride", "authnContextClassRef", "defaultRelayState", "destination", "destinationOverride", "digestAlgorithm", "honorForceAuthn", "idpIssuer", "inlineHooks", "recipient", "recipientOverride", "requestCompressed", "responseSigned", "signatureAlgorithm", "slo", "spCertificate", "spIssuer", "ssoAcsUrl", "ssoAcsUrlOverride", "subjectNameIdFormat", "subjectNameIdTemplate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "acsEndpoints"))) { #optional property not found
            $AcsEndpoints = $null
        } else {
            $AcsEndpoints = $JsonParameters.PSobject.Properties["acsEndpoints"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowMultipleAcsEndpoints"))) { #optional property not found
            $AllowMultipleAcsEndpoints = $null
        } else {
            $AllowMultipleAcsEndpoints = $JsonParameters.PSobject.Properties["allowMultipleAcsEndpoints"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assertionSigned"))) { #optional property not found
            $AssertionSigned = $null
        } else {
            $AssertionSigned = $JsonParameters.PSobject.Properties["assertionSigned"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attributeStatements"))) { #optional property not found
            $AttributeStatements = $null
        } else {
            $AttributeStatements = $JsonParameters.PSobject.Properties["attributeStatements"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "audience"))) { #optional property not found
            $Audience = $null
        } else {
            $Audience = $JsonParameters.PSobject.Properties["audience"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "audienceOverride"))) { #optional property not found
            $AudienceOverride = $null
        } else {
            $AudienceOverride = $JsonParameters.PSobject.Properties["audienceOverride"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authnContextClassRef"))) { #optional property not found
            $AuthnContextClassRef = $null
        } else {
            $AuthnContextClassRef = $JsonParameters.PSobject.Properties["authnContextClassRef"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultRelayState"))) { #optional property not found
            $DefaultRelayState = $null
        } else {
            $DefaultRelayState = $JsonParameters.PSobject.Properties["defaultRelayState"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destination"))) { #optional property not found
            $Destination = $null
        } else {
            $Destination = $JsonParameters.PSobject.Properties["destination"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destinationOverride"))) { #optional property not found
            $DestinationOverride = $null
        } else {
            $DestinationOverride = $JsonParameters.PSobject.Properties["destinationOverride"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "digestAlgorithm"))) { #optional property not found
            $DigestAlgorithm = $null
        } else {
            $DigestAlgorithm = $JsonParameters.PSobject.Properties["digestAlgorithm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "honorForceAuthn"))) { #optional property not found
            $HonorForceAuthn = $null
        } else {
            $HonorForceAuthn = $JsonParameters.PSobject.Properties["honorForceAuthn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "idpIssuer"))) { #optional property not found
            $IdpIssuer = $null
        } else {
            $IdpIssuer = $JsonParameters.PSobject.Properties["idpIssuer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inlineHooks"))) { #optional property not found
            $InlineHooks = $null
        } else {
            $InlineHooks = $JsonParameters.PSobject.Properties["inlineHooks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recipient"))) { #optional property not found
            $Recipient = $null
        } else {
            $Recipient = $JsonParameters.PSobject.Properties["recipient"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recipientOverride"))) { #optional property not found
            $RecipientOverride = $null
        } else {
            $RecipientOverride = $JsonParameters.PSobject.Properties["recipientOverride"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestCompressed"))) { #optional property not found
            $RequestCompressed = $null
        } else {
            $RequestCompressed = $JsonParameters.PSobject.Properties["requestCompressed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "responseSigned"))) { #optional property not found
            $ResponseSigned = $null
        } else {
            $ResponseSigned = $JsonParameters.PSobject.Properties["responseSigned"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "signatureAlgorithm"))) { #optional property not found
            $SignatureAlgorithm = $null
        } else {
            $SignatureAlgorithm = $JsonParameters.PSobject.Properties["signatureAlgorithm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slo"))) { #optional property not found
            $Slo = $null
        } else {
            $Slo = $JsonParameters.PSobject.Properties["slo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "spCertificate"))) { #optional property not found
            $SpCertificate = $null
        } else {
            $SpCertificate = $JsonParameters.PSobject.Properties["spCertificate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "spIssuer"))) { #optional property not found
            $SpIssuer = $null
        } else {
            $SpIssuer = $JsonParameters.PSobject.Properties["spIssuer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssoAcsUrl"))) { #optional property not found
            $SsoAcsUrl = $null
        } else {
            $SsoAcsUrl = $JsonParameters.PSobject.Properties["ssoAcsUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssoAcsUrlOverride"))) { #optional property not found
            $SsoAcsUrlOverride = $null
        } else {
            $SsoAcsUrlOverride = $JsonParameters.PSobject.Properties["ssoAcsUrlOverride"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectNameIdFormat"))) { #optional property not found
            $SubjectNameIdFormat = $null
        } else {
            $SubjectNameIdFormat = $JsonParameters.PSobject.Properties["subjectNameIdFormat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectNameIdTemplate"))) { #optional property not found
            $SubjectNameIdTemplate = $null
        } else {
            $SubjectNameIdTemplate = $JsonParameters.PSobject.Properties["subjectNameIdTemplate"].value
        }

        $PSO = [PSCustomObject]@{
            "acsEndpoints" = ${AcsEndpoints}
            "allowMultipleAcsEndpoints" = ${AllowMultipleAcsEndpoints}
            "assertionSigned" = ${AssertionSigned}
            "attributeStatements" = ${AttributeStatements}
            "audience" = ${Audience}
            "audienceOverride" = ${AudienceOverride}
            "authnContextClassRef" = ${AuthnContextClassRef}
            "defaultRelayState" = ${DefaultRelayState}
            "destination" = ${Destination}
            "destinationOverride" = ${DestinationOverride}
            "digestAlgorithm" = ${DigestAlgorithm}
            "honorForceAuthn" = ${HonorForceAuthn}
            "idpIssuer" = ${IdpIssuer}
            "inlineHooks" = ${InlineHooks}
            "recipient" = ${Recipient}
            "recipientOverride" = ${RecipientOverride}
            "requestCompressed" = ${RequestCompressed}
            "responseSigned" = ${ResponseSigned}
            "signatureAlgorithm" = ${SignatureAlgorithm}
            "slo" = ${Slo}
            "spCertificate" = ${SpCertificate}
            "spIssuer" = ${SpIssuer}
            "ssoAcsUrl" = ${SsoAcsUrl}
            "ssoAcsUrlOverride" = ${SsoAcsUrlOverride}
            "subjectNameIdFormat" = ${SubjectNameIdFormat}
            "subjectNameIdTemplate" = ${SubjectNameIdTemplate}
        }

        return $PSO
    }

}


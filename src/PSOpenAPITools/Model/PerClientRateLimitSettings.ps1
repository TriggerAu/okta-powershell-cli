#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION



.PARAMETER DefaultMode
No description available.
.PARAMETER UseCaseModeOverrides
No description available.
.OUTPUTS

PerClientRateLimitSettings<PSCustomObject>
#>

function Initialize-PerClientRateLimitSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DefaultMode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UseCaseModeOverrides}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PerClientRateLimitSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $DefaultMode) {
            throw "invalid value for 'DefaultMode', 'DefaultMode' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "defaultMode" = ${DefaultMode}
            "useCaseModeOverrides" = ${UseCaseModeOverrides}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PerClientRateLimitSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to PerClientRateLimitSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PerClientRateLimitSettings<PSCustomObject>
#>
function ConvertFrom-JsonToPerClientRateLimitSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PerClientRateLimitSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PerClientRateLimitSettings
        $AllProperties = ("defaultMode", "useCaseModeOverrides")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'defaultMode' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultMode"))) {
            throw "Error! JSON cannot be serialized due to the required property 'defaultMode' missing."
        } else {
            $DefaultMode = $JsonParameters.PSobject.Properties["defaultMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "useCaseModeOverrides"))) { #optional property not found
            $UseCaseModeOverrides = $null
        } else {
            $UseCaseModeOverrides = $JsonParameters.PSobject.Properties["useCaseModeOverrides"].value
        }

        $PSO = [PSCustomObject]@{
            "defaultMode" = ${DefaultMode}
            "useCaseModeOverrides" = ${UseCaseModeOverrides}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The schedule of auto-update configured by admin.

.PARAMETER Cron
No description available.
.PARAMETER Delay
delay in days
.PARAMETER Duration
duration in minutes
.PARAMETER LastUpdated
last time when the updated finished (success or failed, exclude cancelled), null if job haven't finished once yet.
.PARAMETER Timezone
No description available.
.OUTPUTS

AutoUpdateSchedule<PSCustomObject>
#>

function Initialize-AutoUpdateSchedule {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cron},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Delay},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Duration},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timezone}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AutoUpdateSchedule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "cron" = ${Cron}
            "delay" = ${Delay}
            "duration" = ${Duration}
            "lastUpdated" = ${LastUpdated}
            "timezone" = ${Timezone}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AutoUpdateSchedule<PSCustomObject>

.DESCRIPTION

Convert from JSON to AutoUpdateSchedule<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AutoUpdateSchedule<PSCustomObject>
#>
function ConvertFrom-JsonToAutoUpdateSchedule {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AutoUpdateSchedule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AutoUpdateSchedule
        $AllProperties = ("cron", "delay", "duration", "lastUpdated", "timezone")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cron"))) { #optional property not found
            $Cron = $null
        } else {
            $Cron = $JsonParameters.PSobject.Properties["cron"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "delay"))) { #optional property not found
            $Delay = $null
        } else {
            $Delay = $JsonParameters.PSobject.Properties["delay"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "duration"))) { #optional property not found
            $Duration = $null
        } else {
            $Duration = $JsonParameters.PSobject.Properties["duration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdated"))) { #optional property not found
            $LastUpdated = $null
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["lastUpdated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timezone"))) { #optional property not found
            $Timezone = $null
        } else {
            $Timezone = $JsonParameters.PSobject.Properties["timezone"].value
        }

        $PSO = [PSCustomObject]@{
            "cron" = ${Cron}
            "delay" = ${Delay}
            "duration" = ${Duration}
            "lastUpdated" = ${LastUpdated}
            "timezone" = ${Timezone}
        }

        return $PSO
    }

}


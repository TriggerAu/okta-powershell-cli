#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AllowedFor
No description available.
.PARAMETER AppInstanceId
No description available.
.PARAMETER ChannelBinding
No description available.
.PARAMETER Compliance
No description available.
.PARAMETER TokenLifetimeInMinutes
No description available.
.PARAMETER UserVerification
No description available.
.OUTPUTS

AuthenticatorSettings<PSCustomObject>
#>

function Initialize-AuthenticatorSettings {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AllowedFor},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AppInstanceId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ChannelBinding},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Compliance},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TokenLifetimeInMinutes},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserVerification}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AuthenticatorSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "allowedFor" = ${AllowedFor}
            "appInstanceId" = ${AppInstanceId}
            "channelBinding" = ${ChannelBinding}
            "compliance" = ${Compliance}
            "tokenLifetimeInMinutes" = ${TokenLifetimeInMinutes}
            "userVerification" = ${UserVerification}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AuthenticatorSettings<PSCustomObject>

.DESCRIPTION

Convert from JSON to AuthenticatorSettings<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AuthenticatorSettings<PSCustomObject>
#>
function ConvertFrom-JsonToAuthenticatorSettings {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AuthenticatorSettings' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AuthenticatorSettings
        $AllProperties = ("allowedFor", "appInstanceId", "channelBinding", "compliance", "tokenLifetimeInMinutes", "userVerification")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowedFor"))) { #optional property not found
            $AllowedFor = $null
        } else {
            $AllowedFor = $JsonParameters.PSobject.Properties["allowedFor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appInstanceId"))) { #optional property not found
            $AppInstanceId = $null
        } else {
            $AppInstanceId = $JsonParameters.PSobject.Properties["appInstanceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "channelBinding"))) { #optional property not found
            $ChannelBinding = $null
        } else {
            $ChannelBinding = $JsonParameters.PSobject.Properties["channelBinding"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "compliance"))) { #optional property not found
            $Compliance = $null
        } else {
            $Compliance = $JsonParameters.PSobject.Properties["compliance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tokenLifetimeInMinutes"))) { #optional property not found
            $TokenLifetimeInMinutes = $null
        } else {
            $TokenLifetimeInMinutes = $JsonParameters.PSobject.Properties["tokenLifetimeInMinutes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userVerification"))) { #optional property not found
            $UserVerification = $null
        } else {
            $UserVerification = $JsonParameters.PSobject.Properties["userVerification"].value
        }

        $PSO = [PSCustomObject]@{
            "allowedFor" = ${AllowedFor}
            "appInstanceId" = ${AppInstanceId}
            "channelBinding" = ${ChannelBinding}
            "compliance" = ${Compliance}
            "tokenLifetimeInMinutes" = ${TokenLifetimeInMinutes}
            "userVerification" = ${UserVerification}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AccountId
Your AWS account ID
.PARAMETER EventSourceName
An alphanumeric name (no spaces) to identify this event source in AWS EventBridge
.PARAMETER Region
No description available.
.OUTPUTS

LogStreamSettingsAws<PSCustomObject>
#>

function Initialize-LogStreamSettingsAws {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AccountId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-zA-Z0-9.\-_]$")]
        [String]
        ${EventSourceName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Region}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => LogStreamSettingsAws' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$AccountId -and $AccountId.length -gt 12) {
            throw "invalid value for 'AccountId', the character length must be smaller than or equal to 12."
        }

        if (!$AccountId -and $AccountId.length -lt 12) {
            throw "invalid value for 'AccountId', the character length must be great than or equal to 12."
        }

        if (!$EventSourceName -and $EventSourceName.length -gt 75) {
            throw "invalid value for 'EventSourceName', the character length must be smaller than or equal to 75."
        }

        if (!$EventSourceName -and $EventSourceName.length -lt 1) {
            throw "invalid value for 'EventSourceName', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "accountId" = ${AccountId}
            "eventSourceName" = ${EventSourceName}
            "region" = ${Region}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to LogStreamSettingsAws<PSCustomObject>

.DESCRIPTION

Convert from JSON to LogStreamSettingsAws<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

LogStreamSettingsAws<PSCustomObject>
#>
function ConvertFrom-JsonToLogStreamSettingsAws {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => LogStreamSettingsAws' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LogStreamSettingsAws
        $AllProperties = ("accountId", "eventSourceName", "region")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "accountId"))) { #optional property not found
            $AccountId = $null
        } else {
            $AccountId = $JsonParameters.PSobject.Properties["accountId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eventSourceName"))) { #optional property not found
            $EventSourceName = $null
        } else {
            $EventSourceName = $JsonParameters.PSobject.Properties["eventSourceName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "region"))) { #optional property not found
            $Region = $null
        } else {
            $Region = $JsonParameters.PSobject.Properties["region"].value
        }

        $PSO = [PSCustomObject]@{
            "accountId" = ${AccountId}
            "eventSourceName" = ${EventSourceName}
            "region" = ${Region}
        }

        return $PSO
    }

}


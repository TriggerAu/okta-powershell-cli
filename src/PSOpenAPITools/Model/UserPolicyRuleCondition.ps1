#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Exclude
No description available.
.PARAMETER Inactivity
No description available.
.PARAMETER Include
No description available.
.PARAMETER LifecycleExpiration
No description available.
.PARAMETER PasswordExpiration
No description available.
.PARAMETER UserLifecycleAttribute
No description available.
.OUTPUTS

UserPolicyRuleCondition<PSCustomObject>
#>

function Initialize-UserPolicyRuleCondition {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Exclude},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Inactivity},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Include},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LifecycleExpiration},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PasswordExpiration},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserLifecycleAttribute}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UserPolicyRuleCondition' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "exclude" = ${Exclude}
            "inactivity" = ${Inactivity}
            "include" = ${Include}
            "lifecycleExpiration" = ${LifecycleExpiration}
            "passwordExpiration" = ${PasswordExpiration}
            "userLifecycleAttribute" = ${UserLifecycleAttribute}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UserPolicyRuleCondition<PSCustomObject>

.DESCRIPTION

Convert from JSON to UserPolicyRuleCondition<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UserPolicyRuleCondition<PSCustomObject>
#>
function ConvertFrom-JsonToUserPolicyRuleCondition {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UserPolicyRuleCondition' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UserPolicyRuleCondition
        $AllProperties = ("exclude", "inactivity", "include", "lifecycleExpiration", "passwordExpiration", "userLifecycleAttribute")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exclude"))) { #optional property not found
            $Exclude = $null
        } else {
            $Exclude = $JsonParameters.PSobject.Properties["exclude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inactivity"))) { #optional property not found
            $Inactivity = $null
        } else {
            $Inactivity = $JsonParameters.PSobject.Properties["inactivity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "include"))) { #optional property not found
            $Include = $null
        } else {
            $Include = $JsonParameters.PSobject.Properties["include"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lifecycleExpiration"))) { #optional property not found
            $LifecycleExpiration = $null
        } else {
            $LifecycleExpiration = $JsonParameters.PSobject.Properties["lifecycleExpiration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "passwordExpiration"))) { #optional property not found
            $PasswordExpiration = $null
        } else {
            $PasswordExpiration = $JsonParameters.PSobject.Properties["passwordExpiration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userLifecycleAttribute"))) { #optional property not found
            $UserLifecycleAttribute = $null
        } else {
            $UserLifecycleAttribute = $JsonParameters.PSobject.Properties["userLifecycleAttribute"].value
        }

        $PSO = [PSCustomObject]@{
            "exclude" = ${Exclude}
            "inactivity" = ${Inactivity}
            "include" = ${Include}
            "lifecycleExpiration" = ${LifecycleExpiration}
            "passwordExpiration" = ${PasswordExpiration}
            "userLifecycleAttribute" = ${UserLifecycleAttribute}
        }

        return $PSO
    }

}


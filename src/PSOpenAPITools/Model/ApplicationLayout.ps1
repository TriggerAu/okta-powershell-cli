#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Elements
No description available.
.PARAMETER Label
No description available.
.PARAMETER Options
No description available.
.PARAMETER Rule
No description available.
.PARAMETER Scope
No description available.
.PARAMETER Type
No description available.
.OUTPUTS

ApplicationLayout<PSCustomObject>
#>

function Initialize-ApplicationLayout {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable[]]
        ${Elements},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Options},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Rule},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Scope},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApplicationLayout' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "elements" = ${Elements}
            "label" = ${Label}
            "options" = ${Options}
            "rule" = ${Rule}
            "scope" = ${Scope}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApplicationLayout<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApplicationLayout<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApplicationLayout<PSCustomObject>
#>
function ConvertFrom-JsonToApplicationLayout {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApplicationLayout' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApplicationLayout
        $AllProperties = ("elements", "label", "options", "rule", "scope", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "elements"))) { #optional property not found
            $Elements = $null
        } else {
            $Elements = $JsonParameters.PSobject.Properties["elements"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "options"))) { #optional property not found
            $Options = $null
        } else {
            $Options = $JsonParameters.PSobject.Properties["options"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rule"))) { #optional property not found
            $Rule = $null
        } else {
            $Rule = $JsonParameters.PSobject.Properties["rule"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) { #optional property not found
            $Scope = $null
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "elements" = ${Elements}
            "label" = ${Label}
            "options" = ${Options}
            "rule" = ${Rule}
            "scope" = ${Scope}
            "type" = ${Type}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Links to resources related to this email preview.

.PARAMETER Self
No description available.
.PARAMETER ContentSource
No description available.
.PARAMETER Template
No description available.
.PARAMETER Test
No description available.
.PARAMETER DefaultContent
No description available.
.OUTPUTS

EmailPreviewLinks<PSCustomObject>
#>

function Initialize-EmailPreviewLinks {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Self},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ContentSource},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Template},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Test},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DefaultContent}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EmailPreviewLinks' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "self" = ${Self}
            "contentSource" = ${ContentSource}
            "template" = ${Template}
            "test" = ${Test}
            "defaultContent" = ${DefaultContent}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EmailPreviewLinks<PSCustomObject>

.DESCRIPTION

Convert from JSON to EmailPreviewLinks<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EmailPreviewLinks<PSCustomObject>
#>
function ConvertFrom-JsonToEmailPreviewLinks {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EmailPreviewLinks' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EmailPreviewLinks
        $AllProperties = ("self", "contentSource", "template", "test", "defaultContent")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contentSource"))) { #optional property not found
            $ContentSource = $null
        } else {
            $ContentSource = $JsonParameters.PSobject.Properties["contentSource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "template"))) { #optional property not found
            $Template = $null
        } else {
            $Template = $JsonParameters.PSobject.Properties["template"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "test"))) { #optional property not found
            $Test = $null
        } else {
            $Test = $JsonParameters.PSobject.Properties["test"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultContent"))) { #optional property not found
            $DefaultContent = $null
        } else {
            $DefaultContent = $JsonParameters.PSobject.Properties["defaultContent"].value
        }

        $PSO = [PSCustomObject]@{
            "self" = ${Self}
            "contentSource" = ${ContentSource}
            "template" = ${Template}
            "test" = ${Test}
            "defaultContent" = ${DefaultContent}
        }

        return $PSO
    }

}


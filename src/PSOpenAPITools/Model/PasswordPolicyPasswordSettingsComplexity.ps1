#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Dictionary
No description available.
.PARAMETER ExcludeAttributes
No description available.
.PARAMETER ExcludeUsername
No description available.
.PARAMETER MinLength
No description available.
.PARAMETER MinLowerCase
No description available.
.PARAMETER MinNumber
No description available.
.PARAMETER MinSymbol
No description available.
.PARAMETER MinUpperCase
No description available.
.OUTPUTS

PasswordPolicyPasswordSettingsComplexity<PSCustomObject>
#>

function Initialize-PasswordPolicyPasswordSettingsComplexity {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Dictionary},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ExcludeAttributes},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ExcludeUsername} = $true,
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinLength},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinLowerCase},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinNumber},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinSymbol},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinUpperCase}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PasswordPolicyPasswordSettingsComplexity' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "dictionary" = ${Dictionary}
            "excludeAttributes" = ${ExcludeAttributes}
            "excludeUsername" = ${ExcludeUsername}
            "minLength" = ${MinLength}
            "minLowerCase" = ${MinLowerCase}
            "minNumber" = ${MinNumber}
            "minSymbol" = ${MinSymbol}
            "minUpperCase" = ${MinUpperCase}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PasswordPolicyPasswordSettingsComplexity<PSCustomObject>

.DESCRIPTION

Convert from JSON to PasswordPolicyPasswordSettingsComplexity<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PasswordPolicyPasswordSettingsComplexity<PSCustomObject>
#>
function ConvertFrom-JsonToPasswordPolicyPasswordSettingsComplexity {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PasswordPolicyPasswordSettingsComplexity' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PasswordPolicyPasswordSettingsComplexity
        $AllProperties = ("dictionary", "excludeAttributes", "excludeUsername", "minLength", "minLowerCase", "minNumber", "minSymbol", "minUpperCase")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dictionary"))) { #optional property not found
            $Dictionary = $null
        } else {
            $Dictionary = $JsonParameters.PSobject.Properties["dictionary"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "excludeAttributes"))) { #optional property not found
            $ExcludeAttributes = $null
        } else {
            $ExcludeAttributes = $JsonParameters.PSobject.Properties["excludeAttributes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "excludeUsername"))) { #optional property not found
            $ExcludeUsername = $null
        } else {
            $ExcludeUsername = $JsonParameters.PSobject.Properties["excludeUsername"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minLength"))) { #optional property not found
            $MinLength = $null
        } else {
            $MinLength = $JsonParameters.PSobject.Properties["minLength"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minLowerCase"))) { #optional property not found
            $MinLowerCase = $null
        } else {
            $MinLowerCase = $JsonParameters.PSobject.Properties["minLowerCase"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minNumber"))) { #optional property not found
            $MinNumber = $null
        } else {
            $MinNumber = $JsonParameters.PSobject.Properties["minNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minSymbol"))) { #optional property not found
            $MinSymbol = $null
        } else {
            $MinSymbol = $JsonParameters.PSobject.Properties["minSymbol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minUpperCase"))) { #optional property not found
            $MinUpperCase = $null
        } else {
            $MinUpperCase = $JsonParameters.PSobject.Properties["minUpperCase"].value
        }

        $PSO = [PSCustomObject]@{
            "dictionary" = ${Dictionary}
            "excludeAttributes" = ${ExcludeAttributes}
            "excludeUsername" = ${ExcludeUsername}
            "minLength" = ${MinLength}
            "minLowerCase" = ${MinLowerCase}
            "minNumber" = ${MinNumber}
            "minSymbol" = ${MinSymbol}
            "minUpperCase" = ${MinUpperCase}
        }

        return $PSO
    }

}


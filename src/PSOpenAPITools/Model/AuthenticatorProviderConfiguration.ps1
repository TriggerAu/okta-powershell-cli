#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AuthPort
No description available.
.PARAMETER HostName
No description available.
.PARAMETER InstanceId
No description available.
.PARAMETER SharedSecret
No description available.
.PARAMETER UserNameTemplate
No description available.
.OUTPUTS

AuthenticatorProviderConfiguration<PSCustomObject>
#>

function Initialize-AuthenticatorProviderConfiguration {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AuthPort},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InstanceId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SharedSecret},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserNameTemplate}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AuthenticatorProviderConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "authPort" = ${AuthPort}
            "hostName" = ${HostName}
            "instanceId" = ${InstanceId}
            "sharedSecret" = ${SharedSecret}
            "userNameTemplate" = ${UserNameTemplate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AuthenticatorProviderConfiguration<PSCustomObject>

.DESCRIPTION

Convert from JSON to AuthenticatorProviderConfiguration<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AuthenticatorProviderConfiguration<PSCustomObject>
#>
function ConvertFrom-JsonToAuthenticatorProviderConfiguration {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AuthenticatorProviderConfiguration' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AuthenticatorProviderConfiguration
        $AllProperties = ("authPort", "hostName", "instanceId", "sharedSecret", "userNameTemplate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authPort"))) { #optional property not found
            $AuthPort = $null
        } else {
            $AuthPort = $JsonParameters.PSobject.Properties["authPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hostName"))) { #optional property not found
            $HostName = $null
        } else {
            $HostName = $JsonParameters.PSobject.Properties["hostName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "instanceId"))) { #optional property not found
            $InstanceId = $null
        } else {
            $InstanceId = $JsonParameters.PSobject.Properties["instanceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sharedSecret"))) { #optional property not found
            $SharedSecret = $null
        } else {
            $SharedSecret = $JsonParameters.PSobject.Properties["sharedSecret"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userNameTemplate"))) { #optional property not found
            $UserNameTemplate = $null
        } else {
            $UserNameTemplate = $JsonParameters.PSobject.Properties["userNameTemplate"].value
        }

        $PSO = [PSCustomObject]@{
            "authPort" = ${AuthPort}
            "hostName" = ${HostName}
            "instanceId" = ${InstanceId}
            "sharedSecret" = ${SharedSecret}
            "userNameTemplate" = ${UserNameTemplate}
        }

        return $PSO
    }

}


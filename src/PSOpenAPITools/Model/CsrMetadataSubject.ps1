#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CommonName
No description available.
.PARAMETER CountryName
No description available.
.PARAMETER LocalityName
No description available.
.PARAMETER OrganizationalUnitName
No description available.
.PARAMETER OrganizationName
No description available.
.PARAMETER StateOrProvinceName
No description available.
.OUTPUTS

CsrMetadataSubject<PSCustomObject>
#>

function Initialize-CsrMetadataSubject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CommonName},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CountryName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LocalityName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OrganizationalUnitName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OrganizationName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StateOrProvinceName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CsrMetadataSubject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "commonName" = ${CommonName}
            "countryName" = ${CountryName}
            "localityName" = ${LocalityName}
            "organizationalUnitName" = ${OrganizationalUnitName}
            "organizationName" = ${OrganizationName}
            "stateOrProvinceName" = ${StateOrProvinceName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CsrMetadataSubject<PSCustomObject>

.DESCRIPTION

Convert from JSON to CsrMetadataSubject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CsrMetadataSubject<PSCustomObject>
#>
function ConvertFrom-JsonToCsrMetadataSubject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CsrMetadataSubject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CsrMetadataSubject
        $AllProperties = ("commonName", "countryName", "localityName", "organizationalUnitName", "organizationName", "stateOrProvinceName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "commonName"))) { #optional property not found
            $CommonName = $null
        } else {
            $CommonName = $JsonParameters.PSobject.Properties["commonName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "countryName"))) { #optional property not found
            $CountryName = $null
        } else {
            $CountryName = $JsonParameters.PSobject.Properties["countryName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "localityName"))) { #optional property not found
            $LocalityName = $null
        } else {
            $LocalityName = $JsonParameters.PSobject.Properties["localityName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "organizationalUnitName"))) { #optional property not found
            $OrganizationalUnitName = $null
        } else {
            $OrganizationalUnitName = $JsonParameters.PSobject.Properties["organizationalUnitName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "organizationName"))) { #optional property not found
            $OrganizationName = $null
        } else {
            $OrganizationName = $JsonParameters.PSobject.Properties["organizationName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stateOrProvinceName"))) { #optional property not found
            $StateOrProvinceName = $null
        } else {
            $StateOrProvinceName = $JsonParameters.PSobject.Properties["stateOrProvinceName"].value
        }

        $PSO = [PSCustomObject]@{
            "commonName" = ${CommonName}
            "countryName" = ${CountryName}
            "localityName" = ${LocalityName}
            "organizationalUnitName" = ${OrganizationalUnitName}
            "organizationName" = ${OrganizationName}
            "stateOrProvinceName" = ${StateOrProvinceName}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Consent
No description available.
.PARAMETER Default
No description available.
.PARAMETER Description
No description available.
.PARAMETER DisplayName
No description available.
.PARAMETER Id
No description available.
.PARAMETER MetadataPublish
No description available.
.PARAMETER Name
No description available.
.PARAMETER System
No description available.
.OUTPUTS

OAuth2Scope<PSCustomObject>
#>

function Initialize-OAuth2Scope {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Consent},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Default},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MetadataPublish},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${System}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OAuth2Scope' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "consent" = ${Consent}
            "default" = ${Default}
            "description" = ${Description}
            "displayName" = ${DisplayName}
            "id" = ${Id}
            "metadataPublish" = ${MetadataPublish}
            "name" = ${Name}
            "system" = ${System}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OAuth2Scope<PSCustomObject>

.DESCRIPTION

Convert from JSON to OAuth2Scope<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OAuth2Scope<PSCustomObject>
#>
function ConvertFrom-JsonToOAuth2Scope {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OAuth2Scope' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OAuth2Scope
        $AllProperties = ("consent", "default", "description", "displayName", "id", "metadataPublish", "name", "system")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consent"))) { #optional property not found
            $Consent = $null
        } else {
            $Consent = $JsonParameters.PSobject.Properties["consent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default"))) { #optional property not found
            $Default = $null
        } else {
            $Default = $JsonParameters.PSobject.Properties["default"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadataPublish"))) { #optional property not found
            $MetadataPublish = $null
        } else {
            $MetadataPublish = $JsonParameters.PSobject.Properties["metadataPublish"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "system"))) { #optional property not found
            $System = $null
        } else {
            $System = $JsonParameters.PSobject.Properties["system"].value
        }

        $PSO = [PSCustomObject]@{
            "consent" = ${Consent}
            "default" = ${Default}
            "description" = ${Description}
            "displayName" = ${DisplayName}
            "id" = ${Id}
            "metadataPublish" = ${MetadataPublish}
            "name" = ${Name}
            "system" = ${System}
        }

        return $PSO
    }

}


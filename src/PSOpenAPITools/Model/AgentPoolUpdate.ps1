#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Various information about agent auto update configuration

.PARAMETER Agents
No description available.
.PARAMETER AgentType
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER NotifyAdmin
No description available.
.PARAMETER Reason
No description available.
.PARAMETER Schedule
No description available.
.PARAMETER SortOrder
No description available.
.PARAMETER Status
No description available.
.PARAMETER TargetVersion
No description available.
.PARAMETER Links
No description available.
.OUTPUTS

AgentPoolUpdate<PSCustomObject>
#>

function Initialize-AgentPoolUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Agents},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AgentType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${NotifyAdmin},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Reason},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Schedule},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SortOrder},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetVersion},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Links}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AgentPoolUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "agents" = ${Agents}
            "agentType" = ${AgentType}
            "enabled" = ${Enabled}
            "id" = ${Id}
            "name" = ${Name}
            "notifyAdmin" = ${NotifyAdmin}
            "reason" = ${Reason}
            "schedule" = ${Schedule}
            "sortOrder" = ${SortOrder}
            "status" = ${Status}
            "targetVersion" = ${TargetVersion}
            "_links" = ${Links}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AgentPoolUpdate<PSCustomObject>

.DESCRIPTION

Convert from JSON to AgentPoolUpdate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AgentPoolUpdate<PSCustomObject>
#>
function ConvertFrom-JsonToAgentPoolUpdate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AgentPoolUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AgentPoolUpdate
        $AllProperties = ("agents", "agentType", "enabled", "id", "name", "notifyAdmin", "reason", "schedule", "sortOrder", "status", "targetVersion", "_links")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agents"))) { #optional property not found
            $Agents = $null
        } else {
            $Agents = $JsonParameters.PSobject.Properties["agents"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "agentType"))) { #optional property not found
            $AgentType = $null
        } else {
            $AgentType = $JsonParameters.PSobject.Properties["agentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notifyAdmin"))) { #optional property not found
            $NotifyAdmin = $null
        } else {
            $NotifyAdmin = $JsonParameters.PSobject.Properties["notifyAdmin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reason"))) { #optional property not found
            $Reason = $null
        } else {
            $Reason = $JsonParameters.PSobject.Properties["reason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schedule"))) { #optional property not found
            $Schedule = $null
        } else {
            $Schedule = $JsonParameters.PSobject.Properties["schedule"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sortOrder"))) { #optional property not found
            $SortOrder = $null
        } else {
            $SortOrder = $JsonParameters.PSobject.Properties["sortOrder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetVersion"))) { #optional property not found
            $TargetVersion = $null
        } else {
            $TargetVersion = $JsonParameters.PSobject.Properties["targetVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_links"))) { #optional property not found
            $Links = $null
        } else {
            $Links = $JsonParameters.PSobject.Properties["_links"].value
        }

        $PSO = [PSCustomObject]@{
            "agents" = ${Agents}
            "agentType" = ${AgentType}
            "enabled" = ${Enabled}
            "id" = ${Id}
            "name" = ${Name}
            "notifyAdmin" = ${NotifyAdmin}
            "reason" = ${Reason}
            "schedule" = ${Schedule}
            "sortOrder" = ${SortOrder}
            "status" = ${Status}
            "targetVersion" = ${TargetVersion}
            "_links" = ${Links}
        }

        return $PSO
    }

}


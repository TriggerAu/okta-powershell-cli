#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DnsValidationRecords
No description available.
.PARAMETER Domain
No description available.
.PARAMETER Id
No description available.
.PARAMETER ValidationStatus
No description available.
.PARAMETER DisplayName
No description available.
.PARAMETER UserName
No description available.
.OUTPUTS

EmailDomainResponse<PSCustomObject>
#>

function Initialize-EmailDomainResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${DnsValidationRecords},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Domain},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ValidationStatus},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EmailDomainResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $DisplayName) {
            throw "invalid value for 'DisplayName', 'DisplayName' cannot be null."
        }

        if ($null -eq $UserName) {
            throw "invalid value for 'UserName', 'UserName' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "dnsValidationRecords" = ${DnsValidationRecords}
            "domain" = ${Domain}
            "id" = ${Id}
            "validationStatus" = ${ValidationStatus}
            "displayName" = ${DisplayName}
            "userName" = ${UserName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EmailDomainResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to EmailDomainResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EmailDomainResponse<PSCustomObject>
#>
function ConvertFrom-JsonToEmailDomainResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EmailDomainResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EmailDomainResponse
        $AllProperties = ("dnsValidationRecords", "domain", "id", "validationStatus", "displayName", "userName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'displayName' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'displayName' missing."
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userName"))) {
            throw "Error! JSON cannot be serialized due to the required property 'userName' missing."
        } else {
            $UserName = $JsonParameters.PSobject.Properties["userName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dnsValidationRecords"))) { #optional property not found
            $DnsValidationRecords = $null
        } else {
            $DnsValidationRecords = $JsonParameters.PSobject.Properties["dnsValidationRecords"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "domain"))) { #optional property not found
            $Domain = $null
        } else {
            $Domain = $JsonParameters.PSobject.Properties["domain"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validationStatus"))) { #optional property not found
            $ValidationStatus = $null
        } else {
            $ValidationStatus = $JsonParameters.PSobject.Properties["validationStatus"].value
        }

        $PSO = [PSCustomObject]@{
            "dnsValidationRecords" = ${DnsValidationRecords}
            "domain" = ${Domain}
            "id" = ${Id}
            "validationStatus" = ${ValidationStatus}
            "displayName" = ${DisplayName}
            "userName" = ${UserName}
        }

        return $PSO
    }

}


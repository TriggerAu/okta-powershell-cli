#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Self
No description available.
.PARAMETER Users
No description available.
.PARAMETER Activate
No description available.
.PARAMETER Deactivate
No description available.
.PARAMETER Suspend
No description available.
.PARAMETER Unsuspend
No description available.
.OUTPUTS

DeviceLinks<PSCustomObject>
#>

function Initialize-DeviceLinks {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Self},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Users},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Activate},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Deactivate},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Suspend},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Unsuspend}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DeviceLinks' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "self" = ${Self}
            "users" = ${Users}
            "activate" = ${Activate}
            "deactivate" = ${Deactivate}
            "suspend" = ${Suspend}
            "unsuspend" = ${Unsuspend}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DeviceLinks<PSCustomObject>

.DESCRIPTION

Convert from JSON to DeviceLinks<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DeviceLinks<PSCustomObject>
#>
function ConvertFrom-JsonToDeviceLinks {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DeviceLinks' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DeviceLinks
        $AllProperties = ("self", "users", "activate", "deactivate", "suspend", "unsuspend")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self"))) { #optional property not found
            $Self = $null
        } else {
            $Self = $JsonParameters.PSobject.Properties["self"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "users"))) { #optional property not found
            $Users = $null
        } else {
            $Users = $JsonParameters.PSobject.Properties["users"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "activate"))) { #optional property not found
            $Activate = $null
        } else {
            $Activate = $JsonParameters.PSobject.Properties["activate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deactivate"))) { #optional property not found
            $Deactivate = $null
        } else {
            $Deactivate = $JsonParameters.PSobject.Properties["deactivate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "suspend"))) { #optional property not found
            $Suspend = $null
        } else {
            $Suspend = $JsonParameters.PSobject.Properties["suspend"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unsuspend"))) { #optional property not found
            $Unsuspend = $null
        } else {
            $Unsuspend = $JsonParameters.PSobject.Properties["unsuspend"].value
        }

        $PSO = [PSCustomObject]@{
            "self" = ${Self}
            "users" = ${Users}
            "activate" = ${Activate}
            "deactivate" = ${Deactivate}
            "suspend" = ${Suspend}
            "unsuspend" = ${Unsuspend}
        }

        return $PSO
    }

}


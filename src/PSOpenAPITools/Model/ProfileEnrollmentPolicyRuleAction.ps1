#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Access
No description available.
.PARAMETER ActivationRequirements
No description available.
.PARAMETER PreRegistrationInlineHooks
No description available.
.PARAMETER ProfileAttributes
No description available.
.PARAMETER TargetGroupIds
No description available.
.PARAMETER UnknownUserAction
No description available.
.OUTPUTS

ProfileEnrollmentPolicyRuleAction<PSCustomObject>
#>

function Initialize-ProfileEnrollmentPolicyRuleAction {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Access},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ActivationRequirements},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${PreRegistrationInlineHooks},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ProfileAttributes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${TargetGroupIds},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UnknownUserAction}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ProfileEnrollmentPolicyRuleAction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "access" = ${Access}
            "activationRequirements" = ${ActivationRequirements}
            "preRegistrationInlineHooks" = ${PreRegistrationInlineHooks}
            "profileAttributes" = ${ProfileAttributes}
            "targetGroupIds" = ${TargetGroupIds}
            "unknownUserAction" = ${UnknownUserAction}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProfileEnrollmentPolicyRuleAction<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProfileEnrollmentPolicyRuleAction<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProfileEnrollmentPolicyRuleAction<PSCustomObject>
#>
function ConvertFrom-JsonToProfileEnrollmentPolicyRuleAction {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ProfileEnrollmentPolicyRuleAction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProfileEnrollmentPolicyRuleAction
        $AllProperties = ("access", "activationRequirements", "preRegistrationInlineHooks", "profileAttributes", "targetGroupIds", "unknownUserAction")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "access"))) { #optional property not found
            $Access = $null
        } else {
            $Access = $JsonParameters.PSobject.Properties["access"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "activationRequirements"))) { #optional property not found
            $ActivationRequirements = $null
        } else {
            $ActivationRequirements = $JsonParameters.PSobject.Properties["activationRequirements"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "preRegistrationInlineHooks"))) { #optional property not found
            $PreRegistrationInlineHooks = $null
        } else {
            $PreRegistrationInlineHooks = $JsonParameters.PSobject.Properties["preRegistrationInlineHooks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "profileAttributes"))) { #optional property not found
            $ProfileAttributes = $null
        } else {
            $ProfileAttributes = $JsonParameters.PSobject.Properties["profileAttributes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "targetGroupIds"))) { #optional property not found
            $TargetGroupIds = $null
        } else {
            $TargetGroupIds = $JsonParameters.PSobject.Properties["targetGroupIds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unknownUserAction"))) { #optional property not found
            $UnknownUserAction = $null
        } else {
            $UnknownUserAction = $JsonParameters.PSobject.Properties["unknownUserAction"].value
        }

        $PSO = [PSCustomObject]@{
            "access" = ${Access}
            "activationRequirements" = ${ActivationRequirements}
            "preRegistrationInlineHooks" = ${PreRegistrationInlineHooks}
            "profileAttributes" = ${ProfileAttributes}
            "targetGroupIds" = ${TargetGroupIds}
            "unknownUserAction" = ${UnknownUserAction}
        }

        return $PSO
    }

}


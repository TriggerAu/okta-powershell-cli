#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Access
No description available.
.PARAMETER FactorLifetime
No description available.
.PARAMETER FactorPromptMode
No description available.
.PARAMETER RememberDeviceByDefault
No description available.
.PARAMETER RequireFactor
No description available.
.PARAMETER Session
No description available.
.OUTPUTS

OktaSignOnPolicyRuleSignonActions<PSCustomObject>
#>

function Initialize-OktaSignOnPolicyRuleSignonActions {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Access},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FactorLifetime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FactorPromptMode},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RememberDeviceByDefault} = $false,
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RequireFactor} = $false,
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Session}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OktaSignOnPolicyRuleSignonActions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "access" = ${Access}
            "factorLifetime" = ${FactorLifetime}
            "factorPromptMode" = ${FactorPromptMode}
            "rememberDeviceByDefault" = ${RememberDeviceByDefault}
            "requireFactor" = ${RequireFactor}
            "session" = ${Session}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OktaSignOnPolicyRuleSignonActions<PSCustomObject>

.DESCRIPTION

Convert from JSON to OktaSignOnPolicyRuleSignonActions<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OktaSignOnPolicyRuleSignonActions<PSCustomObject>
#>
function ConvertFrom-JsonToOktaSignOnPolicyRuleSignonActions {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OktaSignOnPolicyRuleSignonActions' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OktaSignOnPolicyRuleSignonActions
        $AllProperties = ("access", "factorLifetime", "factorPromptMode", "rememberDeviceByDefault", "requireFactor", "session")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "access"))) { #optional property not found
            $Access = $null
        } else {
            $Access = $JsonParameters.PSobject.Properties["access"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "factorLifetime"))) { #optional property not found
            $FactorLifetime = $null
        } else {
            $FactorLifetime = $JsonParameters.PSobject.Properties["factorLifetime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "factorPromptMode"))) { #optional property not found
            $FactorPromptMode = $null
        } else {
            $FactorPromptMode = $JsonParameters.PSobject.Properties["factorPromptMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rememberDeviceByDefault"))) { #optional property not found
            $RememberDeviceByDefault = $null
        } else {
            $RememberDeviceByDefault = $JsonParameters.PSobject.Properties["rememberDeviceByDefault"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requireFactor"))) { #optional property not found
            $RequireFactor = $null
        } else {
            $RequireFactor = $JsonParameters.PSobject.Properties["requireFactor"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "session"))) { #optional property not found
            $Session = $null
        } else {
            $Session = $JsonParameters.PSobject.Properties["session"].value
        }

        $PSO = [PSCustomObject]@{
            "access" = ${Access}
            "factorLifetime" = ${FactorLifetime}
            "factorPromptMode" = ${FactorPromptMode}
            "rememberDeviceByDefault" = ${RememberDeviceByDefault}
            "requireFactor" = ${RequireFactor}
            "session" = ${Session}
        }

        return $PSO
    }

}


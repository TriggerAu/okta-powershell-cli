#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VarFilter
No description available.
.PARAMETER Format
No description available.
.PARAMETER MatchAttribute
No description available.
.PARAMETER MatchType
No description available.
.PARAMETER UserNameTemplate
No description available.
.OUTPUTS

PolicySubject<PSCustomObject>
#>

function Initialize-PolicySubject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarFilter},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Format},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MatchAttribute},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MatchType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserNameTemplate}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PolicySubject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "filter" = ${VarFilter}
            "format" = ${Format}
            "matchAttribute" = ${MatchAttribute}
            "matchType" = ${MatchType}
            "userNameTemplate" = ${UserNameTemplate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PolicySubject<PSCustomObject>

.DESCRIPTION

Convert from JSON to PolicySubject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PolicySubject<PSCustomObject>
#>
function ConvertFrom-JsonToPolicySubject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PolicySubject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PolicySubject
        $AllProperties = ("filter", "format", "matchAttribute", "matchType", "userNameTemplate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filter"))) { #optional property not found
            $VarFilter = $null
        } else {
            $VarFilter = $JsonParameters.PSobject.Properties["filter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "format"))) { #optional property not found
            $Format = $null
        } else {
            $Format = $JsonParameters.PSobject.Properties["format"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "matchAttribute"))) { #optional property not found
            $MatchAttribute = $null
        } else {
            $MatchAttribute = $JsonParameters.PSobject.Properties["matchAttribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "matchType"))) { #optional property not found
            $MatchType = $null
        } else {
            $MatchType = $JsonParameters.PSobject.Properties["matchType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userNameTemplate"))) { #optional property not found
            $UserNameTemplate = $null
        } else {
            $UserNameTemplate = $JsonParameters.PSobject.Properties["userNameTemplate"].value
        }

        $PSO = [PSCustomObject]@{
            "filter" = ${VarFilter}
            "format" = ${Format}
            "matchAttribute" = ${MatchAttribute}
            "matchType" = ${MatchType}
            "userNameTemplate" = ${UserNameTemplate}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ApplicationType
No description available.
.PARAMETER ClientUri
No description available.
.PARAMETER ConsentMethod
No description available.
.PARAMETER GrantTypes
No description available.
.PARAMETER IdpInitiatedLogin
No description available.
.PARAMETER InitiateLoginUri
No description available.
.PARAMETER IssuerMode
No description available.
.PARAMETER Jwks
No description available.
.PARAMETER LogoUri
No description available.
.PARAMETER PolicyUri
No description available.
.PARAMETER PostLogoutRedirectUris
No description available.
.PARAMETER RedirectUris
No description available.
.PARAMETER RefreshToken
No description available.
.PARAMETER ResponseTypes
No description available.
.PARAMETER TosUri
No description available.
.PARAMETER WildcardRedirect
No description available.
.OUTPUTS

OpenIdConnectApplicationSettingsClient<PSCustomObject>
#>

function Initialize-OpenIdConnectApplicationSettingsClient {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ApplicationType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientUri},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ConsentMethod},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${GrantTypes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IdpInitiatedLogin},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiateLoginUri},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IssuerMode},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Jwks},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LogoUri},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PolicyUri},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${PostLogoutRedirectUris},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RedirectUris},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RefreshToken},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ResponseTypes},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TosUri},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WildcardRedirect}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OpenIdConnectApplicationSettingsClient' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "application_type" = ${ApplicationType}
            "client_uri" = ${ClientUri}
            "consent_method" = ${ConsentMethod}
            "grant_types" = ${GrantTypes}
            "idp_initiated_login" = ${IdpInitiatedLogin}
            "initiate_login_uri" = ${InitiateLoginUri}
            "issuer_mode" = ${IssuerMode}
            "jwks" = ${Jwks}
            "logo_uri" = ${LogoUri}
            "policy_uri" = ${PolicyUri}
            "post_logout_redirect_uris" = ${PostLogoutRedirectUris}
            "redirect_uris" = ${RedirectUris}
            "refresh_token" = ${RefreshToken}
            "response_types" = ${ResponseTypes}
            "tos_uri" = ${TosUri}
            "wildcard_redirect" = ${WildcardRedirect}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OpenIdConnectApplicationSettingsClient<PSCustomObject>

.DESCRIPTION

Convert from JSON to OpenIdConnectApplicationSettingsClient<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OpenIdConnectApplicationSettingsClient<PSCustomObject>
#>
function ConvertFrom-JsonToOpenIdConnectApplicationSettingsClient {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OpenIdConnectApplicationSettingsClient' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OpenIdConnectApplicationSettingsClient
        $AllProperties = ("application_type", "client_uri", "consent_method", "grant_types", "idp_initiated_login", "initiate_login_uri", "issuer_mode", "jwks", "logo_uri", "policy_uri", "post_logout_redirect_uris", "redirect_uris", "refresh_token", "response_types", "tos_uri", "wildcard_redirect")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "application_type"))) { #optional property not found
            $ApplicationType = $null
        } else {
            $ApplicationType = $JsonParameters.PSobject.Properties["application_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "client_uri"))) { #optional property not found
            $ClientUri = $null
        } else {
            $ClientUri = $JsonParameters.PSobject.Properties["client_uri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "consent_method"))) { #optional property not found
            $ConsentMethod = $null
        } else {
            $ConsentMethod = $JsonParameters.PSobject.Properties["consent_method"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "grant_types"))) { #optional property not found
            $GrantTypes = $null
        } else {
            $GrantTypes = $JsonParameters.PSobject.Properties["grant_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "idp_initiated_login"))) { #optional property not found
            $IdpInitiatedLogin = $null
        } else {
            $IdpInitiatedLogin = $JsonParameters.PSobject.Properties["idp_initiated_login"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiate_login_uri"))) { #optional property not found
            $InitiateLoginUri = $null
        } else {
            $InitiateLoginUri = $JsonParameters.PSobject.Properties["initiate_login_uri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuer_mode"))) { #optional property not found
            $IssuerMode = $null
        } else {
            $IssuerMode = $JsonParameters.PSobject.Properties["issuer_mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jwks"))) { #optional property not found
            $Jwks = $null
        } else {
            $Jwks = $JsonParameters.PSobject.Properties["jwks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logo_uri"))) { #optional property not found
            $LogoUri = $null
        } else {
            $LogoUri = $JsonParameters.PSobject.Properties["logo_uri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "policy_uri"))) { #optional property not found
            $PolicyUri = $null
        } else {
            $PolicyUri = $JsonParameters.PSobject.Properties["policy_uri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "post_logout_redirect_uris"))) { #optional property not found
            $PostLogoutRedirectUris = $null
        } else {
            $PostLogoutRedirectUris = $JsonParameters.PSobject.Properties["post_logout_redirect_uris"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "redirect_uris"))) { #optional property not found
            $RedirectUris = $null
        } else {
            $RedirectUris = $JsonParameters.PSobject.Properties["redirect_uris"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "refresh_token"))) { #optional property not found
            $RefreshToken = $null
        } else {
            $RefreshToken = $JsonParameters.PSobject.Properties["refresh_token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "response_types"))) { #optional property not found
            $ResponseTypes = $null
        } else {
            $ResponseTypes = $JsonParameters.PSobject.Properties["response_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tos_uri"))) { #optional property not found
            $TosUri = $null
        } else {
            $TosUri = $JsonParameters.PSobject.Properties["tos_uri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wildcard_redirect"))) { #optional property not found
            $WildcardRedirect = $null
        } else {
            $WildcardRedirect = $JsonParameters.PSobject.Properties["wildcard_redirect"].value
        }

        $PSO = [PSCustomObject]@{
            "application_type" = ${ApplicationType}
            "client_uri" = ${ClientUri}
            "consent_method" = ${ConsentMethod}
            "grant_types" = ${GrantTypes}
            "idp_initiated_login" = ${IdpInitiatedLogin}
            "initiate_login_uri" = ${InitiateLoginUri}
            "issuer_mode" = ${IssuerMode}
            "jwks" = ${Jwks}
            "logo_uri" = ${LogoUri}
            "policy_uri" = ${PolicyUri}
            "post_logout_redirect_uris" = ${PostLogoutRedirectUris}
            "redirect_uris" = ${RedirectUris}
            "refresh_token" = ${RefreshToken}
            "response_types" = ${ResponseTypes}
            "tos_uri" = ${TosUri}
            "wildcard_redirect" = ${WildcardRedirect}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AttributeStatements
No description available.
.PARAMETER AudienceRestriction
No description available.
.PARAMETER AuthnContextClassRef
No description available.
.PARAMETER GroupFilter
No description available.
.PARAMETER GroupName
No description available.
.PARAMETER GroupValueFormat
No description available.
.PARAMETER NameIDFormat
No description available.
.PARAMETER Realm
No description available.
.PARAMETER SiteURL
No description available.
.PARAMETER UsernameAttribute
No description available.
.PARAMETER WReplyOverride
No description available.
.PARAMETER WReplyURL
No description available.
.OUTPUTS

WsFederationApplicationSettingsApplication<PSCustomObject>
#>

function Initialize-WsFederationApplicationSettingsApplication {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AttributeStatements},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AudienceRestriction},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuthnContextClassRef},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupFilter},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupValueFormat},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NameIDFormat},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Realm},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SiteURL},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UsernameAttribute},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${WReplyOverride},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WReplyURL}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WsFederationApplicationSettingsApplication' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "attributeStatements" = ${AttributeStatements}
            "audienceRestriction" = ${AudienceRestriction}
            "authnContextClassRef" = ${AuthnContextClassRef}
            "groupFilter" = ${GroupFilter}
            "groupName" = ${GroupName}
            "groupValueFormat" = ${GroupValueFormat}
            "nameIDFormat" = ${NameIDFormat}
            "realm" = ${Realm}
            "siteURL" = ${SiteURL}
            "usernameAttribute" = ${UsernameAttribute}
            "wReplyOverride" = ${WReplyOverride}
            "wReplyURL" = ${WReplyURL}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WsFederationApplicationSettingsApplication<PSCustomObject>

.DESCRIPTION

Convert from JSON to WsFederationApplicationSettingsApplication<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WsFederationApplicationSettingsApplication<PSCustomObject>
#>
function ConvertFrom-JsonToWsFederationApplicationSettingsApplication {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WsFederationApplicationSettingsApplication' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WsFederationApplicationSettingsApplication
        $AllProperties = ("attributeStatements", "audienceRestriction", "authnContextClassRef", "groupFilter", "groupName", "groupValueFormat", "nameIDFormat", "realm", "siteURL", "usernameAttribute", "wReplyOverride", "wReplyURL")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "attributeStatements"))) { #optional property not found
            $AttributeStatements = $null
        } else {
            $AttributeStatements = $JsonParameters.PSobject.Properties["attributeStatements"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "audienceRestriction"))) { #optional property not found
            $AudienceRestriction = $null
        } else {
            $AudienceRestriction = $JsonParameters.PSobject.Properties["audienceRestriction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authnContextClassRef"))) { #optional property not found
            $AuthnContextClassRef = $null
        } else {
            $AuthnContextClassRef = $JsonParameters.PSobject.Properties["authnContextClassRef"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupFilter"))) { #optional property not found
            $GroupFilter = $null
        } else {
            $GroupFilter = $JsonParameters.PSobject.Properties["groupFilter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupName"))) { #optional property not found
            $GroupName = $null
        } else {
            $GroupName = $JsonParameters.PSobject.Properties["groupName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groupValueFormat"))) { #optional property not found
            $GroupValueFormat = $null
        } else {
            $GroupValueFormat = $JsonParameters.PSobject.Properties["groupValueFormat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nameIDFormat"))) { #optional property not found
            $NameIDFormat = $null
        } else {
            $NameIDFormat = $JsonParameters.PSobject.Properties["nameIDFormat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "realm"))) { #optional property not found
            $Realm = $null
        } else {
            $Realm = $JsonParameters.PSobject.Properties["realm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteURL"))) { #optional property not found
            $SiteURL = $null
        } else {
            $SiteURL = $JsonParameters.PSobject.Properties["siteURL"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "usernameAttribute"))) { #optional property not found
            $UsernameAttribute = $null
        } else {
            $UsernameAttribute = $JsonParameters.PSobject.Properties["usernameAttribute"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wReplyOverride"))) { #optional property not found
            $WReplyOverride = $null
        } else {
            $WReplyOverride = $JsonParameters.PSobject.Properties["wReplyOverride"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wReplyURL"))) { #optional property not found
            $WReplyURL = $null
        } else {
            $WReplyURL = $JsonParameters.PSobject.Properties["wReplyURL"].value
        }

        $PSO = [PSCustomObject]@{
            "attributeStatements" = ${AttributeStatements}
            "audienceRestriction" = ${AudienceRestriction}
            "authnContextClassRef" = ${AuthnContextClassRef}
            "groupFilter" = ${GroupFilter}
            "groupName" = ${GroupName}
            "groupValueFormat" = ${GroupValueFormat}
            "nameIDFormat" = ${NameIDFormat}
            "realm" = ${Realm}
            "siteURL" = ${SiteURL}
            "usernameAttribute" = ${UsernameAttribute}
            "wReplyOverride" = ${WReplyOverride}
            "wReplyURL" = ${WReplyURL}
        }

        return $PSO
    }

}


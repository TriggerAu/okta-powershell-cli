#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BackgroundImage
No description available.
.PARAMETER EmailTemplateTouchPointVariant
No description available.
.PARAMETER EndUserDashboardTouchPointVariant
No description available.
.PARAMETER ErrorPageTouchPointVariant
No description available.
.PARAMETER LoadingPageTouchPointVariant
No description available.
.PARAMETER PrimaryColorContrastHex
No description available.
.PARAMETER PrimaryColorHex
No description available.
.PARAMETER SecondaryColorContrastHex
No description available.
.PARAMETER SecondaryColorHex
No description available.
.PARAMETER SignInPageTouchPointVariant
No description available.
.PARAMETER Links
No description available.
.OUTPUTS

Theme<PSCustomObject>
#>

function Initialize-Theme {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BackgroundImage},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EmailTemplateTouchPointVariant},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EndUserDashboardTouchPointVariant},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ErrorPageTouchPointVariant},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LoadingPageTouchPointVariant},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrimaryColorContrastHex},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PrimaryColorHex},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SecondaryColorContrastHex},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SecondaryColorHex},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SignInPageTouchPointVariant},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Links}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Theme' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "backgroundImage" = ${BackgroundImage}
            "emailTemplateTouchPointVariant" = ${EmailTemplateTouchPointVariant}
            "endUserDashboardTouchPointVariant" = ${EndUserDashboardTouchPointVariant}
            "errorPageTouchPointVariant" = ${ErrorPageTouchPointVariant}
            "loadingPageTouchPointVariant" = ${LoadingPageTouchPointVariant}
            "primaryColorContrastHex" = ${PrimaryColorContrastHex}
            "primaryColorHex" = ${PrimaryColorHex}
            "secondaryColorContrastHex" = ${SecondaryColorContrastHex}
            "secondaryColorHex" = ${SecondaryColorHex}
            "signInPageTouchPointVariant" = ${SignInPageTouchPointVariant}
            "_links" = ${Links}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Theme<PSCustomObject>

.DESCRIPTION

Convert from JSON to Theme<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Theme<PSCustomObject>
#>
function ConvertFrom-JsonToTheme {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Theme' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Theme
        $AllProperties = ("backgroundImage", "emailTemplateTouchPointVariant", "endUserDashboardTouchPointVariant", "errorPageTouchPointVariant", "loadingPageTouchPointVariant", "primaryColorContrastHex", "primaryColorHex", "secondaryColorContrastHex", "secondaryColorHex", "signInPageTouchPointVariant", "_links")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "backgroundImage"))) { #optional property not found
            $BackgroundImage = $null
        } else {
            $BackgroundImage = $JsonParameters.PSobject.Properties["backgroundImage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emailTemplateTouchPointVariant"))) { #optional property not found
            $EmailTemplateTouchPointVariant = $null
        } else {
            $EmailTemplateTouchPointVariant = $JsonParameters.PSobject.Properties["emailTemplateTouchPointVariant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endUserDashboardTouchPointVariant"))) { #optional property not found
            $EndUserDashboardTouchPointVariant = $null
        } else {
            $EndUserDashboardTouchPointVariant = $JsonParameters.PSobject.Properties["endUserDashboardTouchPointVariant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "errorPageTouchPointVariant"))) { #optional property not found
            $ErrorPageTouchPointVariant = $null
        } else {
            $ErrorPageTouchPointVariant = $JsonParameters.PSobject.Properties["errorPageTouchPointVariant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loadingPageTouchPointVariant"))) { #optional property not found
            $LoadingPageTouchPointVariant = $null
        } else {
            $LoadingPageTouchPointVariant = $JsonParameters.PSobject.Properties["loadingPageTouchPointVariant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primaryColorContrastHex"))) { #optional property not found
            $PrimaryColorContrastHex = $null
        } else {
            $PrimaryColorContrastHex = $JsonParameters.PSobject.Properties["primaryColorContrastHex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primaryColorHex"))) { #optional property not found
            $PrimaryColorHex = $null
        } else {
            $PrimaryColorHex = $JsonParameters.PSobject.Properties["primaryColorHex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secondaryColorContrastHex"))) { #optional property not found
            $SecondaryColorContrastHex = $null
        } else {
            $SecondaryColorContrastHex = $JsonParameters.PSobject.Properties["secondaryColorContrastHex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secondaryColorHex"))) { #optional property not found
            $SecondaryColorHex = $null
        } else {
            $SecondaryColorHex = $JsonParameters.PSobject.Properties["secondaryColorHex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "signInPageTouchPointVariant"))) { #optional property not found
            $SignInPageTouchPointVariant = $null
        } else {
            $SignInPageTouchPointVariant = $JsonParameters.PSobject.Properties["signInPageTouchPointVariant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_links"))) { #optional property not found
            $Links = $null
        } else {
            $Links = $JsonParameters.PSobject.Properties["_links"].value
        }

        $PSO = [PSCustomObject]@{
            "backgroundImage" = ${BackgroundImage}
            "emailTemplateTouchPointVariant" = ${EmailTemplateTouchPointVariant}
            "endUserDashboardTouchPointVariant" = ${EndUserDashboardTouchPointVariant}
            "errorPageTouchPointVariant" = ${ErrorPageTouchPointVariant}
            "loadingPageTouchPointVariant" = ${LoadingPageTouchPointVariant}
            "primaryColorContrastHex" = ${PrimaryColorContrastHex}
            "primaryColorHex" = ${PrimaryColorHex}
            "secondaryColorContrastHex" = ${SecondaryColorContrastHex}
            "secondaryColorHex" = ${SecondaryColorHex}
            "signInPageTouchPointVariant" = ${SignInPageTouchPointVariant}
            "_links" = ${Links}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Signing
No description available.
.PARAMETER UserNameTemplate
No description available.
.PARAMETER Password
No description available.
.PARAMETER RevealPassword
No description available.
.PARAMETER Scheme
No description available.
.PARAMETER UserName
No description available.
.OUTPUTS

SchemeApplicationCredentials<PSCustomObject>
#>

function Initialize-SchemeApplicationCredentials {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Signing},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserNameTemplate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Password},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RevealPassword},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Scheme},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SchemeApplicationCredentials' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "signing" = ${Signing}
            "userNameTemplate" = ${UserNameTemplate}
            "password" = ${Password}
            "revealPassword" = ${RevealPassword}
            "scheme" = ${Scheme}
            "userName" = ${UserName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SchemeApplicationCredentials<PSCustomObject>

.DESCRIPTION

Convert from JSON to SchemeApplicationCredentials<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SchemeApplicationCredentials<PSCustomObject>
#>
function ConvertFrom-JsonToSchemeApplicationCredentials {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SchemeApplicationCredentials' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SchemeApplicationCredentials
        $AllProperties = ("signing", "userNameTemplate", "password", "revealPassword", "scheme", "userName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "signing"))) { #optional property not found
            $Signing = $null
        } else {
            $Signing = $JsonParameters.PSobject.Properties["signing"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userNameTemplate"))) { #optional property not found
            $UserNameTemplate = $null
        } else {
            $UserNameTemplate = $JsonParameters.PSobject.Properties["userNameTemplate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) { #optional property not found
            $Password = $null
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "revealPassword"))) { #optional property not found
            $RevealPassword = $null
        } else {
            $RevealPassword = $JsonParameters.PSobject.Properties["revealPassword"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scheme"))) { #optional property not found
            $Scheme = $null
        } else {
            $Scheme = $JsonParameters.PSobject.Properties["scheme"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userName"))) { #optional property not found
            $UserName = $null
        } else {
            $UserName = $JsonParameters.PSobject.Properties["userName"].value
        }

        $PSO = [PSCustomObject]@{
            "signing" = ${Signing}
            "userNameTemplate" = ${UserNameTemplate}
            "password" = ${Password}
            "revealPassword" = ${RevealPassword}
            "scheme" = ${Scheme}
            "userName" = ${UserName}
        }

        return $PSO
    }

}


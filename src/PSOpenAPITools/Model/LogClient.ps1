#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Device
No description available.
.PARAMETER GeographicalContext
No description available.
.PARAMETER Id
No description available.
.PARAMETER IpAddress
No description available.
.PARAMETER UserAgent
No description available.
.PARAMETER Zone
No description available.
.OUTPUTS

LogClient<PSCustomObject>
#>

function Initialize-LogClient {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Device},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${GeographicalContext},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IpAddress},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserAgent},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Zone}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => LogClient' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "device" = ${Device}
            "geographicalContext" = ${GeographicalContext}
            "id" = ${Id}
            "ipAddress" = ${IpAddress}
            "userAgent" = ${UserAgent}
            "zone" = ${Zone}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to LogClient<PSCustomObject>

.DESCRIPTION

Convert from JSON to LogClient<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

LogClient<PSCustomObject>
#>
function ConvertFrom-JsonToLogClient {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => LogClient' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LogClient
        $AllProperties = ("device", "geographicalContext", "id", "ipAddress", "userAgent", "zone")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device"))) { #optional property not found
            $Device = $null
        } else {
            $Device = $JsonParameters.PSobject.Properties["device"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "geographicalContext"))) { #optional property not found
            $GeographicalContext = $null
        } else {
            $GeographicalContext = $JsonParameters.PSobject.Properties["geographicalContext"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipAddress"))) { #optional property not found
            $IpAddress = $null
        } else {
            $IpAddress = $JsonParameters.PSobject.Properties["ipAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userAgent"))) { #optional property not found
            $UserAgent = $null
        } else {
            $UserAgent = $JsonParameters.PSobject.Properties["userAgent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "zone"))) { #optional property not found
            $Zone = $null
        } else {
            $Zone = $JsonParameters.PSobject.Properties["zone"].value
        }

        $PSO = [PSCustomObject]@{
            "device" = ${Device}
            "geographicalContext" = ${GeographicalContext}
            "id" = ${Id}
            "ipAddress" = ${IpAddress}
            "userAgent" = ${UserAgent}
            "zone" = ${Zone}
        }

        return $PSO
    }

}


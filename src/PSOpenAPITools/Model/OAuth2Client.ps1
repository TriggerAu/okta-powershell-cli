#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ClientId
No description available.
.PARAMETER ClientName
No description available.
.PARAMETER ClientUri
No description available.
.PARAMETER LogoUri
No description available.
.PARAMETER Links
No description available.
.OUTPUTS

OAuth2Client<PSCustomObject>
#>

function Initialize-OAuth2Client {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientUri},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LogoUri},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Links}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OAuth2Client' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "client_id" = ${ClientId}
            "client_name" = ${ClientName}
            "client_uri" = ${ClientUri}
            "logo_uri" = ${LogoUri}
            "_links" = ${Links}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OAuth2Client<PSCustomObject>

.DESCRIPTION

Convert from JSON to OAuth2Client<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OAuth2Client<PSCustomObject>
#>
function ConvertFrom-JsonToOAuth2Client {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OAuth2Client' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OAuth2Client
        $AllProperties = ("client_id", "client_name", "client_uri", "logo_uri", "_links")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "client_id"))) { #optional property not found
            $ClientId = $null
        } else {
            $ClientId = $JsonParameters.PSobject.Properties["client_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "client_name"))) { #optional property not found
            $ClientName = $null
        } else {
            $ClientName = $JsonParameters.PSobject.Properties["client_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "client_uri"))) { #optional property not found
            $ClientUri = $null
        } else {
            $ClientUri = $JsonParameters.PSobject.Properties["client_uri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logo_uri"))) { #optional property not found
            $LogoUri = $null
        } else {
            $LogoUri = $JsonParameters.PSobject.Properties["logo_uri"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_links"))) { #optional property not found
            $Links = $null
        } else {
            $Links = $JsonParameters.PSobject.Properties["_links"].value
        }

        $PSO = [PSCustomObject]@{
            "client_id" = ${ClientId}
            "client_name" = ${ClientName}
            "client_uri" = ${ClientUri}
            "logo_uri" = ${LogoUri}
            "_links" = ${Links}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Audience
No description available.
.PARAMETER Issuer
No description available.
.PARAMETER Kid
No description available.
.PARAMETER Revocation
No description available.
.PARAMETER RevocationCacheLifetime
No description available.
.OUTPUTS

IdentityProviderCredentialsTrust<PSCustomObject>
#>

function Initialize-IdentityProviderCredentialsTrust {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Audience},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Issuer},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Kid},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Revocation},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RevocationCacheLifetime}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => IdentityProviderCredentialsTrust' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "audience" = ${Audience}
            "issuer" = ${Issuer}
            "kid" = ${Kid}
            "revocation" = ${Revocation}
            "revocationCacheLifetime" = ${RevocationCacheLifetime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IdentityProviderCredentialsTrust<PSCustomObject>

.DESCRIPTION

Convert from JSON to IdentityProviderCredentialsTrust<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IdentityProviderCredentialsTrust<PSCustomObject>
#>
function ConvertFrom-JsonToIdentityProviderCredentialsTrust {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => IdentityProviderCredentialsTrust' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IdentityProviderCredentialsTrust
        $AllProperties = ("audience", "issuer", "kid", "revocation", "revocationCacheLifetime")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "audience"))) { #optional property not found
            $Audience = $null
        } else {
            $Audience = $JsonParameters.PSobject.Properties["audience"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuer"))) { #optional property not found
            $Issuer = $null
        } else {
            $Issuer = $JsonParameters.PSobject.Properties["issuer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "kid"))) { #optional property not found
            $Kid = $null
        } else {
            $Kid = $JsonParameters.PSobject.Properties["kid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "revocation"))) { #optional property not found
            $Revocation = $null
        } else {
            $Revocation = $JsonParameters.PSobject.Properties["revocation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "revocationCacheLifetime"))) { #optional property not found
            $RevocationCacheLifetime = $null
        } else {
            $RevocationCacheLifetime = $JsonParameters.PSobject.Properties["revocationCacheLifetime"].value
        }

        $PSO = [PSCustomObject]@{
            "audience" = ${Audience}
            "issuer" = ${Issuer}
            "kid" = ${Kid}
            "revocation" = ${Revocation}
            "revocationCacheLifetime" = ${RevocationCacheLifetime}
        }

        return $PSO
    }

}


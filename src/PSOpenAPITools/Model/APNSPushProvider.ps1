#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER LastUpdatedDate
No description available.
.PARAMETER Name
Display name of the push provider
.PARAMETER ProviderType
No description available.
.PARAMETER Links
No description available.
.PARAMETER Configuration
No description available.
.OUTPUTS

APNSPushProvider<PSCustomObject>
#>

function Initialize-APNSPushProvider {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastUpdatedDate},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProviderType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Links},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Configuration}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => APNSPushProvider' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "lastUpdatedDate" = ${LastUpdatedDate}
            "name" = ${Name}
            "providerType" = ${ProviderType}
            "_links" = ${Links}
            "configuration" = ${Configuration}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to APNSPushProvider<PSCustomObject>

.DESCRIPTION

Convert from JSON to APNSPushProvider<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

APNSPushProvider<PSCustomObject>
#>
function ConvertFrom-JsonToAPNSPushProvider {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => APNSPushProvider' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in APNSPushProvider
        $AllProperties = ("id", "lastUpdatedDate", "name", "providerType", "_links", "configuration")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUpdatedDate"))) { #optional property not found
            $LastUpdatedDate = $null
        } else {
            $LastUpdatedDate = $JsonParameters.PSobject.Properties["lastUpdatedDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "providerType"))) { #optional property not found
            $ProviderType = $null
        } else {
            $ProviderType = $JsonParameters.PSobject.Properties["providerType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_links"))) { #optional property not found
            $Links = $null
        } else {
            $Links = $JsonParameters.PSobject.Properties["_links"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "configuration"))) { #optional property not found
            $Configuration = $null
        } else {
            $Configuration = $JsonParameters.PSobject.Properties["configuration"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "lastUpdatedDate" = ${LastUpdatedDate}
            "name" = ${Name}
            "providerType" = ${ProviderType}
            "_links" = ${Links}
            "configuration" = ${Configuration}
        }

        return $PSO
    }

}


#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceBound
No description available.
.PARAMETER HardwareProtection
No description available.
.PARAMETER PhishingResistant
No description available.
.PARAMETER UserPresence
No description available.
.OUTPUTS

PossessionConstraintAllOf<PSCustomObject>
#>

function Initialize-PossessionConstraintAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeviceBound},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HardwareProtection},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PhishingResistant},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserPresence}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PossessionConstraintAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "deviceBound" = ${DeviceBound}
            "hardwareProtection" = ${HardwareProtection}
            "phishingResistant" = ${PhishingResistant}
            "userPresence" = ${UserPresence}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PossessionConstraintAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to PossessionConstraintAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PossessionConstraintAllOf<PSCustomObject>
#>
function ConvertFrom-JsonToPossessionConstraintAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PossessionConstraintAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PossessionConstraintAllOf
        $AllProperties = ("deviceBound", "hardwareProtection", "phishingResistant", "userPresence")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deviceBound"))) { #optional property not found
            $DeviceBound = $null
        } else {
            $DeviceBound = $JsonParameters.PSobject.Properties["deviceBound"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hardwareProtection"))) { #optional property not found
            $HardwareProtection = $null
        } else {
            $HardwareProtection = $JsonParameters.PSobject.Properties["hardwareProtection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phishingResistant"))) { #optional property not found
            $PhishingResistant = $null
        } else {
            $PhishingResistant = $JsonParameters.PSobject.Properties["phishingResistant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userPresence"))) { #optional property not found
            $UserPresence = $null
        } else {
            $UserPresence = $JsonParameters.PSobject.Properties["userPresence"].value
        }

        $PSO = [PSCustomObject]@{
            "deviceBound" = ${DeviceBound}
            "hardwareProtection" = ${HardwareProtection}
            "phishingResistant" = ${PhishingResistant}
            "userPresence" = ${UserPresence}
        }

        return $PSO
    }

}


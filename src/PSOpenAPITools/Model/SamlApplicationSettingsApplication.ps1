#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AcsUrl
No description available.
.PARAMETER AudRestriction
No description available.
.PARAMETER BaseUrl
No description available.
.OUTPUTS

SamlApplicationSettingsApplication<PSCustomObject>
#>

function Initialize-SamlApplicationSettingsApplication {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AcsUrl},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AudRestriction},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BaseUrl}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SamlApplicationSettingsApplication' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "acsUrl" = ${AcsUrl}
            "audRestriction" = ${AudRestriction}
            "baseUrl" = ${BaseUrl}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SamlApplicationSettingsApplication<PSCustomObject>

.DESCRIPTION

Convert from JSON to SamlApplicationSettingsApplication<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SamlApplicationSettingsApplication<PSCustomObject>
#>
function ConvertFrom-JsonToSamlApplicationSettingsApplication {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SamlApplicationSettingsApplication' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SamlApplicationSettingsApplication
        $AllProperties = ("acsUrl", "audRestriction", "baseUrl")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "acsUrl"))) { #optional property not found
            $AcsUrl = $null
        } else {
            $AcsUrl = $JsonParameters.PSobject.Properties["acsUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "audRestriction"))) { #optional property not found
            $AudRestriction = $null
        } else {
            $AudRestriction = $JsonParameters.PSobject.Properties["audRestriction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "baseUrl"))) { #optional property not found
            $BaseUrl = $null
        } else {
            $BaseUrl = $JsonParameters.PSobject.Properties["baseUrl"].value
        }

        $PSO = [PSCustomObject]@{
            "acsUrl" = ${AcsUrl}
            "audRestriction" = ${AudRestriction}
            "baseUrl" = ${BaseUrl}
        }

        return $PSO
    }

}


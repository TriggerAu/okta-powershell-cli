#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Algorithm
No description available.
.PARAMETER Salt
No description available.
.PARAMETER SaltOrder
No description available.
.PARAMETER Value
No description available.
.PARAMETER WorkFactor
No description available.
.OUTPUTS

PasswordCredentialHash<PSCustomObject>
#>

function Initialize-PasswordCredentialHash {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Algorithm},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Salt},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SaltOrder},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${WorkFactor}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PasswordCredentialHash' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "algorithm" = ${Algorithm}
            "salt" = ${Salt}
            "saltOrder" = ${SaltOrder}
            "value" = ${Value}
            "workFactor" = ${WorkFactor}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PasswordCredentialHash<PSCustomObject>

.DESCRIPTION

Convert from JSON to PasswordCredentialHash<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PasswordCredentialHash<PSCustomObject>
#>
function ConvertFrom-JsonToPasswordCredentialHash {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PasswordCredentialHash' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PasswordCredentialHash
        $AllProperties = ("algorithm", "salt", "saltOrder", "value", "workFactor")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "algorithm"))) { #optional property not found
            $Algorithm = $null
        } else {
            $Algorithm = $JsonParameters.PSobject.Properties["algorithm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "salt"))) { #optional property not found
            $Salt = $null
        } else {
            $Salt = $JsonParameters.PSobject.Properties["salt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "saltOrder"))) { #optional property not found
            $SaltOrder = $null
        } else {
            $SaltOrder = $JsonParameters.PSobject.Properties["saltOrder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "workFactor"))) { #optional property not found
            $WorkFactor = $null
        } else {
            $WorkFactor = $JsonParameters.PSobject.Properties["workFactor"].value
        }

        $PSO = [PSCustomObject]@{
            "algorithm" = ${Algorithm}
            "salt" = ${Salt}
            "saltOrder" = ${SaltOrder}
            "value" = ${Value}
            "workFactor" = ${WorkFactor}
        }

        return $PSO
    }

}


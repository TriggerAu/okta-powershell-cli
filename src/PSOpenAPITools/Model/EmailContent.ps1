#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Body
The email's HTML body. May contain [variable references](https://velocity.apache.org/engine/1.7/user-guide.html#references).
.PARAMETER Subject
The email's subject. May contain [variable references](https://velocity.apache.org/engine/1.7/user-guide.html#references).
.OUTPUTS

EmailContent<PSCustomObject>
#>

function Initialize-EmailContent {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Body},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Subject}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EmailContent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Body) {
            throw "invalid value for 'Body', 'Body' cannot be null."
        }

        if ($null -eq $Subject) {
            throw "invalid value for 'Subject', 'Subject' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "body" = ${Body}
            "subject" = ${Subject}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EmailContent<PSCustomObject>

.DESCRIPTION

Convert from JSON to EmailContent<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EmailContent<PSCustomObject>
#>
function ConvertFrom-JsonToEmailContent {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EmailContent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EmailContent
        $AllProperties = ("body", "subject")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'body' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body"))) {
            throw "Error! JSON cannot be serialized due to the required property 'body' missing."
        } else {
            $Body = $JsonParameters.PSobject.Properties["body"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subject"))) {
            throw "Error! JSON cannot be serialized due to the required property 'subject' missing."
        } else {
            $Subject = $JsonParameters.PSobject.Properties["subject"].value
        }

        $PSO = [PSCustomObject]@{
            "body" = ${Body}
            "subject" = ${Subject}
        }

        return $PSO
    }

}


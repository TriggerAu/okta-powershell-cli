#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AppLinks
No description available.
.PARAMETER AutoLaunch
No description available.
.PARAMETER AutoSubmitToolbar
No description available.
.PARAMETER Hide
No description available.
.OUTPUTS

ApplicationVisibility<PSCustomObject>
#>

function Initialize-ApplicationVisibility {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${AppLinks},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoLaunch},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AutoSubmitToolbar},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Hide}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApplicationVisibility' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "appLinks" = ${AppLinks}
            "autoLaunch" = ${AutoLaunch}
            "autoSubmitToolbar" = ${AutoSubmitToolbar}
            "hide" = ${Hide}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApplicationVisibility<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApplicationVisibility<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApplicationVisibility<PSCustomObject>
#>
function ConvertFrom-JsonToApplicationVisibility {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApplicationVisibility' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApplicationVisibility
        $AllProperties = ("appLinks", "autoLaunch", "autoSubmitToolbar", "hide")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appLinks"))) { #optional property not found
            $AppLinks = $null
        } else {
            $AppLinks = $JsonParameters.PSobject.Properties["appLinks"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoLaunch"))) { #optional property not found
            $AutoLaunch = $null
        } else {
            $AutoLaunch = $JsonParameters.PSobject.Properties["autoLaunch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "autoSubmitToolbar"))) { #optional property not found
            $AutoSubmitToolbar = $null
        } else {
            $AutoSubmitToolbar = $JsonParameters.PSobject.Properties["autoSubmitToolbar"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hide"))) { #optional property not found
            $Hide = $null
        } else {
            $Hide = $JsonParameters.PSobject.Properties["hide"].value
        }

        $PSO = [PSCustomObject]@{
            "appLinks" = ${AppLinks}
            "autoLaunch" = ${AutoLaunch}
            "autoSubmitToolbar" = ${AutoSubmitToolbar}
            "hide" = ${Hide}
        }

        return $PSO
    }

}


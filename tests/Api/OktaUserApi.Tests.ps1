#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#
BeforeAll {
    Import-Module -Name '.\src\Okta.PowerShell'
}

Describe -tag 'Okta.PowerShell' -name 'OktaUserApi' {
    Context 'New-OktaUser' {       
        It 'Test Initialize-OktaCreateUserRequest' {
            $UserProfile = [PSCustomObject]@{
                firstName = 'John'
                lastName = 'Doe'
                login = 'john.doe@mail.com'
                email = 'john.doe@mail.com'
            }

            $CreateUserRequest = Initialize-OktaCreateUserRequest -VarProfile $UserProfile -GroupIds 'foo'
            $CreateUserRequest.GroupIds.Contains('foo') | Should -Be True 
            $CreateUserRequest.Profile.FirstName | Should -Be 'John'
            $CreateUserRequest.Profile.LastName | Should -Be 'Doe'
            $CreateUserRequest.Profile.Login | Should -Be 'john.doe@mail.com'
            $CreateUserRequest.Profile.Email | Should -Be 'john.doe@mail.com'
        }

        It 'Test New-OktaUser without query params' {     
            $Content = '{"id":"00u8zkhk9tWf3aWsq1d7","status":"ACTIVE","created":"2023-07-19T16:22:01.000Z","activated":"2023-07-19T16:22:02.000Z","statusChanged":"2023-07-19T16:22:02.000Z","lastLogin":null,"lastUpdated":"2023-07-19T16:22:02.000Z","passwordChanged":"2023-07-19T16:22:02.000Z","type":{"id":"oty1fddpcr6cnPEPG1d7"},"profile":{"firstName":"John","lastName":"Doe","mobilePhone":null,"nickName":"johny-CreateUserWithPasswordImportInlineHookOptions-elqhxp","secondEmail":null,"login":"john.doe@mail.com","email":"john.doe@mail.com"},"credentials":{"password":{},"provider":{"type":"IMPORT","name":"IMPORT"}},"_links":{"suspend":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/suspend","method":"POST"},"schema":{"href":"https://testorg.com/api/v1/meta/schemas/user/osc1fddpcr6cnPEPG1d7"},"resetPassword":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/reset_password","method":"POST"},"forgotPassword":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/credentials/forgot_password","method":"POST"},"expirePassword":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/expire_password","method":"POST"},"changeRecoveryQuestion":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/credentials/change_recovery_question","method":"POST"},"self":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7"},"resetFactors":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/reset_factors","method":"POST"},"type":{"href":"https://testorg.com/api/v1/meta/types/user/oty1fddpcr6cnPEPG1d7"},"changePassword":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/credentials/change_password","method":"POST"},"deactivate":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/deactivate","method":"POST"}}}' | ConvertFrom-Json
            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $UserProfile = [PSCustomObject]@{
                firstName = 'John'
                lastName = 'Doe'
                login = 'john.doe@mail.com'
                email = 'john.doe@mail.com'
            }

            $CreateUserRequest = Initialize-OktaCreateUserRequest -VarProfile $UserProfile -GroupIds 'foo'
            $TestResult = New-OktaUser -Body $CreateUserRequest

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1 -Scope It -ParameterFilter {
                $QueryParameters.Count -eq 0
            }


            $TestResult.Id | Should -Be "00u8zkhk9tWf3aWsq1d7"
            $TestResult.Status | Should -Be 'ACTIVE'        
            $TestResult.Profile.FirstName | Should -Be 'John'
            $TestResult.Profile.LastName | Should -Be 'Doe'
            $TestResult.Profile.Login | Should -Be 'john.doe@mail.com'
            $TestResult.Profile.Email | Should -Be 'john.doe@mail.com'
            $TestResult._Links | Should -Not -BeNullOrEmpty
        }

        It 'Test New-OktaUser with query params' -ForEach @(
            @{ ActivateParam = $true; ProviderParam = $true; NextLoginParam = "changePassword"}
            @{ ActivateParam = $false; ProviderParam = $false; NextLoginParam = "changePassword1"}
            @{ ActivateParam = $true; ProviderParam = $false; NextLoginParam = "changePassword2"}
            @{ ActivateParam = $false; ProviderParam = $true; NextLoginParam = "changePassword3"}
            @{ ActivateParam = $null; ProviderParam = $null; NextLoginParam = "changePassword4"}
            @{ ActivateParam = $null; ProviderParam = $false; NextLoginParam = "changePassword5"}
            @{ ActivateParam = $null; ProviderParam = $true; NextLoginParam = "changePassword6"}
            @{ ActivateParam = $true; ProviderParam = $null; NextLoginParam = "changePassword7"}
            @{ ActivateParam = $false; ProviderParam = $null; NextLoginParam = "changePassword8"}
        )   {     
            $Content = '{"id":"00u8zkhk9tWf3aWsq1d7","status":"ACTIVE","created":"2023-07-19T16:22:01.000Z","activated":"2023-07-19T16:22:02.000Z","statusChanged":"2023-07-19T16:22:02.000Z","lastLogin":null,"lastUpdated":"2023-07-19T16:22:02.000Z","passwordChanged":"2023-07-19T16:22:02.000Z","type":{"id":"oty1fddpcr6cnPEPG1d7"},"profile":{"firstName":"John","lastName":"Doe","mobilePhone":null,"nickName":"johny-CreateUserWithPasswordImportInlineHookOptions-elqhxp","secondEmail":null,"login":"john.doe@mail.com","email":"john.doe@mail.com"},"credentials":{"password":{},"provider":{"type":"IMPORT","name":"IMPORT"}},"_links":{"suspend":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/suspend","method":"POST"},"schema":{"href":"https://testorg.com/api/v1/meta/schemas/user/osc1fddpcr6cnPEPG1d7"},"resetPassword":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/reset_password","method":"POST"},"forgotPassword":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/credentials/forgot_password","method":"POST"},"expirePassword":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/expire_password","method":"POST"},"changeRecoveryQuestion":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/credentials/change_recovery_question","method":"POST"},"self":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7"},"resetFactors":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/reset_factors","method":"POST"},"type":{"href":"https://testorg.com/api/v1/meta/types/user/oty1fddpcr6cnPEPG1d7"},"changePassword":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/credentials/change_password","method":"POST"},"deactivate":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/deactivate","method":"POST"}}}' | ConvertFrom-Json
            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $UserProfile = [PSCustomObject]@{
                firstName = 'John'
                lastName = 'Doe'
                login = 'john.doe@mail.com'
                email = 'john.doe@mail.com'
            }

            $CreateUserRequest = Initialize-OktaCreateUserRequest -VarProfile $UserProfile -GroupIds 'foo'
            New-OktaUser -Body $CreateUserRequest -Activate $ActivateParam -Provider $ProviderParam -NextLogin $NextLoginParam

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1 -Scope It -ParameterFilter {
                $null -ne $QueryParameters -and
                $QueryParameters['activate']  -eq $ActivateParam -and
                $QueryParameters['provider']  -eq $ProviderParam -and
                $QueryParameters['nextLogin'] -eq $NextLoginParam
            }
        }

        It 'Test New-OktaUser -withHttpInfo' {     
            $Content = '{"id":"00u8zkhk9tWf3aWsq1d7","status":"ACTIVE","created":"2023-07-19T16:22:01.000Z","activated":"2023-07-19T16:22:02.000Z","statusChanged":"2023-07-19T16:22:02.000Z","lastLogin":null,"lastUpdated":"2023-07-19T16:22:02.000Z","passwordChanged":"2023-07-19T16:22:02.000Z","type":{"id":"oty1fddpcr6cnPEPG1d7"},"profile":{"firstName":"John","lastName":"Doe","mobilePhone":null,"nickName":"johny-CreateUserWithPasswordImportInlineHookOptions-elqhxp","secondEmail":null,"login":"john.doe@mail.com","email":"john.doe@mail.com"},"credentials":{"password":{},"provider":{"type":"IMPORT","name":"IMPORT"}},"_links":{"suspend":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/suspend","method":"POST"},"schema":{"href":"https://testorg.com/api/v1/meta/schemas/user/osc1fddpcr6cnPEPG1d7"},"resetPassword":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/reset_password","method":"POST"},"forgotPassword":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/credentials/forgot_password","method":"POST"},"expirePassword":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/expire_password","method":"POST"},"changeRecoveryQuestion":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/credentials/change_recovery_question","method":"POST"},"self":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7"},"resetFactors":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/reset_factors","method":"POST"},"type":{"href":"https://testorg.com/api/v1/meta/types/user/oty1fddpcr6cnPEPG1d7"},"changePassword":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/credentials/change_password","method":"POST"},"deactivate":{"href":"https://testorg.com/api/v1/users/00u8zkhk9tWf3aWsq1d7/lifecycle/deactivate","method":"POST"}}}' | ConvertFrom-Json
            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $UserProfile = [PSCustomObject]@{
                firstName = 'John'
                lastName = 'Doe'
                login = 'john.doe@mail.com'
                email = 'john.doe@mail.com'
            }

            $CreateUserRequest = Initialize-OktaCreateUserRequest -VarProfile $UserProfile -GroupIds 'foo' 
            $TestResult = New-OktaUser -Body $CreateUserRequest -WithHttpInfo

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1
            $TestResult.StatusCode | Should -Be 200
            $TestResult.Headers | Should -Be -Not $null
            $TestResult.Response.Id | Should -Be "00u8zkhk9tWf3aWsq1d7"
            $TestResult.Response.Status | Should -Be 'ACTIVE'        
            $TestResult.Response.Profile.FirstName | Should -Be 'John'
            $TestResult.Response.Profile.LastName | Should -Be 'Doe'
            $TestResult.Response.Profile.Login | Should -Be 'john.doe@mail.com'
            $TestResult.Response.Profile.Email | Should -Be 'john.doe@mail.com'
            $TestResult.Response._Links | Should -Not -BeNullOrEmpty
        }

        It 'Test New-User propagates failures from inner modules' {

            $UserProfile = [PSCustomObject]@{
                firstName = 'John'
                lastName = 'Doe'
                login = 'john.doe@mail.com'
                email = 'john.doe@mail.com'
            }
            
            Mock -ModuleName Okta.PowerShell Invoke-WebRequest {  throw 'Error Test'} -Verifiable 
            
            $CreateUserRequest = Initialize-OktaCreateUserRequest -VarProfile $UserProfile -GroupIds 'foo'
           
            { New-OktaUser -Body $CreateUserRequest } | Should -Throw -ExpectedMessage 'Error Test'

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-WebRequest -Times 1
        }

        It 'Test New-User fails with missing mandatory params' {
           
            { New-OktaUser } | Should -Throw -ExpectedMessage 'Error! The required parameter Body missing when calling createUser.'
        }
    }

    Context 'Invoke-OktaDeactivateOrDeleteUser' {
        It 'Test Invoke-OktaDeactivateOrDeleteUser' -ForEach @(
            @{ SendEmail = $False; Expected = 200}
            @{ Name = $True; Expected = 200}) {
            
            $Response = @{
                Response   = @{} 
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable
            
            $TestResult = Invoke-OktaDeactivateOrDeleteUser -UserId "TEST_VALUE" -SendEmail $SendEmail -WithHttpInfo

            $TestResult.StatusCode | Should -Be $Expected
            
            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1
        }
    }

    Context 'Get-OktaUser' {
        It 'Test Get-OktaUser' {
            $Content = '{"id":"00u8zn2tz7xE1AsSl1d7","status":"DEPROVISIONED","created":"2023-07-19T19:27:41.000Z","activated":"2023-07-19T19:27:42.000Z","statusChanged":"2023-07-19T19:27:43.000Z","lastLogin":null,"lastUpdated":"2023-07-19T19:27:43.000Z","passwordChanged":"2023-07-19T19:27:42.000Z","type":{"id":"oty1fddpcr6cnPEPG1d7"},"profile":{"firstName":"John","lastName":"Doe","mobilePhone":null,"nickName":"johny-ActivateUser-407005a6-09cd-4c8a-bf52-e145d44f320a","secondEmail":null,"login":"john.doe@mail.com","email":"john.doe@mail.com"},"credentials":{"provider":{"type":"OKTA","name":"OKTA"}},"_links":{"schema":{"href":"https://testorg.com/api/v1/meta/schemas/user/osc1fddpcr6cnPEPG1d7"},"activate":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7/lifecycle/activate","method":"POST"},"self":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7"},"resetFactors":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7/lifecycle/reset_factors","method":"POST"},"type":{"href":"https://testorg.com/api/v1/meta/types/user/oty1fddpcr6cnPEPG1d7"},"delete":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7","method":"DELETE"}}}' | ConvertFrom-Json
            
            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $TestResult = Get-OktaUser -UserId "foo"
            
            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1

            $TestResult.Id | Should -Be "00u8zn2tz7xE1AsSl1d7"
            $TestResult.Status | Should -Be 'DEPROVISIONED'        
            $TestResult.Profile.FirstName | Should -Be 'John'
            $TestResult.Profile.LastName | Should -Be 'Doe'
            $TestResult.Profile.Login | Should -Be 'john.doe@mail.com'
            $TestResult.Profile.Email | Should -Be 'john.doe@mail.com'
            $TestResult._Links | Should -Not -BeNullOrEmpty
        }
    }

    Context 'Invoke-OktaListUsers' {
        It 'Test Invoke-OktaListUsers' {
            
            $Content = '[{"id":"00u8zn2tz7xE1AsSl1d7","status":"DEPROVISIONED","created":"2023-07-19T19:27:41.000Z","activated":"2023-07-19T19:27:42.000Z","statusChanged":"2023-07-19T19:27:43.000Z","lastLogin":null,"lastUpdated":"2023-07-19T19:27:43.000Z","passwordChanged":"2023-07-19T19:27:42.000Z","type":{"id":"oty1fddpcr6cnPEPG1d7"},"profile":{"firstName":"John","lastName":"Doe","mobilePhone":null,"nickName":"johny-ActivateUser-407005a6-09cd-4c8a-bf52-e145d44f320a","secondEmail":null,"login":"john.doe@mail.com","email":"john.doe@mail.com"},"credentials":{"provider":{"type":"OKTA","name":"OKTA"}},"_links":{"schema":{"href":"https://testorg.com/api/v1/meta/schemas/user/osc1fddpcr6cnPEPG1d7"},"activate":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7/lifecycle/activate","method":"POST"},"self":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7"},"resetFactors":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7/lifecycle/reset_factors","method":"POST"},"type":{"href":"https://testorg.com/api/v1/meta/types/user/oty1fddpcr6cnPEPG1d7"},"delete":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7","method":"DELETE"}}}]' | ConvertFrom-Json
            
            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $TestResult = Invoke-OktaListUsers 
            
            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1

            $TestResult.Count | Should -Be 1
            $TestResult[0].Id | Should -Be "00u8zn2tz7xE1AsSl1d7"
            $TestResult[0].Status | Should -Be 'DEPROVISIONED'        
            $TestResult[0].Profile.FirstName | Should -Be 'John'
            $TestResult[0].Profile.LastName | Should -Be 'Doe'
            $TestResult[0].Profile.Login | Should -Be 'john.doe@mail.com'
            $TestResult[0].Profile.Email | Should -Be 'john.doe@mail.com'
            $TestResult[0]._Links | Should -Not -BeNullOrEmpty
        }

        It 'Test Invoke-OktaListUsers link headers' {

            $Content = '[{"id":"00u8zn2tz7xE1AsSl1d7","status":"DEPROVISIONED","created":"2023-07-19T19:27:41.000Z","activated":"2023-07-19T19:27:42.000Z","statusChanged":"2023-07-19T19:27:43.000Z","lastLogin":null,"lastUpdated":"2023-07-19T19:27:43.000Z","passwordChanged":"2023-07-19T19:27:42.000Z","type":{"id":"oty1fddpcr6cnPEPG1d7"},"profile":{"firstName":"John","lastName":"Doe","mobilePhone":null,"nickName":"johny-ActivateUser-407005a6-09cd-4c8a-bf52-e145d44f320a","secondEmail":null,"login":"john.doe@mail.com","email":"john.doe@mail.com"},"credentials":{"provider":{"type":"OKTA","name":"OKTA"}},"_links":{"schema":{"href":"https://testorg.com/api/v1/meta/schemas/user/osc1fddpcr6cnPEPG1d7"},"activate":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7/lifecycle/activate","method":"POST"},"self":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7"},"resetFactors":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7/lifecycle/reset_factors","method":"POST"},"type":{"href":"https://testorg.com/api/v1/meta/types/user/oty1fddpcr6cnPEPG1d7"},"delete":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7","method":"DELETE"}}}]' | ConvertFrom-Json
            
            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json"); "link" = @('<https://testorg.com/api/v1/apps?after=0oa1fddpfxzYoj4ij1d7&limit=1>; rel="next"', '<https://testorg.com/api/v1/apps?after=0oa1fddpc73mCAqnT1d7&limit=1>; rel="self"')}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $TestResult = Invoke-OktaListUsers -Limit 1 -WithHttpInfo
            
            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1
            
            $TestResult.Response.Count | Should -Be 1
            $TestResult.Headers['link'].Count | Should -Be 2
            $TestResult.Headers['link'][0] | Should -Be '<https://testorg.com/api/v1/apps?after=0oa1fddpfxzYoj4ij1d7&limit=1>; rel="next"'
            $TestResult.Headers['link'][1] | Should -Be '<https://testorg.com/api/v1/apps?after=0oa1fddpc73mCAqnT1d7&limit=1>; rel="self"'
        }
    }

    Context 'Invoke-OktaPartialUpdateUser' {
        It 'Test Invoke-OktaPartialUpdateUser' {
            $Content = '{"id":"00u8zn2tz7xE1AsSl1d7","status":"DEPROVISIONED","created":"2023-07-19T19:27:41.000Z","activated":"2023-07-19T19:27:42.000Z","statusChanged":"2023-07-19T19:27:43.000Z","lastLogin":null,"lastUpdated":"2023-07-19T19:27:43.000Z","passwordChanged":"2023-07-19T19:27:42.000Z","type":{"id":"oty1fddpcr6cnPEPG1d7"},"profile":{"firstName":"John","lastName":"Doe","mobilePhone":null,"nickName":"johny-ActivateUser-407005a6-09cd-4c8a-bf52-e145d44f320a","secondEmail":null,"login":"john.doe@mail.com","email":"john.doe@mail.com"},"credentials":{"provider":{"type":"OKTA","name":"OKTA"}},"_links":{"schema":{"href":"https://testorg.com/api/v1/meta/schemas/user/osc1fddpcr6cnPEPG1d7"},"activate":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7/lifecycle/activate","method":"POST"},"self":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7"},"resetFactors":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7/lifecycle/reset_factors","method":"POST"},"type":{"href":"https://testorg.com/api/v1/meta/types/user/oty1fddpcr6cnPEPG1d7"},"delete":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7","method":"DELETE"}}}' | ConvertFrom-Json
            
            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $TestResult = Invoke-OktaPartialUpdateUser -UserId "foo" -User @{}
            
            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1

            $TestResult.Id | Should -Be "00u8zn2tz7xE1AsSl1d7"
            $TestResult.Status | Should -Be 'DEPROVISIONED'        
            $TestResult.Profile.FirstName | Should -Be 'John'
            $TestResult.Profile.LastName | Should -Be 'Doe'
            $TestResult.Profile.Login | Should -Be 'john.doe@mail.com'
            $TestResult.Profile.Email | Should -Be 'john.doe@mail.com'
            $TestResult._Links | Should -Not -BeNullOrEmpty
        }
        It 'Test Invoke-OktaPartialUpdateUser fails when user is null' {
      
            { Invoke-OktaPartialUpdateUser -UserId "foo" } | Should -Throw -ExpectedMessage 'Error! The required parameter `User` missing when calling partialUpdateUser.'     
        }
    }

    Context 'Update-OktaUser' {
        It 'Test Update-OktaUser' {
            $Content = '{"id":"00u8zn2tz7xE1AsSl1d7","status":"DEPROVISIONED","created":"2023-07-19T19:27:41.000Z","activated":"2023-07-19T19:27:42.000Z","statusChanged":"2023-07-19T19:27:43.000Z","lastLogin":null,"lastUpdated":"2023-07-19T19:27:43.000Z","passwordChanged":"2023-07-19T19:27:42.000Z","type":{"id":"oty1fddpcr6cnPEPG1d7"},"profile":{"firstName":"John","lastName":"Doe","mobilePhone":null,"nickName":"johny-ActivateUser-407005a6-09cd-4c8a-bf52-e145d44f320a","secondEmail":null,"login":"john.doe@mail.com","email":"john.doe@mail.com"},"credentials":{"provider":{"type":"OKTA","name":"OKTA"}},"_links":{"schema":{"href":"https://testorg.com/api/v1/meta/schemas/user/osc1fddpcr6cnPEPG1d7"},"activate":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7/lifecycle/activate","method":"POST"},"self":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7"},"resetFactors":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7/lifecycle/reset_factors","method":"POST"},"type":{"href":"https://testorg.com/api/v1/meta/types/user/oty1fddpcr6cnPEPG1d7"},"delete":{"href":"https://testorg.com/api/v1/users/00u8zn2tz7xE1AsSl1d7","method":"DELETE"}}}' | ConvertFrom-Json
            
            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $TestResult = Update-OktaUser -UserId "foo" -User @{}
            
            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1

            $TestResult.Id | Should -Be "00u8zn2tz7xE1AsSl1d7"
            $TestResult.Status | Should -Be 'DEPROVISIONED'        
            $TestResult.Profile.FirstName | Should -Be 'John'
            $TestResult.Profile.LastName | Should -Be 'Doe'
            $TestResult.Profile.Login | Should -Be 'john.doe@mail.com'
            $TestResult.Profile.Email | Should -Be 'john.doe@mail.com'
            $TestResult._Links | Should -Not -BeNullOrEmpty
        }
        It 'Test Update-OktaUser fails when user is null' {
      
            { Update-OktaUser -UserId "foo" } | Should -Throw -ExpectedMessage 'Error! The required parameter `User` missing when calling UpdateUser.'     
        }
    }
}

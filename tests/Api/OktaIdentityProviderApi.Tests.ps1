#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

Describe -tag 'Okta.PowerShell' -name 'OktaOktaIdentityProviderApi' {
    Context 'New-OktaIdentityProvider' {
        It 'Test Initialize-OktaIdentityProvider Facebook' {
            
            $IdpCredentialsClient = Initialize-OktaIdentityProviderCredentialsClient -ClientId "your-client-id" -ClientSecret "your-client-secret"
            $IdpCredentials = Initialize-OktaIdentityProviderCredentials -Client $IdpCredentialsClient
            $Protocol = Initialize-OktaProtocol -Credentials $IdpCredentials -Type 'OAUTH2' 
            $AccountLink = Initialize-OktaPolicyAccountLink -Action 'AUTO'
            $Conditions = Initialize-OktaProvisioningConditions -Deprovisioned @{Action = "NONE"} -Suspended @{Action = "NONE"} 
            $Provisioning = Initialize-OktaProvisioning -Action 'AUTO' -ProfileMaster $True -Conditions $Conditions -Groups @{Action = "NONE"}
            $Subject = Initialize-OktaPolicySubject -UserNameTemplate @{Template = "idpuser.email"} -MatchType "USERNAME" 
            $Policy = Initialize-OktaIdentityProviderPolicy -AccountLink $AccountLink -Provisioning $Provisioning -Subject $Subject
            $NewIdp = Initialize-OktaIdentityProvider -Name "New idp" -Type "FACEBOOK" -Protocol $Protocol -Policy $Policy

            $NewIdp.Name | Should -Be "New idp"
            $NewIdp.Type | Should -Be "FACEBOOK"
            $NewIdp.Protocol.Credentials.Client.Client_Id | Should -Be "your-client-id"
            $NewIdp.Protocol.Credentials.Client.Client_Secret | Should -Be "your-client-secret"
            $NewIdp.Protocol.Type | Should -Be "OAUTH2"
            $NewIdp.Policy.AccountLink.Action | Should -Be "AUTO"
            $NewIdp.Policy.Provisioning.Action | Should -Be "AUTO"
            $NewIdp.Policy.Provisioning.ProfileMaster | Should -Be $True
            $NewIdp.Policy.Provisioning.Conditions.Deprovisioned.Action | Should -Be "NONE"
            $NewIdp.Policy.Provisioning.Conditions.Suspended.Action | Should -Be "NONE"
            $NewIdp.Policy.Provisioning.Groups.Action | Should -Be "NONE"
            $NewIdp.Policy.Subject.UserNameTemplate.Template  | Should -Be "idpuser.email"
            $NewIdp.Policy.Subject.MatchType  | Should -Be "USERNAME"
        }

        It 'Test New-OktaIdentityProvider Facebook' {
            $Content = '{"id":"0oa96k3igxBoeI0Rh1d7","issuerMode":"DYNAMIC","name":"New idp","status":"ACTIVE","created":"2023-07-28T19:52:19.000Z","lastUpdated":"2023-07-28T19:52:19.000Z","protocol":{"type":"OAUTH2","endpoints":{"authorization":{"url":"https://www.facebook.com/dialog/oauth","binding":"HTTP-REDIRECT"},"token":{"url":"https://graph.facebook.com/v2.8/oauth/access_token","binding":"HTTP-POST"}},"scopes":["public_profile","email"],"credentials":{"client":{"client_id":"your-client-id","client_secret":"your-client-secret"}}},"policy":{"provisioning":{"action":"AUTO","profileMaster":true,"groups":{"action":"NONE"},"conditions":{"deprovisioned":{"action":"NONE"},"suspended":{"action":"NONE"}}},"accountLink":{"filter":null,"action":"AUTO"},"subject":{"userNameTemplate":{"template":"idpuser.email"},"filter":null,"matchType":"USERNAME","matchAttribute":null},"maxClockSkew":0},"type":"FACEBOOK","_links":{"authorize":{"href":"https://testorg.com/oauth2/v1/authorize?idp=0oa96k3igxBoeI0Rh1d7&client_id={clientId}&response_type={responseType}&response_mode={responseMode}&scope={scopes}&redirect_uri={redirectUri}&state={state}&nonce={nonce}","templated":true,"hints":{"allow":["GET"]}},"clientRedirectUri":{"href":"https://testorg.com/oauth2/v1/authorize/callback","hints":{"allow":["POST"]}}}}' | ConvertFrom-Json

            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $NewIdp = New-OktaIdentityProvider -IdentityProvider @{}

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1

            $NewIdp.Name | Should -Be "New idp"
            $NewIdp.Type | Should -Be "FACEBOOK"
            $NewIdp.Protocol.Credentials.Client.Client_Id | Should -Be "your-client-id"
            $NewIdp.Protocol.Credentials.Client.Client_Secret | Should -Be "your-client-secret"
            $NewIdp.Protocol.Type | Should -Be "OAUTH2"
            $NewIdp.Policy.AccountLink.Action | Should -Be "AUTO"
            $NewIdp.Policy.Provisioning.Action | Should -Be "AUTO"
            $NewIdp.Policy.Provisioning.ProfileMaster | Should -Be $True
            $NewIdp.Policy.Provisioning.Conditions.Deprovisioned.Action | Should -Be "NONE"
            $NewIdp.Policy.Provisioning.Conditions.Suspended.Action | Should -Be "NONE"
            $NewIdp.Policy.Provisioning.Groups.Action | Should -Be "NONE"
            $NewIdp.Policy.Subject.UserNameTemplate.Template  | Should -Be "idpuser.email"
            $NewIdp.Policy.Subject.MatchType  | Should -Be "USERNAME"
        }

        It 'Test Initialize-OktaIdentityProvider GenericOIDC' {
            
            $IdpCredentialsClient = Initialize-OktaIdentityProviderCredentialsClient -ClientId "your-client-id" -ClientSecret "your-client-secret"
            $IdpCredentials = Initialize-OktaIdentityProviderCredentials -Client $IdpCredentialsClient
           
            $AlgoRequest = [PSCustomObject]@{
                    Signature = [PSCustomObject]@{
                        Algorithm = "SHA-256"
                        Scope = "REQUEST"
                    }
                }
            
            $AlgoResponse = [PSCustomObject]@{
                Signature = [PSCustomObject]@{
                    Algorithm = "SHA-256"
                    Scope = "ANY"
                }
            }    
            
            $Algorithms = Initialize-OktaProtocolAlgorithms -Request $AlgoRequest -Response $AlgoResponse

            $Endpoints = Initialize-OktaProtocolEndpoints -Acs @{
                Binding = "HTTP-POST"
                Type = "INSTANCE"
            }
            
            $Protocol = Initialize-OktaProtocol -Credentials $IdpCredentials -Type 'OAUTH2' -Algorithms $Algorithms -Endpoints $Endpoints -Scopes @("openid", "profile") -Issuer @{Url = "https://idp.example.com"}
           
            $AccountLink = Initialize-OktaPolicyAccountLink -Action 'AUTO'
            $Conditions = Initialize-OktaProvisioningConditions -Deprovisioned @{Action = "NONE"} -Suspended @{Action = "NONE"} 
            $Provisioning = Initialize-OktaProvisioning -Action 'AUTO' -ProfileMaster $True -Conditions $Conditions -Groups @{Action = "NONE"}
            $Subject = Initialize-OktaPolicySubject -UserNameTemplate @{Template = "idpuser.email"} -MatchType "USERNAME" 
            $Policy = Initialize-OktaIdentityProviderPolicy -AccountLink $AccountLink -Provisioning $Provisioning -Subject $Subject
            $NewIdp = Initialize-OktaIdentityProvider -Name "New idp" -Type "OIDC" -Protocol $Protocol -Policy $Policy

            $NewIdp.Name | Should -Be "New idp"
            $NewIdp.Type | Should -Be "OIDC"
            $NewIdp.Protocol.Credentials.Client.Client_Id | Should -Be "your-client-id"
            $NewIdp.Protocol.Credentials.Client.Client_Secret | Should -Be "your-client-secret"
            $NewIdp.Protocol.Type | Should -Be "OAUTH2"
           
            $NewIdp.Protocol.Algorithms.Request.Signature.Algorithm | Should -Be 'SHA-256'
            $NewIdp.Protocol.Algorithms.Request.Signature.Scope | Should -Be 'REQUEST'
            $NewIdp.Protocol.Algorithms.Response.Signature.Algorithm | Should -Be 'SHA-256'
            $NewIdp.Protocol.Algorithms.Response.Signature.Scope | Should -Be 'ANY'
            
            $NewIdp.Protocol.Endpoints.Acs.Binding | Should -Be 'HTTP-POST'
            $NewIdp.Protocol.Endpoints.Acs.Type | Should -Be 'INSTANCE'
            $NewIdp.Protocol.Issuer.Url | Should -Be "https://idp.example.com"
            $NewIdp.Policy.AccountLink.Action | Should -Be "AUTO"
            $NewIdp.Policy.Provisioning.Action | Should -Be "AUTO"
            $NewIdp.Policy.Provisioning.ProfileMaster | Should -Be $True
            $NewIdp.Policy.Provisioning.Conditions.Deprovisioned.Action | Should -Be "NONE"
            $NewIdp.Policy.Provisioning.Conditions.Suspended.Action | Should -Be "NONE"
            $NewIdp.Policy.Provisioning.Groups.Action | Should -Be "NONE"
            $NewIdp.Policy.Subject.UserNameTemplate.Template  | Should -Be "idpuser.email"
            $NewIdp.Policy.Subject.MatchType  | Should -Be "USERNAME"
        }

        It 'Test New-OktaIdentityProvider GenericOIDC' {
            $Content = '{"id":"0oa97ur0uxAyr6cyC1d7","issuerMode":"DYNAMIC","name":"New idp","status":"ACTIVE","created":"2023-07-31T17:40:34.000Z","lastUpdated":"2023-07-31T17:40:34.000Z","protocol":{"type":"OIDC","endpoints":{"authorization":{"url":"https://idp.example.com/authorize","binding":"HTTP-REDIRECT"},"token":{"url":"https://idp.example.com/token","binding":"HTTP-POST"},"userInfo":{"url":"https://idp.example.com/userinfo","binding":"HTTP-REDIRECT"},"jwks":{"url":"https://idp.example.com/keys","binding":"HTTP-REDIRECT"}},"scopes":["openid","profile","email"],"issuer":{"url":"https://idp.example.com"},"credentials":{"client":{"client_id":"your-client-id","client_secret":"your-client-secret"}}},"policy":{"provisioning":{"action":"AUTO","profileMaster":false,"groups":{"action":"NONE"},"conditions":{"deprovisioned":{"action":"NONE"},"suspended":{"action":"NONE"}}},"accountLink":{"filter":null,"action":"AUTO"},"subject":{"userNameTemplate":{"template":"idpuser.email"},"filter":null,"matchType":"USERNAME","matchAttribute":null},"maxClockSkew":0},"type":"OIDC","_links":{"authorize":{"href":"https://testorg.com/oauth2/v1/authorize?idp=0oa97ur0uxAyr6cyC1d7&client_id={clientId}&response_type={responseType}&response_mode={responseMode}&scope={scopes}&redirect_uri={redirectUri}&state={state}&nonce={nonce}","templated":true,"hints":{"allow":["GET"]}},"clientRedirectUri":{"href":"https://testorg.com/oauth2/v1/authorize/callback","hints":{"allow":["POST"]}}}}' | ConvertFrom-Json

            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $NewIdp = New-OktaIdentityProvider -IdentityProvider @{}

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1

            $NewIdp.Name | Should -Be "New idp"
            $NewIdp.Type | Should -Be "OIDC"
            $NewIdp.IssuerMode | Should -Be "DYNAMIC"
            $NewIdp.Protocol.Credentials.Client.Client_Id | Should -Be "your-client-id"
            $NewIdp.Protocol.Credentials.Client.Client_Secret | Should -Be "your-client-secret"
            $NewIdp.Protocol.Type | Should -Be "OIDC"
            
            $NewIdp.Protocol.Endpoints.Token.Binding | Should -Be 'HTTP-POST'
            $NewIdp.Protocol.Endpoints.Token.Url | Should -Be 'https://idp.example.com/token'
            $NewIdp.Protocol.Issuer.Url | Should -Be "https://idp.example.com"
            $NewIdp.Policy.AccountLink.Action | Should -Be "AUTO"
            $NewIdp.Policy.Provisioning.Action | Should -Be "AUTO"
            $NewIdp.Policy.Provisioning.ProfileMaster | Should -Be $False
            $NewIdp.Policy.Provisioning.Conditions.Deprovisioned.Action | Should -Be "NONE"
            $NewIdp.Policy.Provisioning.Conditions.Suspended.Action | Should -Be "NONE"
            $NewIdp.Policy.Provisioning.Groups.Action | Should -Be "NONE"
            $NewIdp.Policy.Subject.UserNameTemplate.Template  | Should -Be "idpuser.email"
            $NewIdp.Policy.Subject.MatchType  | Should -Be "USERNAME"
        }
    }

    Context 'New-OktaIdentityProviderKey' {
        It 'Test Initialize-OktaJsonWebKey' {    
            $Date = (Get-Date)
            $JsonWebKey = Initialize-OktaJsonWebKey -Alg "MyAlg" -Created (Get-Date) -E "MyE" -ExpiresAt $Date -KeyOps "MyKeyOps" -Kid "MyKid" -Kty "MyKty" -LastUpdated (Get-Date) -N "MyN" -Status "MyStatus" -Use "MyUse" -X5c "MyX5c" -X5t "MyX5t" -X5tS256 "MyX5tS256" -X5u "MyX5u"
            $JsonWebKey.Alg | Should -Be "MyAlg"
            $JsonWebKey.E | Should -Be "MyE"
            $JsonWebKey.ExpiresAt | Should -Be $Date
            $JsonWebKey.Key_ops | Should -Be "MyKeyOps"
            $JsonWebKey.Kid | Should -Be "MyKid"
            $JsonWebKey.Kty | Should -Be "MyKty"
            $JsonWebKey.N | Should -Be "MyN"
            $JsonWebKey.Use | Should -Be "MyUse"
            $JsonWebKey.X5c | Should -Be "MyX5c"
            $JsonWebKey.X5u | Should -Be "MyX5u"
            
            # TODO: Fix property
            #$JsonWebKey.X5t#S256 | Should -Be "MyX5c"          
        }

        It 'Test New-OktaIdentityProviderKey' {    
            $Content = '{"kty":"RSA","created":"2023-08-01T13:33:59.000Z","lastUpdated":"2023-08-01T13:33:59.000Z","expiresAt":"2025-12-18T22:23:32.000Z","alg":"RSA","kid":"5256aa84-8ad2-4545-b75c-39cff0bf951a","use":"sig","x5c":["MIIDnjCCAoagAwIBAgIGAVG3MN+PMA0GCSqGSIb3DQEBBQUAMIGPMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5p"],"x5t#S256":"wzPVobIrveR1x-PCbjsFGNV-6zn7Rm9KuOWOG4Rk6jE","e":"AQAB","n":"tcnyvuVCrsFEKCwHDenS3Ocjed8eWDv3zLtD2K_iZfE8BMj2wpTfn6Ry8zCYey3mWlKdxIybnV9amrujGRnE0ab6Q16v9D6RlFQLOG6dwqoRKuZy33Uyg8PGdEudZjGbWuKCqqXEp-UKALJHV-k4wWeVH8g5d1n3KyR2TVajVJpCrPhLFmq1Il4G_IUnPe4MvjXqB6CpKkog1-ThWsItPRJPAM-RweFHXq7KfChXsYE7Mmfuly8sDQlvBmQyxZnFHVuiPfCvGHJjpvHy11YlHdOjfgqHRvZbmo30-y0X_oY_yV4YEJ00LL6eJWU4wi7ViY3HP6_VCdRjHoRdr5L_Dw"}' | ConvertFrom-Json

            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $NewKey = New-OktaIdentityProviderKey -JsonWebKey @{}

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1

            $NewKey.X5c | Should -Contain "MIIDnjCCAoagAwIBAgIGAVG3MN+PMA0GCSqGSIb3DQEBBQUAMIGPMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5p"
        }
        
    }
    Context 'New-OktaCsrForIdentityProvider' {
        It 'Test Initialize-OktaCsrMetadata' {
            
            $Subject = Initialize-OktaCsrMetadataSubject -CountryName "US" -StateOrProvinceName "California" -CommonName "SP Issuer" -LocalityName "San Francisco" -OrganizationName "Okta" -OrganizationalUnitName "Dev"
            $SubjectAltNames = Initialize-OktaCsrMetadataSubjectAltNames -DnsNames @("dev.okta.com")
            $Metadata = Initialize-OktaCsrMetadata -Subject $Subject -SubjectAltNames $SubjectAltNames

            $Metadata.Subject.CountryName | Should -Be "US"
            $Metadata.Subject.StateOrProvinceName | Should -Be "California"
            $Metadata.Subject.CommonName | Should -Be "SP Issuer"
            $Metadata.Subject.LocalityName | Should -Be "San Francisco"
            $Metadata.Subject.OrganizationName | Should -Be "Okta"
            $Metadata.Subject.OrganizationalUnitName | Should -Be "Dev"
            $Metadata.SubjectAltNames.DnsNames | Should -Contain "dev.okta.com"
        }

        It 'Test New-OktaCsrForIdentityProvider' {
            
            $Content = '{"id":"n-qQkgRh4GUubsiBHzeaF5P9IudfIg0hgJhaZczxNrk","created":"2023-08-01T13:57:55.000Z","csr":"MIIC4DCCAcgCAQAwcTELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xEzARBgNVBAoMCk9rdGEsIEluYy4xDDAKBgNVBAsMA0RldjESMBAGA1UEAwwJU1AgSXNzdWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmyH4mMrZGnDw/Xds86uvNkw3hZxffK2alpnNmGjgVyiFWP9WfUZbojgUf2mfbU8tc75adW4QeCTPzbAjvo8+X8rNJaOLfROhtuHPMJu9OoQndco3ALyJFGsyyAb+6G927zDB42VvkBuy0Syt6TxVtOEy4O6ZBLqbad7/DmD2eThCzgtC3dD1XwGaxvgh02k/t2K3TqUI/ygBefQCsbusesCp8M9GyfuGnAxCFr7BlmtyVvOnyENjHZMfdardP3W/C1ZF10sn8E0BLxiDbTyd0NJ6JDft/GS+kdPgiIG2n8OyWqyLN/1w+o9MvlGjt6PH82stwgms6FlIZRKsAjYWJQIDAQABoCowKAYJKoZIhvcNAQkOMRswGTAXBgNVHREEEDAOggxkZXYub2t0YS5jb20wDQYJKoZIhvcNAQELBQADggEBAFAx5B6B/KkB3DtAZAdQ1QMGh6AwZRorN5qwjNhD+6iaV0jZbEf9Q1u1Mdi3eDV2tOfLpCSmpObhzQVScn2isU+0vKjkpjqNYIg0m7o8/0IiAZkbwaY7B34+iCdYEmDFm9oH7VY8OS8pGDYKu828VqZIWZpT//COBy4Ay+YntyFwkWL2XRGdcKwxWNyzgEu/YGN1r0OnvlSByi5UlnAtDsQ1FWy480NW6Xg7xtQotzMa5tHg6G8te/ZcIYLCVFHywcNffqJu3FpsiPaeyoxpByCeEnVJOQsP2ikY27G8WFNlhPS+eOwp7tVzy8UvDEyZ/qCX32pR+XR4gjJlYBDKFyw=","kty":"RSA","_links":{"publish":{"href":"https://testorg.com/api/v1/idps/0oa98mm9bqtXe8z6x1d7/credentials/csrs/n-qQkgRh4GUubsiBHzeaF5P9IudfIg0hgJhaZczxNrk/lifecycle/publish","hints":{"allow":["POST"]}},"self":{"href":"https://testorg.com/api/v1/idps/0oa98mm9bqtXe8z6x1d7/credentials/csrs/n-qQkgRh4GUubsiBHzeaF5P9IudfIg0hgJhaZczxNrk","hints":{"allow":["GET","DELETE"]}}}}' | ConvertFrom-Json  
            
            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $NewCsr = New-OktaCsrForIdentityProvider -Metadata @{} -IdpId "foo"

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1
        
            $NewCsr.Csr | Should -Be "MIIC4DCCAcgCAQAwcTELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xEzARBgNVBAoMCk9rdGEsIEluYy4xDDAKBgNVBAsMA0RldjESMBAGA1UEAwwJU1AgSXNzdWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmyH4mMrZGnDw/Xds86uvNkw3hZxffK2alpnNmGjgVyiFWP9WfUZbojgUf2mfbU8tc75adW4QeCTPzbAjvo8+X8rNJaOLfROhtuHPMJu9OoQndco3ALyJFGsyyAb+6G927zDB42VvkBuy0Syt6TxVtOEy4O6ZBLqbad7/DmD2eThCzgtC3dD1XwGaxvgh02k/t2K3TqUI/ygBefQCsbusesCp8M9GyfuGnAxCFr7BlmtyVvOnyENjHZMfdardP3W/C1ZF10sn8E0BLxiDbTyd0NJ6JDft/GS+kdPgiIG2n8OyWqyLN/1w+o9MvlGjt6PH82stwgms6FlIZRKsAjYWJQIDAQABoCowKAYJKoZIhvcNAQkOMRswGTAXBgNVHREEEDAOggxkZXYub2t0YS5jb20wDQYJKoZIhvcNAQELBQADggEBAFAx5B6B/KkB3DtAZAdQ1QMGh6AwZRorN5qwjNhD+6iaV0jZbEf9Q1u1Mdi3eDV2tOfLpCSmpObhzQVScn2isU+0vKjkpjqNYIg0m7o8/0IiAZkbwaY7B34+iCdYEmDFm9oH7VY8OS8pGDYKu828VqZIWZpT//COBy4Ay+YntyFwkWL2XRGdcKwxWNyzgEu/YGN1r0OnvlSByi5UlnAtDsQ1FWy480NW6Xg7xtQotzMa5tHg6G8te/ZcIYLCVFHywcNffqJu3FpsiPaeyoxpByCeEnVJOQsP2ikY27G8WFNlhPS+eOwp7tVzy8UvDEyZ/qCX32pR+XR4gjJlYBDKFyw="
        }
    }

   
    Context 'Get-OktaCsrForIdentityProvider' {
        It 'Test Get-OktaCsrForIdentityProvider' {
            $Content = '{"id":"n-qQkgRh4GUubsiBHzeaF5P9IudfIg0hgJhaZczxNrk","created":"2023-08-01T13:57:55.000Z","csr":"MIIC4DCCAcgCAQAwcTELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xEzARBgNVBAoMCk9rdGEsIEluYy4xDDAKBgNVBAsMA0RldjESMBAGA1UEAwwJU1AgSXNzdWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmyH4mMrZGnDw/Xds86uvNkw3hZxffK2alpnNmGjgVyiFWP9WfUZbojgUf2mfbU8tc75adW4QeCTPzbAjvo8+X8rNJaOLfROhtuHPMJu9OoQndco3ALyJFGsyyAb+6G927zDB42VvkBuy0Syt6TxVtOEy4O6ZBLqbad7/DmD2eThCzgtC3dD1XwGaxvgh02k/t2K3TqUI/ygBefQCsbusesCp8M9GyfuGnAxCFr7BlmtyVvOnyENjHZMfdardP3W/C1ZF10sn8E0BLxiDbTyd0NJ6JDft/GS+kdPgiIG2n8OyWqyLN/1w+o9MvlGjt6PH82stwgms6FlIZRKsAjYWJQIDAQABoCowKAYJKoZIhvcNAQkOMRswGTAXBgNVHREEEDAOggxkZXYub2t0YS5jb20wDQYJKoZIhvcNAQELBQADggEBAFAx5B6B/KkB3DtAZAdQ1QMGh6AwZRorN5qwjNhD+6iaV0jZbEf9Q1u1Mdi3eDV2tOfLpCSmpObhzQVScn2isU+0vKjkpjqNYIg0m7o8/0IiAZkbwaY7B34+iCdYEmDFm9oH7VY8OS8pGDYKu828VqZIWZpT//COBy4Ay+YntyFwkWL2XRGdcKwxWNyzgEu/YGN1r0OnvlSByi5UlnAtDsQ1FWy480NW6Xg7xtQotzMa5tHg6G8te/ZcIYLCVFHywcNffqJu3FpsiPaeyoxpByCeEnVJOQsP2ikY27G8WFNlhPS+eOwp7tVzy8UvDEyZ/qCX32pR+XR4gjJlYBDKFyw=","kty":"RSA","_links":{"publish":{"href":"https://testorg.com/api/v1/idps/0oa98mm9bqtXe8z6x1d7/credentials/csrs/n-qQkgRh4GUubsiBHzeaF5P9IudfIg0hgJhaZczxNrk/lifecycle/publish","hints":{"allow":["POST"]}},"self":{"href":"https://testorg.com/api/v1/idps/0oa98mm9bqtXe8z6x1d7/credentials/csrs/n-qQkgRh4GUubsiBHzeaF5P9IudfIg0hgJhaZczxNrk","hints":{"allow":["GET","DELETE"]}}}}' | ConvertFrom-Json  
            
            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $NewCsr = Get-OktaCsrForIdentityProvider -IdpId "foo" -CsrId "bar"

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1
        
            $NewCsr.Csr | Should -Be "MIIC4DCCAcgCAQAwcTELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xEzARBgNVBAoMCk9rdGEsIEluYy4xDDAKBgNVBAsMA0RldjESMBAGA1UEAwwJU1AgSXNzdWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmyH4mMrZGnDw/Xds86uvNkw3hZxffK2alpnNmGjgVyiFWP9WfUZbojgUf2mfbU8tc75adW4QeCTPzbAjvo8+X8rNJaOLfROhtuHPMJu9OoQndco3ALyJFGsyyAb+6G927zDB42VvkBuy0Syt6TxVtOEy4O6ZBLqbad7/DmD2eThCzgtC3dD1XwGaxvgh02k/t2K3TqUI/ygBefQCsbusesCp8M9GyfuGnAxCFr7BlmtyVvOnyENjHZMfdardP3W/C1ZF10sn8E0BLxiDbTyd0NJ6JDft/GS+kdPgiIG2n8OyWqyLN/1w+o9MvlGjt6PH82stwgms6FlIZRKsAjYWJQIDAQABoCowKAYJKoZIhvcNAQkOMRswGTAXBgNVHREEEDAOggxkZXYub2t0YS5jb20wDQYJKoZIhvcNAQELBQADggEBAFAx5B6B/KkB3DtAZAdQ1QMGh6AwZRorN5qwjNhD+6iaV0jZbEf9Q1u1Mdi3eDV2tOfLpCSmpObhzQVScn2isU+0vKjkpjqNYIg0m7o8/0IiAZkbwaY7B34+iCdYEmDFm9oH7VY8OS8pGDYKu828VqZIWZpT//COBy4Ay+YntyFwkWL2XRGdcKwxWNyzgEu/YGN1r0OnvlSByi5UlnAtDsQ1FWy480NW6Xg7xtQotzMa5tHg6G8te/ZcIYLCVFHywcNffqJu3FpsiPaeyoxpByCeEnVJOQsP2ikY27G8WFNlhPS+eOwp7tVzy8UvDEyZ/qCX32pR+XR4gjJlYBDKFyw="
        }
    }

    Context 'Get-OktaIdentityProvider' {
        It 'Test Get-OktaIdentityProvider' { 
            $Content = '{"id":"0oa97ur0uxAyr6cyC1d7","issuerMode":"DYNAMIC","name":"New idp","status":"ACTIVE","created":"2023-07-31T17:40:34.000Z","lastUpdated":"2023-07-31T17:40:34.000Z","protocol":{"type":"OIDC","endpoints":{"authorization":{"url":"https://idp.example.com/authorize","binding":"HTTP-REDIRECT"},"token":{"url":"https://idp.example.com/token","binding":"HTTP-POST"},"userInfo":{"url":"https://idp.example.com/userinfo","binding":"HTTP-REDIRECT"},"jwks":{"url":"https://idp.example.com/keys","binding":"HTTP-REDIRECT"}},"scopes":["openid","profile","email"],"issuer":{"url":"https://idp.example.com"},"credentials":{"client":{"client_id":"your-client-id","client_secret":"your-client-secret"}}},"policy":{"provisioning":{"action":"AUTO","profileMaster":false,"groups":{"action":"NONE"},"conditions":{"deprovisioned":{"action":"NONE"},"suspended":{"action":"NONE"}}},"accountLink":{"filter":null,"action":"AUTO"},"subject":{"userNameTemplate":{"template":"idpuser.email"},"filter":null,"matchType":"USERNAME","matchAttribute":null},"maxClockSkew":0},"type":"OIDC","_links":{"authorize":{"href":"https://testorg.com/oauth2/v1/authorize?idp=0oa97ur0uxAyr6cyC1d7&client_id={clientId}&response_type={responseType}&response_mode={responseMode}&scope={scopes}&redirect_uri={redirectUri}&state={state}&nonce={nonce}","templated":true,"hints":{"allow":["GET"]}},"clientRedirectUri":{"href":"https://testorg.com/oauth2/v1/authorize/callback","hints":{"allow":["POST"]}}}}' | ConvertFrom-Json

            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $NewIdp = Get-OktaIdentityProvider -IdpId "foo"

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1

            $NewIdp.Id | Should -Be "0oa97ur0uxAyr6cyC1d7"
            $NewIdp.Name | Should -Be "New idp"
            $NewIdp.Type | Should -Be "OIDC"
            $NewIdp.IssuerMode | Should -Be "DYNAMIC"
            $NewIdp.Protocol.Credentials.Client.Client_Id | Should -Be "your-client-id"
            $NewIdp.Protocol.Credentials.Client.Client_Secret | Should -Be "your-client-secret"
            $NewIdp.Protocol.Type | Should -Be "OIDC"
            
            $NewIdp.Protocol.Endpoints.Token.Binding | Should -Be 'HTTP-POST'
            $NewIdp.Protocol.Endpoints.Token.Url | Should -Be 'https://idp.example.com/token'
            $NewIdp.Protocol.Issuer.Url | Should -Be "https://idp.example.com"
            $NewIdp.Policy.AccountLink.Action | Should -Be "AUTO"
            $NewIdp.Policy.Provisioning.Action | Should -Be "AUTO"
            $NewIdp.Policy.Provisioning.ProfileMaster | Should -Be $False
            $NewIdp.Policy.Provisioning.Conditions.Deprovisioned.Action | Should -Be "NONE"
            $NewIdp.Policy.Provisioning.Conditions.Suspended.Action | Should -Be "NONE"
            $NewIdp.Policy.Provisioning.Groups.Action | Should -Be "NONE"
            $NewIdp.Policy.Subject.UserNameTemplate.Template  | Should -Be "idpuser.email"
            $NewIdp.Policy.Subject.MatchType  | Should -Be "USERNAME"
        }
    }

    Context 'Get-OktaIdentityProviderKey' {
        It 'Test Get-OktaIdentityProviderKey' {
            $Content = '{"kty":"RSA","created":"2023-08-01T13:33:59.000Z","lastUpdated":"2023-08-01T13:33:59.000Z","expiresAt":"2025-12-18T22:23:32.000Z","alg":"RSA","kid":"5256aa84-8ad2-4545-b75c-39cff0bf951a","use":"sig","x5c":["MIIDnjCCAoagAwIBAgIGAVG3MN+PMA0GCSqGSIb3DQEBBQUAMIGPMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5p"],"x5t#S256":"wzPVobIrveR1x-PCbjsFGNV-6zn7Rm9KuOWOG4Rk6jE","e":"AQAB","n":"tcnyvuVCrsFEKCwHDenS3Ocjed8eWDv3zLtD2K_iZfE8BMj2wpTfn6Ry8zCYey3mWlKdxIybnV9amrujGRnE0ab6Q16v9D6RlFQLOG6dwqoRKuZy33Uyg8PGdEudZjGbWuKCqqXEp-UKALJHV-k4wWeVH8g5d1n3KyR2TVajVJpCrPhLFmq1Il4G_IUnPe4MvjXqB6CpKkog1-ThWsItPRJPAM-RweFHXq7KfChXsYE7Mmfuly8sDQlvBmQyxZnFHVuiPfCvGHJjpvHy11YlHdOjfgqHRvZbmo30-y0X_oY_yV4YEJ00LL6eJWU4wi7ViY3HP6_VCdRjHoRdr5L_Dw"}' | ConvertFrom-Json

            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $NewKey = Get-OktaIdentityProviderKey -KeyId "foo"

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1

            $NewKey.X5c | Should -Contain "MIIDnjCCAoagAwIBAgIGAVG3MN+PMA0GCSqGSIb3DQEBBQUAMIGPMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5p"
        }
    }

    Context 'Invoke-OktaListCsrsForIdentityProvider' {
        It 'Test Invoke-OktaListCsrsForIdentityProvider' {
            $Content = '[{"id":"n-qQkgRh4GUubsiBHzeaF5P9IudfIg0hgJhaZczxNrk","created":"2023-08-01T13:57:55.000Z","csr":"MIIC4DCCAcgCAQAwcTELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xEzARBgNVBAoMCk9rdGEsIEluYy4xDDAKBgNVBAsMA0RldjESMBAGA1UEAwwJU1AgSXNzdWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmyH4mMrZGnDw/Xds86uvNkw3hZxffK2alpnNmGjgVyiFWP9WfUZbojgUf2mfbU8tc75adW4QeCTPzbAjvo8+X8rNJaOLfROhtuHPMJu9OoQndco3ALyJFGsyyAb+6G927zDB42VvkBuy0Syt6TxVtOEy4O6ZBLqbad7/DmD2eThCzgtC3dD1XwGaxvgh02k/t2K3TqUI/ygBefQCsbusesCp8M9GyfuGnAxCFr7BlmtyVvOnyENjHZMfdardP3W/C1ZF10sn8E0BLxiDbTyd0NJ6JDft/GS+kdPgiIG2n8OyWqyLN/1w+o9MvlGjt6PH82stwgms6FlIZRKsAjYWJQIDAQABoCowKAYJKoZIhvcNAQkOMRswGTAXBgNVHREEEDAOggxkZXYub2t0YS5jb20wDQYJKoZIhvcNAQELBQADggEBAFAx5B6B/KkB3DtAZAdQ1QMGh6AwZRorN5qwjNhD+6iaV0jZbEf9Q1u1Mdi3eDV2tOfLpCSmpObhzQVScn2isU+0vKjkpjqNYIg0m7o8/0IiAZkbwaY7B34+iCdYEmDFm9oH7VY8OS8pGDYKu828VqZIWZpT//COBy4Ay+YntyFwkWL2XRGdcKwxWNyzgEu/YGN1r0OnvlSByi5UlnAtDsQ1FWy480NW6Xg7xtQotzMa5tHg6G8te/ZcIYLCVFHywcNffqJu3FpsiPaeyoxpByCeEnVJOQsP2ikY27G8WFNlhPS+eOwp7tVzy8UvDEyZ/qCX32pR+XR4gjJlYBDKFyw=","kty":"RSA","_links":{"publish":{"href":"https://testorg.com/api/v1/idps/0oa98mm9bqtXe8z6x1d7/credentials/csrs/n-qQkgRh4GUubsiBHzeaF5P9IudfIg0hgJhaZczxNrk/lifecycle/publish","hints":{"allow":["POST"]}},"self":{"href":"https://testorg.com/api/v1/idps/0oa98mm9bqtXe8z6x1d7/credentials/csrs/n-qQkgRh4GUubsiBHzeaF5P9IudfIg0hgJhaZczxNrk","hints":{"allow":["GET","DELETE"]}}}}]' | ConvertFrom-Json  
            
            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $CsrList = Invoke-OktaListCsrsForIdentityProvider -IdpId "foo" 

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1
            
            $CsrList.Count | Should -Be 1
            $CsrList[0].Csr | Should -Be "MIIC4DCCAcgCAQAwcTELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28xEzARBgNVBAoMCk9rdGEsIEluYy4xDDAKBgNVBAsMA0RldjESMBAGA1UEAwwJU1AgSXNzdWVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmyH4mMrZGnDw/Xds86uvNkw3hZxffK2alpnNmGjgVyiFWP9WfUZbojgUf2mfbU8tc75adW4QeCTPzbAjvo8+X8rNJaOLfROhtuHPMJu9OoQndco3ALyJFGsyyAb+6G927zDB42VvkBuy0Syt6TxVtOEy4O6ZBLqbad7/DmD2eThCzgtC3dD1XwGaxvgh02k/t2K3TqUI/ygBefQCsbusesCp8M9GyfuGnAxCFr7BlmtyVvOnyENjHZMfdardP3W/C1ZF10sn8E0BLxiDbTyd0NJ6JDft/GS+kdPgiIG2n8OyWqyLN/1w+o9MvlGjt6PH82stwgms6FlIZRKsAjYWJQIDAQABoCowKAYJKoZIhvcNAQkOMRswGTAXBgNVHREEEDAOggxkZXYub2t0YS5jb20wDQYJKoZIhvcNAQELBQADggEBAFAx5B6B/KkB3DtAZAdQ1QMGh6AwZRorN5qwjNhD+6iaV0jZbEf9Q1u1Mdi3eDV2tOfLpCSmpObhzQVScn2isU+0vKjkpjqNYIg0m7o8/0IiAZkbwaY7B34+iCdYEmDFm9oH7VY8OS8pGDYKu828VqZIWZpT//COBy4Ay+YntyFwkWL2XRGdcKwxWNyzgEu/YGN1r0OnvlSByi5UlnAtDsQ1FWy480NW6Xg7xtQotzMa5tHg6G8te/ZcIYLCVFHywcNffqJu3FpsiPaeyoxpByCeEnVJOQsP2ikY27G8WFNlhPS+eOwp7tVzy8UvDEyZ/qCX32pR+XR4gjJlYBDKFyw="
        }
    }


    Context 'Invoke-OktaListIdentityProviderKeys' {
        It 'Test Invoke-OktaListIdentityProviderKeys' {
            $Content = '[{"kty":"RSA","created":"2023-08-01T13:33:59.000Z","lastUpdated":"2023-08-01T13:33:59.000Z","expiresAt":"2025-12-18T22:23:32.000Z","alg":"RSA","kid":"5256aa84-8ad2-4545-b75c-39cff0bf951a","use":"sig","x5c":["MIIDnjCCAoagAwIBAgIGAVG3MN+PMA0GCSqGSIb3DQEBBQUAMIGPMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5p"],"x5t#S256":"wzPVobIrveR1x-PCbjsFGNV-6zn7Rm9KuOWOG4Rk6jE","e":"AQAB","n":"tcnyvuVCrsFEKCwHDenS3Ocjed8eWDv3zLtD2K_iZfE8BMj2wpTfn6Ry8zCYey3mWlKdxIybnV9amrujGRnE0ab6Q16v9D6RlFQLOG6dwqoRKuZy33Uyg8PGdEudZjGbWuKCqqXEp-UKALJHV-k4wWeVH8g5d1n3KyR2TVajVJpCrPhLFmq1Il4G_IUnPe4MvjXqB6CpKkog1-ThWsItPRJPAM-RweFHXq7KfChXsYE7Mmfuly8sDQlvBmQyxZnFHVuiPfCvGHJjpvHy11YlHdOjfgqHRvZbmo30-y0X_oY_yV4YEJ00LL6eJWU4wi7ViY3HP6_VCdRjHoRdr5L_Dw"}]' | ConvertFrom-Json

            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $Keys = Invoke-OktaListIdentityProviderKeys 

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1

            $Keys.Count | Should -Be 1
            $Keys[0].X5c | Should -Contain "MIIDnjCCAoagAwIBAgIGAVG3MN+PMA0GCSqGSIb3DQEBBQUAMIGPMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5p"
        }
    }

    Context 'Invoke-OktaListIdentityProviders' {
        It 'Test Invoke-OktaListIdentityProviders' {
            $Content = '[{"id":"0oa97ur0uxAyr6cyC1d7","issuerMode":"DYNAMIC","name":"New idp","status":"ACTIVE","created":"2023-07-31T17:40:34.000Z","lastUpdated":"2023-07-31T17:40:34.000Z","protocol":{"type":"OIDC","endpoints":{"authorization":{"url":"https://idp.example.com/authorize","binding":"HTTP-REDIRECT"},"token":{"url":"https://idp.example.com/token","binding":"HTTP-POST"},"userInfo":{"url":"https://idp.example.com/userinfo","binding":"HTTP-REDIRECT"},"jwks":{"url":"https://idp.example.com/keys","binding":"HTTP-REDIRECT"}},"scopes":["openid","profile","email"],"issuer":{"url":"https://idp.example.com"},"credentials":{"client":{"client_id":"your-client-id","client_secret":"your-client-secret"}}},"policy":{"provisioning":{"action":"AUTO","profileMaster":false,"groups":{"action":"NONE"},"conditions":{"deprovisioned":{"action":"NONE"},"suspended":{"action":"NONE"}}},"accountLink":{"filter":null,"action":"AUTO"},"subject":{"userNameTemplate":{"template":"idpuser.email"},"filter":null,"matchType":"USERNAME","matchAttribute":null},"maxClockSkew":0},"type":"OIDC","_links":{"authorize":{"href":"https://testorg.com/oauth2/v1/authorize?idp=0oa97ur0uxAyr6cyC1d7&client_id={clientId}&response_type={responseType}&response_mode={responseMode}&scope={scopes}&redirect_uri={redirectUri}&state={state}&nonce={nonce}","templated":true,"hints":{"allow":["GET"]}},"clientRedirectUri":{"href":"https://testorg.com/oauth2/v1/authorize/callback","hints":{"allow":["POST"]}}}}]' | ConvertFrom-Json

            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $Idps = Invoke-OktaListIdentityProviders

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1

            $Idps.Count | Should -Be 1
            $Idps[0].Id | Should -Be "0oa97ur0uxAyr6cyC1d7"
            $Idps[0].Name | Should -Be "New idp"
            $Idps[0].Type | Should -Be "OIDC"
            $Idps[0].IssuerMode | Should -Be "DYNAMIC"
            $Idps[0].Protocol.Credentials.Client.Client_Id | Should -Be "your-client-id"
            $Idps[0].Protocol.Credentials.Client.Client_Secret | Should -Be "your-client-secret"
            $Idps[0].Protocol.Type | Should -Be "OIDC"
            
            $Idps[0].Protocol.Endpoints.Token.Binding | Should -Be 'HTTP-POST'
            $Idps[0].Protocol.Endpoints.Token.Url | Should -Be 'https://idp.example.com/token'
            $Idps[0].Protocol.Issuer.Url | Should -Be "https://idp.example.com"
            $Idps[0].Policy.AccountLink.Action | Should -Be "AUTO"
            $Idps[0].Policy.Provisioning.Action | Should -Be "AUTO"
            $Idps[0].Policy.Provisioning.ProfileMaster | Should -Be $False
            $Idps[0].Policy.Provisioning.Conditions.Deprovisioned.Action | Should -Be "NONE"
            $Idps[0].Policy.Provisioning.Conditions.Suspended.Action | Should -Be "NONE"
            $Idps[0].Policy.Provisioning.Groups.Action | Should -Be "NONE"
            $Idps[0].Policy.Subject.UserNameTemplate.Template  | Should -Be "idpuser.email"
            $Idps[0].Policy.Subject.MatchType  | Should -Be "USERNAME"
        }
    }

    Context 'Update-OktaIdentityProvider' {
        It 'Test Update-OktaIdentityProvider' {
            $Content = '{"id":"0oa97ur0uxAyr6cyC1d7","issuerMode":"DYNAMIC","name":"New idp","status":"ACTIVE","created":"2023-07-31T17:40:34.000Z","lastUpdated":"2023-07-31T17:40:34.000Z","protocol":{"type":"OIDC","endpoints":{"authorization":{"url":"https://idp.example.com/authorize","binding":"HTTP-REDIRECT"},"token":{"url":"https://idp.example.com/token","binding":"HTTP-POST"},"userInfo":{"url":"https://idp.example.com/userinfo","binding":"HTTP-REDIRECT"},"jwks":{"url":"https://idp.example.com/keys","binding":"HTTP-REDIRECT"}},"scopes":["openid","profile","email"],"issuer":{"url":"https://idp.example.com"},"credentials":{"client":{"client_id":"your-client-id","client_secret":"your-client-secret"}}},"policy":{"provisioning":{"action":"AUTO","profileMaster":false,"groups":{"action":"NONE"},"conditions":{"deprovisioned":{"action":"NONE"},"suspended":{"action":"NONE"}}},"accountLink":{"filter":null,"action":"AUTO"},"subject":{"userNameTemplate":{"template":"idpuser.email"},"filter":null,"matchType":"USERNAME","matchAttribute":null},"maxClockSkew":0},"type":"OIDC","_links":{"authorize":{"href":"https://testorg.com/oauth2/v1/authorize?idp=0oa97ur0uxAyr6cyC1d7&client_id={clientId}&response_type={responseType}&response_mode={responseMode}&scope={scopes}&redirect_uri={redirectUri}&state={state}&nonce={nonce}","templated":true,"hints":{"allow":["GET"]}},"clientRedirectUri":{"href":"https://testorg.com/oauth2/v1/authorize/callback","hints":{"allow":["POST"]}}}}' | ConvertFrom-Json

            $Response = @{
                Response   = $Content
                StatusCode = 200
                Headers = @{ "Content-Type" = @("application/json")}
            }

            Mock -ModuleName Okta.PowerShell Invoke-OktaApiClient { return $Response } -Verifiable

            $NewIdp = Update-OktaIdentityProvider -IdentityProvider @{} -IdpId "foo"

            Assert-MockCalled -ModuleName Okta.PowerShell Invoke-OktaApiClient -Times 1

            $NewIdp.Id | Should -Be "0oa97ur0uxAyr6cyC1d7"
            $NewIdp.Name | Should -Be "New idp"
            $NewIdp.Type | Should -Be "OIDC"
            $NewIdp.IssuerMode | Should -Be "DYNAMIC"
            $NewIdp.Protocol.Credentials.Client.Client_Id | Should -Be "your-client-id"
            $NewIdp.Protocol.Credentials.Client.Client_Secret | Should -Be "your-client-secret"
            $NewIdp.Protocol.Type | Should -Be "OIDC"
            
            $NewIdp.Protocol.Endpoints.Token.Binding | Should -Be 'HTTP-POST'
            $NewIdp.Protocol.Endpoints.Token.Url | Should -Be 'https://idp.example.com/token'
            $NewIdp.Protocol.Issuer.Url | Should -Be "https://idp.example.com"
            $NewIdp.Policy.AccountLink.Action | Should -Be "AUTO"
            $NewIdp.Policy.Provisioning.Action | Should -Be "AUTO"
            $NewIdp.Policy.Provisioning.ProfileMaster | Should -Be $False
            $NewIdp.Policy.Provisioning.Conditions.Deprovisioned.Action | Should -Be "NONE"
            $NewIdp.Policy.Provisioning.Conditions.Suspended.Action | Should -Be "NONE"
            $NewIdp.Policy.Provisioning.Groups.Action | Should -Be "NONE"
            $NewIdp.Policy.Subject.UserNameTemplate.Template  | Should -Be "idpuser.email"
            $NewIdp.Policy.Subject.MatchType  | Should -Be "USERNAME"
        }
    }

}

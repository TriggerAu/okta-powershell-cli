#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

Describe -tag 'PSOpenAPITools' -name 'SchemaApi' {
    Context 'Get-ApplicationLayout' {
        It 'Test Get-ApplicationLayout' {
            #$TestResult = Get-ApplicationLayout -AppName "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-ApplicationUserSchema' {
        It 'Test Get-ApplicationUserSchema' {
            #$TestResult = Get-ApplicationUserSchema -AppInstanceId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-GroupSchema' {
        It 'Test Get-GroupSchema' {
            #$TestResult = Get-GroupSchema
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-LogStreamSchema' {
        It 'Test Get-LogStreamSchema' {
            #$TestResult = Get-LogStreamSchema -LogStreamType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-UserSchema' {
        It 'Test Get-UserSchema' {
            #$TestResult = Get-UserSchema -SchemaId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListLogStreamSchemas' {
        It 'Test Invoke-ListLogStreamSchemas' {
            #$TestResult = Invoke-ListLogStreamSchemas
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-ApplicationUserProfile' {
        It 'Test Update-ApplicationUserProfile' {
            #$TestResult = Update-ApplicationUserProfile -AppInstanceId "TEST_VALUE" -Body "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-GroupSchema' {
        It 'Test Update-GroupSchema' {
            #$TestResult = Update-GroupSchema -GroupSchema "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-UserProfile' {
        It 'Test Update-UserProfile' {
            #$TestResult = Update-UserProfile -SchemaId "TEST_VALUE" -UserSchema "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

}

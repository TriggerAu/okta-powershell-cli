#
# Okta Management
# Allows customers to easily access the Okta Management APIs
# Version: 3.0.0
# Contact: devex-public@okta.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

Describe -tag 'PSOpenAPITools' -name 'UserApi' {
    Context 'Invoke-ActivateUser' {
        It 'Test Invoke-ActivateUser' {
            #$TestResult = Invoke-ActivateUser -UserId "TEST_VALUE" -SendEmail "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Rename-Password' {
        It 'Test Rename-Password' {
            #$TestResult = Rename-Password -UserId "TEST_VALUE" -ChangePasswordRequest "TEST_VALUE" -Strict "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Rename-RecoveryQuestion' {
        It 'Test Rename-RecoveryQuestion' {
            #$TestResult = Rename-RecoveryQuestion -UserId "TEST_VALUE" -UserCredentials "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Clear-UserSessions' {
        It 'Test Clear-UserSessions' {
            #$TestResult = Clear-UserSessions -UserId "TEST_VALUE" -OauthTokens "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-User' {
        It 'Test New-User' {
            #$TestResult = New-User -Body "TEST_VALUE" -Activate "TEST_VALUE" -Provider "TEST_VALUE" -NextLogin "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeactivateOrDeleteUser' {
        It 'Test Invoke-DeactivateOrDeleteUser' {
            #$TestResult = Invoke-DeactivateOrDeleteUser -UserId "TEST_VALUE" -SendEmail "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeactivateUser' {
        It 'Test Invoke-DeactivateUser' {
            #$TestResult = Invoke-DeactivateUser -UserId "TEST_VALUE" -SendEmail "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ExpirePassword' {
        It 'Test Invoke-ExpirePassword' {
            #$TestResult = Invoke-ExpirePassword -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ExpirePasswordAndGetTemporaryPassword' {
        It 'Test Invoke-ExpirePasswordAndGetTemporaryPassword' {
            #$TestResult = Invoke-ExpirePasswordAndGetTemporaryPassword -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ForgotPassword' {
        It 'Test Invoke-ForgotPassword' {
            #$TestResult = Invoke-ForgotPassword -UserId "TEST_VALUE" -SendEmail "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ForgotPasswordSetNewPassword' {
        It 'Test Invoke-ForgotPasswordSetNewPassword' {
            #$TestResult = Invoke-ForgotPasswordSetNewPassword -UserId "TEST_VALUE" -UserCredentials "TEST_VALUE" -SendEmail "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-LinkedObjectsForUser' {
        It 'Test Get-LinkedObjectsForUser' {
            #$TestResult = Get-LinkedObjectsForUser -UserId "TEST_VALUE" -RelationshipName "TEST_VALUE" -After "TEST_VALUE" -Limit "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-RefreshTokenForUserAndClient' {
        It 'Test Get-RefreshTokenForUserAndClient' {
            #$TestResult = Get-RefreshTokenForUserAndClient -UserId "TEST_VALUE" -ClientId "TEST_VALUE" -TokenId "TEST_VALUE" -Expand "TEST_VALUE" -Limit "TEST_VALUE" -After "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-User' {
        It 'Test Get-User' {
            #$TestResult = Get-User -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-UserGrant' {
        It 'Test Get-UserGrant' {
            #$TestResult = Get-UserGrant -UserId "TEST_VALUE" -GrantId "TEST_VALUE" -Expand "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListAppLinks' {
        It 'Test Invoke-ListAppLinks' {
            #$TestResult = Invoke-ListAppLinks -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListGrantsForUserAndClient' {
        It 'Test Invoke-ListGrantsForUserAndClient' {
            #$TestResult = Invoke-ListGrantsForUserAndClient -UserId "TEST_VALUE" -ClientId "TEST_VALUE" -Expand "TEST_VALUE" -After "TEST_VALUE" -Limit "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListRefreshTokensForUserAndClient' {
        It 'Test Invoke-ListRefreshTokensForUserAndClient' {
            #$TestResult = Invoke-ListRefreshTokensForUserAndClient -UserId "TEST_VALUE" -ClientId "TEST_VALUE" -Expand "TEST_VALUE" -After "TEST_VALUE" -Limit "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListUserClients' {
        It 'Test Invoke-ListUserClients' {
            #$TestResult = Invoke-ListUserClients -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListUserGrants' {
        It 'Test Invoke-ListUserGrants' {
            #$TestResult = Invoke-ListUserGrants -UserId "TEST_VALUE" -ScopeId "TEST_VALUE" -Expand "TEST_VALUE" -After "TEST_VALUE" -Limit "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListUserGroups' {
        It 'Test Invoke-ListUserGroups' {
            #$TestResult = Invoke-ListUserGroups -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListUserIdentityProviders' {
        It 'Test Invoke-ListUserIdentityProviders' {
            #$TestResult = Invoke-ListUserIdentityProviders -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ListUsers' {
        It 'Test Invoke-ListUsers' {
            #$TestResult = Invoke-ListUsers -Q "TEST_VALUE" -After "TEST_VALUE" -Limit "TEST_VALUE" -Filter "TEST_VALUE" -Search "TEST_VALUE" -SortBy "TEST_VALUE" -SortOrder "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-PartialUpdateUser' {
        It 'Test Invoke-PartialUpdateUser' {
            #$TestResult = Invoke-PartialUpdateUser -UserId "TEST_VALUE" -User "TEST_VALUE" -Strict "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ReactivateUser' {
        It 'Test Invoke-ReactivateUser' {
            #$TestResult = Invoke-ReactivateUser -UserId "TEST_VALUE" -SendEmail "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Remove-LinkedObjectForUser' {
        It 'Test Remove-LinkedObjectForUser' {
            #$TestResult = Remove-LinkedObjectForUser -UserId "TEST_VALUE" -RelationshipName "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Reset-Factors' {
        It 'Test Reset-Factors' {
            #$TestResult = Reset-Factors -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Reset-Password' {
        It 'Test Reset-Password' {
            #$TestResult = Reset-Password -UserId "TEST_VALUE" -SendEmail "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Revoke-GrantsForUserAndClient' {
        It 'Test Revoke-GrantsForUserAndClient' {
            #$TestResult = Revoke-GrantsForUserAndClient -UserId "TEST_VALUE" -ClientId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Revoke-TokenForUserAndClient' {
        It 'Test Revoke-TokenForUserAndClient' {
            #$TestResult = Revoke-TokenForUserAndClient -UserId "TEST_VALUE" -ClientId "TEST_VALUE" -TokenId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Revoke-TokensForUserAndClient' {
        It 'Test Revoke-TokensForUserAndClient' {
            #$TestResult = Revoke-TokensForUserAndClient -UserId "TEST_VALUE" -ClientId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Revoke-UserGrant' {
        It 'Test Revoke-UserGrant' {
            #$TestResult = Revoke-UserGrant -UserId "TEST_VALUE" -GrantId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Revoke-UserGrants' {
        It 'Test Revoke-UserGrants' {
            #$TestResult = Revoke-UserGrants -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Set-LinkedObjectForUser' {
        It 'Test Set-LinkedObjectForUser' {
            #$TestResult = Set-LinkedObjectForUser -AssociatedUserId "TEST_VALUE" -PrimaryRelationshipName "TEST_VALUE" -PrimaryUserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Suspend-User' {
        It 'Test Suspend-User' {
            #$TestResult = Suspend-User -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Unlock-User' {
        It 'Test Unlock-User' {
            #$TestResult = Unlock-User -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-UnsuspendUser' {
        It 'Test Invoke-UnsuspendUser' {
            #$TestResult = Invoke-UnsuspendUser -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-User' {
        It 'Test Update-User' {
            #$TestResult = Update-User -UserId "TEST_VALUE" -User "TEST_VALUE" -Strict "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

}
